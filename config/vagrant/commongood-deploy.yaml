---
- hosts: all
  become: yes
  become_method: sudo

  roles:
  nginx
  mysql


  tasks:

  - name: Install Common Good prerequisites
    package:
      name: ['git', 'nginx', 'php', 'mysql', 'mysql-server']
  - name: Apply nginx configuration
create directory
apply permissions
create/apply virtual host

install php extensions
php-json php-bz2 php-curl php-fileinfo php-gd php-gettext php-mbstring php-exif php-mysqli php-pdo php-mbstring
configure php
php.ini, set max_execution_time to 600 or so (seconds), change upload_max_filesize and post_max_size to 50M or so.

  - name: Git checkout cgmembers-frame
    git:
      repo: 'https://github.com/common-good/cgmembers-frame
      dest: /home/common-good/cgmembers-frame

/home/common-good/common-good/cgmembers-frame/cgmembers/rcredits
chmod a+w admin rcron rsmart rvote rweb

  - name: Create database 'commongood'
    community.mysql.mysql_db:
      name: commongood
      state: present
  - name: Create database user 'commongood'
    community.mysql.mysql_db:
      name: commongood
      state: present

CREATE USER 'commongood'@'localhost' IDENTIFIED BY 'commongooddev12';
GRANT ALL PRIVILEGES ON commongood . * TO 'commongood'@'localhost';

  - name: Build database 'commongood'
    exec:
      name: /home/commongood/cgmembers-frame/recreate.sh
  - name: Create directory 'cgPhotoTemp'
    file:
      path: /home/commongood/cgmembers-frame/cgPhotoTemp
      state: directory
  - name: Create directory 'cgLogs'
    file:
      path: /home/commongood/cgmembers-frame/cgLogs
      state: directory
  - name: Generate encryption secrets/passwords
  - name: Generate keys using cgMembers/rcredits/misc/makeKey.php
/etc/pki/tls/openssl.cnf

  - name: Generate keys using cgMembers/rcredits/misc/makeKey.php
#generate keys
# config.json and phinx.json from cgmembers/rcredits/misc/config-models
#config.json and phinx.json 
#$k = <key>;
#          debug(a(1)->makeVKeyE($k));
#debug(u\b64encode(u\unfmtKey(u\pubKey($k)))
# set cg.cnf
# foreach (ray('S V R C P H') as $k) {
#  $pw = $k == 'R' ? a(1)->vKeyPw : '';
#  $v = u\cry($k, 'Success!', FALSE, $pw);
#  if ($k == 'V') $pw = r\vKey();
#  debug("k=$k " . u\decry($k, $v, $pw));
#}

# recommend test

start nginx
