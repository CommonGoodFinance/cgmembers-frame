<?php
namespace rCredits;
use rCredits as r;
use rCredits\Util as u;

/**
 * @file
 * rCredits USD (official currency) account class
 *
 * This class has no awareness of the Drupal database
 */

require_once __DIR__ . '/../dwolla/dwolla.php';
define ('USD_NOTE_PREFIX', 'rC: '); // prefix USD transaction notes so we know they are ours
define ('NO_DWOLLA', TRUE or !t\EST());

class usd {
  var $acct; // the associated rCredits account
  var $type; // what type of official currency account (for example Dwolla, Ripple, or Bank)
  var $number; // the USD account number
  var $pin; // PIN for that account
  var $auth; // authorization token
  private static $atoms = array();

  /**
   * Get a dwolla object. Set the auth token, if appropriate.
   * @param bool $setToken: whether to set the auth token
   * @param string $redirectUri: where to redirect on request for auth token OR
   * @return: a dwolla object (usually received into $dw)
   */
  private function dwolla($setToken = TRUE, $redirectUri = FALSE) {
    $dw = new \DwollaRestClient(DWOLLA_API_KEY, DWOLLA_API_SECRET, $redirectUri);
    if ($setToken) $dw->setToken($this->acct->secure['auth']);
    return $dw;
  }
  
  /**
   * Instantiate (and return) a new USD account object
   * @param acct $acct: the rCredits account that has this USD account
   */
  function __construct($acct) {
    $this->acct = $acct;
    foreach ($acct->secure as $key => $value) if (property_exists($this, $key)) $this->$key = $value;
    $this->number = $acct->usd_account;
  }
  
  /**
   * Handle updated usd information by requesting a new auth token from Dwolla
   * @return: does not return, but initiates callback to receive auth token
   */
  public function getAuth() {
    global $base_url;
    $dw = $this->dwolla('', "$base_url/usd-callback/" . $this->acct->id); // tell Dwolla where to wake us up
	  header('Location: ' . $dw->getAuthUrl()); // request an auth token
    exit();
  }    

  /**
   * Return the account balance or its sufficiency
   * Call by:
   *   $usd->bal() - return the amount currently in the account
   * UNUSED  $usd->bal($want) - return FALSE=no/TRUE=yes/'?'=maybe (meaning there is a connected bank account)
   * UNUSED @param float $want: can the account give up this much money in a hypothetical immediate transaction?
   * UNUSED @param string $error: (RETURNED) an error message on failure
   * @return: balance or sufficiency (FALSE if failure)
   */
  function bal($want = NULL, &$error = NULL) {
    $dw = $this->dwolla();
    if (NO_DWOLLA) return $this->acct->usd;
    return $dw->balance();
  }

  /**
   * Transfer funds from this account to another.
   * @param float $amount: the amount to transfer
   * @param usd $other: the other account
   * @param string $notes: description of transaction (to be prefixed with "r: "), limited to 250-4 characters
   * @param bool $payerFee: the payer pays the transaction fee (if any) -- otherwise (default) the payee pays it
   * $param bool $direct: the funds must already be in the Dwolla account (no 3-day delay)
   * @param string $error: (RETURNED) an error message on failure
   * @return:
   *   success: transaction ID string
   *   fail: FALSE
   *   maybe: '?'
   * NOTE: this function should write the transaction id, amount, payer, and payee to r_usd BEFORE doing the Dwolla transfer
   */
  function transfer($amount, $other, $notes = R_DEFAULT_PURPOSE, $payerFee = FALSE, $direct = TRUE, &$error = NULL) {
    $source = $direct ? 'Dwolla' : 'ERROR'; // no delayed payments at present
    $notes = USD_NOTE_PREFIX . $notes;
    $dw = $this->dwolla();
    if (NO_DWOLLA) $txid = \user_password(); else
    if (!$txid = $dw->send($this->pin, $other->number, $amount, $source, $notes, 0, R_FEE_FOR_CASH and $payerFee)) return FALSE;
    
    $created = time();
    $payer = $this->acct->id;
    $payee = $other->acct->id;
    self::addToAtom(compact(u\ray('txid amount payer payee created')));
    debug("Transferring USD $amount from $payer to $payee.");
    return $txid;
  }
  
  /**
   * Handle callbacks from the USD institution
   * The calling institution is expected to be explicit in the callback info.
   * Used at present only for getting the auth token from Dwolla.
   * @param int $uid: the account id of the rCredits account for which we are getting a callback
   */
  public static function callback($uid) {
    global $base_url;
    $uri = "$base_url/account/usd/connected=";
    
    if (NO_DWOLLA) unset($_GET['error']);
    if(@$_GET['error']) return r\go($uri . $_GET['error_description']);

    $dw = $this->dwolla(FALSE);
    if (NO_DWOLLA) $authToken = \user_password(); else
    if (!$authToken = $dw->requestToken(@$_GET['code'])) return r\go($uri . $dw->getError());

    $acct = r\acct($uid);
    $secure = $acct->secure;
    $secure['auth'] = $authToken;
    $acct->update(compact('secure'));
    return r\go($uri . TRUE); // tell user we were successful
  }

  /**
   * Transfer funds from a Dwolla account to the connected bank account or vice versa.
   * @param float $amount: the amount to transfer to the bank (from the bank, if negative)
   */
  function bank($amount) {
    $dw = $this->dwolla();
    $sources = $dw->fundingSources();
    $function = $amount < 0 ? 'withdraw' : 'deposit';
    debug("Transferring USD $amount from $this->acct->id's Dwolla account to the bank.");
    self::beginAtom();
    if (!$result = $dw->$function($sources['Response'][0]['Id'], $this->pin, abs($amount))) return FALSE;
    $txid = $result['Response'][0]['Id'];
    list ($payer, $payee, $created) = array($this->acct->id, 0, REQUEST_TIME); 
    self::addToAtom(compact(u\ray('txid amount payer payee created')));
    self::commit();
    return $result;
  }

  /**
   * Call the callback for each transaction OUT of the account after a given date/time (defaults to day 1 of the Unix Epoch).
   * Passes to the callback function an assoc with complete transaction details, including transaction id
   */
  function each($callback, $start = 0) {
    $dw = $this->dwolla();
    $skip = 0; // how many transactions to skip, in call to $dw->listings()
    $atATime = 50; // arbitrary, up to 200 (Dwolla limit)
    while ($listings = $dw->listings(strftime('%d-%m-%Y', $start), 'money_sent', $atATime, $skip)) {
      foreach ($listings['Response'] as $one) {
        if (u\abbreviates(USD_NOTE_PREFIX, $one['notes'])) $callback($one); // handle rCredits PAYMENTS only
      }
      $skip += $atATime;
    }   
  }

// Atomic Data Transaction Handling for mixed rCredits/USD financial transactions
// Strategy: Allow inconsistent USD transfers for up to 24 hours after system failure.
// Record committed USD transactions in the r_usd table. 
// A compensating transaction is created at the end of the day, 
//    for any recent USD transfer that does not appear in that table.
// $atoms is a list of transaction IDs waiting to be committed. 
// A Drupal transaction object entry marks the start of a new nested level.
// For example, [$DBTX1, a, b, $DBTX2, c, d, e] has 2 transactions at the top level and 3 nested.
// commit() and rollback() must always be called explicitly, barring a system crash (don't just return to the caller)
  
  /**
   * Mark the beginning of a mixed USD/rCredits (possibly nested) database transaction.
   */
  public static function beginAtom() {return self::$atoms[] = \db_transaction();}
  
  /**
   * Remember a Dwolla transaction to commit or rollback
   *   txid: the Dwolla transaction id
   *   amount: the amount of a Dwolla transaction or bank transfer (negative for a withdrawal)
   *   payer: rCredits account id of the sender
   *   payee: rCredits account id of the other (0 for bank transfers)
   *   created: (int) creation date/time
   */
  private static function addToAtom($one) {self::$atoms[] = $one;}

  public static function commit() {
    $values = '';
    while (!is_object($one = array_shift($atoms))) {
      extract(u\just('txid amount payer payee created', $one));
      $values .= ($values ? ',' : '') . "($txid, $amount $payer $payee $created)";
    }
    u\EXPECT(strpos($values, ';') === FALSE, 'sql insertion in usd commit'); // impossible, but verify
    r\dbQ("INSERT INTO r_usd (txid, amount, payer, payee, created) VALUES $values");
    // Drupal automatically commits if we don't rollback
  }
  
  /**
   * Rollback a list of transactions
   * If no $list is specified, rollback the most recent atom.
   * @param array $list: array of assocs of USD transaction details (defaults to most recent atom)
   * $list is specified when recovering from system failure during the daily (nightly) consistency checks
   */
  public static function rollback($list = array()) {
    if (!$list) {
      while (!is_object($one = array_shift(self::$atoms))) $list[] = $one;
      $one->rollback(); // got Drupal transaction object last (and removed it from list)
    }
    $fields = 'txid amount payer payee created';
    
    foreach ($list as $one) { // create a compensating usd transaction for each transaction in $list
      extract(u\just($fields, $one));
      $usAcct1 = new usd(r\acct($payer));
      $usAcct2 = new usd(r\acct($payee));
  
      self::beginAtom();
      self::addToAtom($one); // record original transaction
      $notes = USD_NOTE_PREFIX . 'reversing Dwolla transaction #' . $one['transactionID'];
      $dw = $usAcct1->dwolla();
      extract(u\just('Success Response', $dw->transaction($txid)));
      if (!@$Success) {self::rollback(); continue;}
      //$payerFee = FALSE; // don't know yet how to extract this from $Response['Fees'][0]['Type'] (?todo)
      $payerFee = R_FEE_FOR_CASH ? ($Response['Notes'] == USD_NOTE_PREFIX . 'cash') : FALSE;
      
      $dw = $usAcct2->dwolla();
      if (!$txid = $dw->send($usAcct2->pin, $usAcct1->number, $amount, 'Dwolla', $notes, 0, $payerFee)) {
        // failure (probably insufficient Dwolla balance).
        list ($payer, $payee, $for, $taking) = array($payee, $payer, $notes, FALSE);
        r\transact(compact(u\ray('payer payee amount for taking'))); // reverse it in rCredits instead.
        if ($amount > 10) be\fund($payerFee ? $payee : $payer, TX_GRANT, 0.25); // reimburse Dwolla fee
      } else {
        list ($amount, $payer, $payee, $created) = array(0, $payee, $payer, time());
        self::addToAtom(compact(u\ray($fields)));
        if ($amount > 10) foreach (array($payer, $payee) as $one) be\fund($one, TX_GRANT, 0.25); // reimburse Dwolla fees
      }
      self::commit();
    }
  }
  
} // end of class
