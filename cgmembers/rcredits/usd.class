<?php
namespace rCredits;
use rCredits\Util as u;

/**
 * @file
 * rCredits USD (official currency) account class
 *
 * This class has no awareness of the Drupal database
 */

class usd {
  var $acct; // the associated rCredits account
  var $type; // what type of official currency account (for example Dwolla, Ripple, or Bank)
  var $number; // the USD account number
  var $pin; // PIN for that account
  var $auth; // authorization token
  var $card_code; // rCard security code
  var $minimum; // how much money the account-holder wants (us) to keep in the account (min)
  var $maximum; // how much money the account-holder wants (us) to keep in the account (max)
  
  /**
   * Instantiate (and return) a new USD account object
   * @param acct $acct: the rCredits account that has this USD account
   */
  function __construct($acct) {
    $this->acct = $acct;
    foreach ($acct->secure as $key => $value) if (property_exists($this, $key)) $this->$key = $value;
    $this->minimum = $acct->min_usd;
    $this->maximum = $acct->max_usd;
  }
  
  /**
   * Update the usd information in the account record (both in this object and in the database).
   * @param assoc $secure: information we need in order to access the account and manage it, possibly including:
   *   type: account type (required if not supplied previously)
   *   number: account number (required for Dwolla)
   *   pin: account PIN (required for Dwolla)
   *   auth: authorization token
   * @param string $error: (RETURNED) an error message if appropriate
   * @return bool: success
   */
  public function update($secure, &$error = NULL) {
//    u\EXPECT(@$info['type'] == 'Dwolla', 'bad usd account type');
    $this->auth = $secure['auth'] = 'DUMMYAUTH';
    $this->acct->update(compact('secure'));
    debug('Updating USD info: ' . print_r(compact('secure'), 1));
    return TRUE;
  }    

  /**
   * Return the account balance or its sufficiency
   * Call by:
   *   $usd->bal() - return the amount currently in the account
   *   $usd->bal($want) - return 0=fail/1=success/2=maybe (meaning there is a connected bank account)
   * @param float $want: can the account give up this much money in a hypothetical immediate transaction?
   * @param string $error: (RETURNED) an error message on failure
   * @return: balance or sufficiency (0 if failure)
   */
  function bal($want = NULL, &$error = NULL) {
    if (isset($want)) {
      return $want <= 100 ? 1 : 0;
    } else {
      return rand(0, 10000) / 100;
    }
  }

  /**
   * Transfer funds from this account to another.
   * @param float $amount: the amount to transfer
   * @param usd $other: the other account
   * $param bool $direct: the funds must already be in the Dwolla account (no 3-day delay)
   * @param string $error: (RETURNED) an error message on failure
   * @param bool $payerFee: the payer pays the transaction fee (if any) -- otherwise (default) the payee pays it
   * @return: 0=fail 1=success 2=maybe
   */
  function transfer($amount, $other, $direct = TRUE, &$error = NULL, $payerFee = FALSE) {
    debug("Transferring USD $amount from {$this->acct->id} to {$other->acct->id}.");
    return rand(0, 1);
  }
  
  /**
   * Handle callbacks from the USD institution
   * The calling institution is expected to be explicit in the callback info
   */
  public static function callback() {
    extract(u\just('this that theother', $_POST));
    
  }

} // end of class
