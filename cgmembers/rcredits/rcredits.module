<?php
/**
 * @file
 * rCredits
 *
 * A module for the rCredits financial system.
 * This module implements rCredits as an extension to Community Accounting (mcapi).
 *
 * PURPOSE:
 * Specifically, this module keeps track of and manages the following:
 * - balances: how much credit each participating individual or enterprise has been given,
 *             toward future goods and services
 * - credit lines: how much advance credit each participant has been (or is to be) granted, with
 *             the expectation that they will produce commensurate goods and services
 * - transactions: exchanges of credit for goods and services or for other types of credit
 * - credit issuance: how credit comes into being, before it is used in transactions
 *
 * CREDIT ISSUANCE:
 * In the rCredits system, credit is always issued as a Ricardian Contract
 * (see http://www.systemics.com/docs/ricardo/issuer/contract.html).
 * Initially, for the first 6 months, credit will be issued only by the Society to Benefit Everyone, Inc.,
 * for rebates, bonuses, and inflation adjustments. That credit will be backed by the membership
 * promise of each participant.
 *
 * After 6 months, we expect that Common Good Communities will be the sole issuers of rCredits.
 * At that time, all participants will exchange their rCredits one-for-one for new rCredits issued
 * jointly by themselves (that is, by their Common Good Community). The new contract will spell out
 * the financial relationship between Common Good Communities.
 *
 * STRUCTURE:
 * rCredits is the central engine
 * separate modules handle the various transaction channels: rSMS, rSmartphone, rBrowser, etc.
 * rIssue handles credit issuance.
 * 
 * a companion module, rDemocracy, handles participatory financial decision-making
 */

require_once 'rcredits.inc';
use rCredits as r;

/**
 * Implements hook_permission().
 * Permission to transact through various interfaces is created here, 
 * so that those permissions can be granted during installation of the corresponding submodules.
 */
function rcredits_permission() {
  return array(
    'transact via sms' => array(
      'title' => t('Transact via SMS'),
      'description' => t("Transfer funds and get account information through the SMS Interface"),
    )
  );
}

/**
 * Implements hook_help().
 */
function rcredits_help($path, $arg) {
  if ($path == 'admin/help#rcredits') {
    return t('If you have trouble using RCredits software during the development phase, call William Spademan for help: wspademan@RCredits.org.');
  }
}

/**
 * Implements mcapi_info_types().
 */
function rcredits_mcapi_info_types() {
  return array('payment', 'charge', 'rebate', 'bonus', 'inflation');
}

/**
 * Implements transactions_alter.
 *
 * Add rebate and bonus to the transaction set.
 */
function rcredits_transactions_alter(&$txs) {
  extract((array) $txs[0], EXTR_PREFIX_ALL, 'my');
  
  if (($my_type != 'payment') and ($my_type != 'charge')) return;
  if ($my_payer_for == 'cash') return; // quit unless rebates and bonuses apply
  
  $payer = $creator = variable_get('rcredits_community_uid');

  $type = 'rebate';
  $payee = $my_payer;
  $amount = $my_worth['und'][0]['quantity'] * r\rebate($payee);
  $for = t('rebate');
  $txs[] = r\transaction_setup(compact('type', 'amount', 'payer', 'payee', 'for', 'creator'));

  $type = 'bonus';
  $payee = $my_payee;
  $amount = $my_worth['und'][0]['quantity'] * r\bonus($payee);
  $for = t('bonus');
  $txs[] = r\transaction_setup(compact('type', 'amount', 'payer', 'payee', 'for', 'creator'));
}
