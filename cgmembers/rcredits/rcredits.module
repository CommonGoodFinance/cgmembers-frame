<?php
/**
 * @file
 * rCredits
 *
 * A module for the rCredits financial system.
 * This module implements rCredits as an extension to Community Accounting (mcapi).
 *
 * PURPOSE:
 * Specifically, this module keeps track of and manages the following:
 * - balances: how much credit each participating individual or enterprise has been given,
 *             toward future goods and services
 * - credit lines: how much advance credit each participant has been (or is to be) granted, with
 *             the expectation that they will produce commensurate goods and services
 * - transactions: exchanges of credit for goods and services or for other types of credit
 * - credit issuance: how credit comes into being, before it is used in transactions
 *
 * CREDIT ISSUANCE:
 * In the rCredits system, credit is always issued as a Ricardian Contract
 * (see http://www.systemics.com/docs/ricardo/issuer/contract.html).
 * Initially, for the first 6 months, credit will be issued only by the Society to Benefit Everyone, Inc.,
 * for rebates, bonuses, and inflation adjustments. That credit will be backed by the membership
 * promise of each participant.
 *
 * After 6 months, we expect that Common Good Communities will be the sole issuers of rCredits.
 * At that time, all participants will exchange their rCredits one-for-one for new rCredits issued
 * jointly by themselves (that is, by their Common Good Community). The new contract will spell out
 * the financial relationship between Common Good Communities.
 *
 * STRUCTURE:
 * rCredits is the central engine
 * separate modules handle the various transaction channels: rSMS, rSmartphone, rBrowser, etc.
 * rIssue handles credit issuance.
 * 
 * a companion module, rDemocracy, handles participatory financial decision-making
 */

require_once 'rcredits.inc';
require_once 'rcredits-backend.inc';
require_once 'rcron/rcron.inc'; // required here by cron
use rCredits as r;
use rCredits\Util as u;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Web as w;
use rCredits\Admin as a;

define('R_SYS_ERR', "The rCredits System has detected an unusual problem. If your activity was interrupted, please feel free to try again.<br>\n");
define('ONE_CRON_OP', 'one cron op'); // flags a call of f('cr. in PHP window, to prevent side-effects

class rCreditsMailSystem extends DefaultMailSystem {
  public function format(array $message) {
    $message['body'] = drupal_wrap_mail(join("\n\n", $message['body']));
    return $message;
  }
}


/**
 * Top level exception handler (not a hook)
 * Log the error and follow up according to channel.
 *   Web: Jump to default member page and display a complete error message.
 *   SMS: Give a short apology.
 *   Smart: Give a short apology.
 *   Uninitialized: print the full error information and die
 */
function rcredits_exception_handler($e) {
  global $channel, $rsms_number;
  global $R_FATAL_ERROR;
  
  list ($msg, $line0, $file0, $trace) = array($e->getMessage(), $e->getLine(), $e->getFile(), $e->getTrace());
  $file0 = basename($file0);
  $trace_msg = '';
  for ($i = 0; $i < 11; $i++) {
    $line = $file = '';
    @extract($trace[$i]); // (file, line, function, args) OR just (function, args)
    $line = @$line ?: '';
    $file = basename(@$file);
    $function = basename(@$function);
/**/ $args = preg_replace('/Array\s+\(/sm', 'Array', print_r(@$args, 1)); // keep
    $args = substr($args, 6); // discard the gratuitous "Array" at the start
    $args = preg_replace('/$\s*\)$\s$/sm', '', $args);
    $args = '    ' . str_replace("\n", "<br>\n    ", $args);
    $args = str_replace('  ', ' &nbsp;', $args);
    $trace_msg .= "<br>\n- $line in $file, calling $function() with:<br>\n$args";
  }
///    $trace = str_replace('<!--', '<! --', print_r($trace, 1));
//    $trace_msg .= "<!--$trace-->"; // source will contain the whole trace
  $msg = '<b>Exception:</b>' . R_SYS_ERR. "<br>\n($msg)<br>\n- $line0 ($file0)" . $trace_msg;
  if (isPRODUCTION) {
    $message = str_replace('&nbsp;', '', str_replace('<br>', '', $msg));
    mail(R_TESTER_EMAIL, 'rCredits FATAL ERROR', $message);
    $R_FATAL_ERROR = u\loga('FATAL', compact('message')); // this gets picked up by rcredits_shutdown()
/**/  die(); // invoke shutdown
/**/ } else echo $msg;
}

/**
 * Implements hook_boot().
 */
function rcredits_boot() {
  drupal_register_shutdown_function('rcredits_shutdown');
  set_exception_handler('rcredits_exception_handler');
}

/**
 * Shutdown function to redirect to error page, if there is an error.
 */
function rcredits_shutdown() {
  global $R_FATAL_ERROR;
  if (@$R_FATAL_ERROR) \drupal_goto('error/' . $R_FATAL_ERROR);
}

/**
 * Implements hook_im_send().
 */
function rcredits_im_send($index, &$message, $subs) {
  return FALSE; // can't send IMs yet

  $message['send'] = FALSE; // disable emailing, since we sent it by IM instead
  return TRUE;
} 

/**
 * Implements hook_mail().
 * @param string $index: filename of email template and index into subjects array
 * @param assoc $msg_array: standard drupal message components: [subject, body, headers]
 * @param assoc $info: substitutions for message body and subject
 * @see also: r\notify() and _user_mail_notify
 */
function rcredits_mail($index, &$msg_array, $info) {
//    $data['user'] = r\acct()->account();
//    user_mail_tokens($variables, $data, compact('language')); // adds links for password reset and account cancelation
    $index = str_replace('_', '-', $index); // correct Drupal template names to rCredits standard
//    if (rcredits_im_send($index, $msg_array, $info)) return; // If we can send by instant-message, do not send by email.
    
    if ($uid = (int) @$info['uid']) {
      //u\EXPECT($uid, 'bad uid in mail');
      $acct = r\acct($uid);
      $info += (array) $acct->account(); // this omits any special fields or special formatting
      $info['quid'] = $acct->mainQid;
      $langcode = $acct->language->language; // instead of $language = $msg_array['language']; 
      $info['shortName'] = $acct->name;
    }
// NOT USED (by policy)  $info['oneTimeLoginUrl'] = \user_pass_reset_url($acct->account());
    $info['site'] = R_SITE_URL;
    $info['region'] = strtolower(R_SERVER_ID);

    $email = $info['email'];
///    foreach ($info as $k => $v) if (is_object($v) or is_array($v)) mail('wspademan@gmail.com', 'acct obj in _mail', print_r(compact('index','msg_array','info','uid','k','v'), 1) . print_r(debug_backtrace(), 1));
    $nolog = u\ray(R_NOLOG);
    foreach ($info as $k0 => $v) if (!is_object($v) and !is_array($v)) {
      $k = '{' . $k0 . '}';
      $subs[$k] = $v;
      $logSubs[$k] = in_array($k0, $nolog) ? '(?)' : $v; // hide personal info and secrets
    }
    $msg_array['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed'; // default is plain text
    $message = @$info['noFrame'] ? r\emailTemplate($index) : r\emailBody($index);
    $subject = @$info['subject'] ?: $GLOBALS['emailSubjects'][$index];
    $subject = $msg_array['subject'] = strtr($subject, $subs);
    $msg_array['body'][] = strtr($message, $subs);

    // prepare log params
    $message = str_replace("\r\n", '', strtr($message, $logSubs)); // easier reading for log and tests
    $fields = compact(u\ray('index email subject message'));
/**/ t\output('Actual (in hook_mail) ' . print_r($fields, 1), 'email');
    u\loga('email', $fields, @$acct);
}

/**
 * Implements hook_page_alter().
 * Used in testing.
  0 => '#show_messages',
  1 => '#theme',
  2 => '#theme_wrappers',
  3 => '#type',
  4 => 'content',
  5 => 'page_top',
  6 => '#post_render',
 */
function rcredits_page_alter($page) {
/// debug($page['#type']);
/// debug(strip_tags($page['content']['system_main']['main']['#markup']));
}

/**
 * Implements hook_cron().
 */
function rcredits_cron() {
  rCredits\Cron\periodic();
}


/**
 * Implements hook_cron_queue_info().
 */
function rcredits_cron_queue_info() {
  $q = r\makeQueue('doTask', R_CRON_PERIOD - R_MAX_TASK_TIME); // make sure it finishes before the next period
  return compact('q');
}

/**
 * Set or return a global variable.
 */
function g($varName) {

}

/**/ function bs($n, $list = B_LIST) {include __DIR__ . '\admin\admin.inc'; debug(a\flagsDesc($n, $list));}
/**/ function tm($n) {debug($result = is_numeric($n) ? date('m-d-Y H:i:s a', $n) : strtotime($n)); return $result;}
function a($id) {global $lastA; return $lastA = r\acct(r\fullQid(strlen($id) == 3 ? '.' . $id : $id));}
function x($xid) {r\x($xid);}
//function us($a = '') {global $lastA; return new r\usd($a ? (is_object($a) ? $a : a($a)) : $lastA);}
/**/ function da($idfield) {list ($id, $field) = u\ray($idfield); debug(a($id)->$field);}
/**/ function step($a) {debug(us($a)->step());}
function ctty($id) {return a(a($id)->community);}
function ray() {return call_user_func_array('\\rCredits\\Util\\ray', func_get_args());}
/**/ function flog($s) {file_put_contents('flog.txt', print_r($s, 1) . "\n", FILE_APPEND);}

/**
 * Return a function result, for a nicknamed namespace function.
 * For example, f('u.fmtAmt 35.2') returns rCredits\Util\fmtAmt(35.2) = "$35.20".
 * f('u.func arg1 arg2') OR f('u.func', arg1, arg2)
 */
function f($func) {
  global $cronOp; $cronOp = ONE_CRON_OP; // just in case we use cr.
  if (substr($func, 0, 2) == 'a.') include_once __DIR__ . '/admin/admin.inc';
  if (substr($func, 0, 2) == 'y.') include_once __DIR__ . '/rcredits-yearly.inc';
  $args = func_get_args();
  if (strpos($func, ' ') and count($args) == 1) $args = u\ray($args[0]);
  $func = array_shift($args);
  return call_user_func_array(funcNickname($func), $args);
}
/**/ function d($s) {debug($result = call_user_func_array('f', func_get_args()));} // debug(f(...))

/**
 * Return the intended fully-qualified function name.
 * @param string $func: a function name of the form x.func, where x is an abbreviated namespace
 * @return the intended function name
 */
function funcNickname($func) {
  list ($n, $func) = explode('.', $func);
  $funcs = u\ray('r w s u be db t p a cr y', '', 'Web', 'Smart', 'Util', 'Backend', 'DB', 'Testing', 'SMS', 'Admin', 'Cron', 'Special');
  return 'rCredits\\' . ($funcs[$n] ? $funcs[$n] . '\\' : '') . $func;
}

/**
 * Utility to do something to each member account (see example below)
 * call: eachA($func);
 * or    eachA(function($a) {...});
 */
function eachA($func = 'a.changeIt') {
  $result = db\q('SELECT uid FROM users WHERE uid>1')->fetchCol();
  if (!is_callable($func)) $func = funcNickname($func);
  foreach ($result as $one) $func(r\acct($one));
}

/**
 * Utility to do something to each existing transaction
 * call: eachX();
 * or    eachAcct(function($x) {...});
 */
function eachX($func = 'a.changeIt') {
  $result = db\q('SELECT xid FROM r_txs');
  if (!is_callable($func)) $func = funcNickname($func);
  foreach ($result as $one) $func(r\x($one));
}

/**
 * Execute a "patch" to a built-in Drupal script. Patched files are also copied to .../rcredits/patches/
 * @param string $function: name of the Drupal function being patched, concatenated with the starting line number
 * @param #2, etc.: varies.
 * @return varies.
 * Note that javascript patches do not appear here. 
 * And query.js is not patched, it is simply updated to the latest jquery.min.js (currently version 1.11).
 */
function patch($name) {
  global $base_url;
  $args = func_get_args();
  
  // common.inc
  if ($name == 'common2682') {
    if (!$mya = r\acct()) return 'signin'; // do not return!
    if ($mya->cAdmin) return 'sadmin';
    w\say(t('You do not have permission to visit that page.'), 'err');
    return 'summary';
    //$click = " <a href=\"$base_url\signin\">" . t('Click here to sign in.') . '</a>'; // r\go('signout') fails
    //return t('You are not authorized to access this page.') . (isDEV ? $args[1] : '') . @$click;
  }
  // user.module
  if ($name == 'user_access810') return FALSE;
  if ($name == 'user_account_form_validate1250') return w\emailDup($args[1], $args[2]); // does this get called?
  if ($name == 'user_login_final_validate2207') {
    $email = $args[1];
    \watchdog('user', 'Login attempt failed for %user.', array('%user' => $email));
    $a = 'href=account/password';
    return (\drupal_get_messages('error', FALSE)) ? '' : w\say('bad login', compact('a'), 'name');
  }
  if ($name == '_user_mail_notify3569') {
    list ($op, $account, $language) = $args;
    $language = @$language ?: \user_preferred_language($account);
    $uid = $account->uid;
    return drupal_mail('rCredits', $op, r\acct($uid)->email, $language, compact('uid'));
  }
  if ($name == 'user_form_process_password_confirm3595') return array(
    'strengthTitle' => t('strength:'),
    'makeLonger' => t('Make it longer'),
    'weak' => t('Weak (not strong enough)'),
    'fair' => t('Fair (but not strong enough)'),
    'good' => t('Good (but not strong enough)'),
    'strong' => t('Strong (but not strong enough)'),
    'verystrong' => t('Very strong (strong enough)'),
    'mighty' => t('Mighty (strong enough)'),
    'paranoid' => t('Paranoid? (plenty strong)'),
  );
  
  // form.inc
  if ($name == 'form_select_options2741') return $args[1]['#options']; // this accommodation for dynamic javascript dropdowns (set #options = NULL) is inadequate when there is an error on the form (see signup form)
  if ($name == 'form_process_password_confirm2914') return ['#title' => t('New password:')];
  if ($name == 'form_process_password_confirm2921') return ['#title' => t('Confirm new password:')];
  
  if ($name == '_update_cron_notify') return; // update.fetch.inc
  if ($name == 'file_munge_filename1174') return; // file.inc
  if ($name == 'filter_access1023') return TRUE; // filter.module (allows all users access to all field formats)
}

/**
 * Run a background op in the foreground (not on production server).
 *//*
function cron($op) {
/// if (isPRODUCTION) return debug("Don't run cron this way on production server.");
  global $testOnly; if(@$testOnly) return FALSE;
  global $cronOp; $cronOp = ONE_CRON_OP;
  $func = "rCredits\\Cron\\$op";
  return $func();
}
*/