<?php
/**
 * @file
 * rCredits
 *
 * A module for the rCredits financial system.
 * This module implements rCredits as an extension to Community Accounting (mcapi).
 *
 * PURPOSE:
 * Specifically, this module keeps track of and manages the following:
 * - balances: how much credit each participating individual or enterprise has been given,
 *             toward future goods and services
 * - credit lines: how much advance credit each participant has been (or is to be) granted, with
 *             the expectation that they will produce commensurate goods and services
 * - transactions: exchanges of credit for goods and services or for other types of credit
 * - credit issuance: how credit comes into being, before it is used in transactions
 *
 * CREDIT ISSUANCE:
 * In the rCredits system, credit is always issued as a Ricardian Contract
 * (see http://www.systemics.com/docs/ricardo/issuer/contract.html).
 * Initially, for the first 6 months, credit will be issued only by the Society to Benefit Everyone, Inc.,
 * for rebates, bonuses, and inflation adjustments. That credit will be backed by the membership
 * promise of each participant.
 *
 * After 6 months, we expect that Common Good Communities will be the sole issuers of rCredits.
 * At that time, all participants will exchange their rCredits one-for-one for new rCredits issued
 * jointly by themselves (that is, by their Common Good Community). The new contract will spell out
 * the financial relationship between Common Good Communities.
 *
 * STRUCTURE:
 * rCredits is the central engine
 * separate modules handle the various transaction channels: rSMS, rSmartphone, rBrowser, etc.
 * rIssue handles credit issuance.
 * 
 * a companion module, rDemocracy, handles participatory financial decision-making
 */

require_once 'rcredits.inc';
require_once 'rcredits-backend.inc';
require_once 'rcredits-cron.inc'; // required here by cron
use rCredits as r;
use rCredits\Util as u;
use rCredits\Testing as t;

class rCreditsMailSystem extends DefaultMailSystem {
  public function format(array $message) {
    $message['body'] = drupal_wrap_mail(join("\n\n", $message['body']));
    return $message;
  }
}


/**
 * Top level exception handler (not a hook)
 * Log the error and follow up according to channel.
 *   Web: Jump to default member page and display a complete error message.
 *   SMS: Give a short apology.
 *   Smart: Give a short apology.
 *   Uninitialized: print the full error information and die
 */
function rcredits_exception_handler($e) {
  global $channel, $rsms_number;
  global $R_FATAL_ERROR;
  
  list ($msg, $line0, $file0, $trace) = array($e->getMessage(), $e->getLine(), $e->getFile(), $e->getTrace());
  $file0 = basename($file0);
  $trace_msg = '';
  for ($i = 0; $i < 11; $i++) {
    $line = $file = '';
    @extract($trace[$i]); // (file, line, function, args) OR just (function, args)
    $line = @$line ?: '';
    $file = basename(@$file);
    $function = basename(@$function);
    $args = preg_replace('/Array\s+\(/sm', 'Array', print_r(@$args, 1)); // keep
    $args = substr($args, 6); // discard the gratuitous "Array" at the start
    $args = preg_replace('/$\s*\)$\s$/sm', '', $args);
    $args = '    ' . str_replace("\n", "<br>\n    ", $args);
    $args = str_replace('  ', ' &nbsp;', $args);
    $trace_msg .= "<br>\n- $line in $file, calling $function() with:<br>\n$args";
  }
//    $trace = str_replace('<!--', '<! --', print_r($trace, 1));
//    $trace_msg .= "<!--$trace-->"; // source will contain the whole trace
  $short_msg = "<b>Exception:</b> The rCredits System has detected an unusual problem. If your activity was interrupted, please feel free to try again.<br>\n";
  $msg = "$short_msg<br>\n($msg)<br>\n- $line0 ($file0)" . $trace_msg;
  $message = str_replace('&nbsp;', '', str_replace('<br>', '', $msg));
  $R_FATAL_ERROR = u\log('FATAL', compact('message'));
  if (@TESTING == 1) print_r($msg, 1); // do this in any case (doesn't show up unless interface fails)

  switch (@$channel) {
    case TX_WEB:
      drupal_set_message($msg, 'error'); // this fails
      drupal_goto('error/' . $R_FATAL_ERROR); // this fails -- use shutdown function to show error page (getting message from log)
    case TX_SMS: if (@$rsms_number) \sms_send($rsms_number, $short_msg); break;
    case TX_SMART: be\api_error($short_msg);
    default: die('with no channel'); // definitely do the print_r first
  }
}

/**
 * Implements hook_boot().
 */
function rcredits_boot() {
  drupal_register_shutdown_function('rcredits_shutdown');
  set_exception_handler('rcredits_exception_handler');
}

/**
 * Shutdown function to redirect to error page, if there is an error.
 */
function rcredits_shutdown() {
  global $R_FATAL_ERROR;
  if (@$R_FATAL_ERROR) \drupal_goto('error/' . $R_FATAL_ERROR);
}

/**
 * Implements hook_im_send().
 */
function rcredits_im_send($key, &$message, $subs) {
  return FALSE; // can't send IMs yet

  $message['send'] = FALSE; // disable emailing, since we sent it by IM instead
  return TRUE;
} 

/**
 * Implements hook_mail().
 * @see also: r\notify() and _user_mail_notify
 */
function rcredits_mail($key, &$msg_array, $info) {
//    $data['user'] = r\acct()->account();
//    user_mail_tokens($variables, $data, compact('language')); // adds links for password reset and account cancelation
    if ($key == 'register_no_approval_required') $key = 'welcome';
    if (rcredits_im_send($key, $msg_array, $info)) return; // If we can send by instant-message, do not send by email.
    
    $uid = $info['uid'];
    $acct = r\acct($uid);
    $info += (array) $acct->account();
    $info['fullName'] = $info['full_name'];
    $info['quid'] = $acct->mainQid;
    $info['oneTimeLoginUrl'] = user_pass_reset_url($acct->account());
    $info['site'] = R_SITE_URL;
    $email = $info['email'] = $info['mail'];

    foreach ($info as $k => $value) $subs['{' . $k . '}'] = $value;
    $langcode = $acct->language->language; // instead of $language = $msg_array['language']; 
    $msg_array['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed'; // default is plain text
    $message = @$info['noFrame'] ? r\emailTemplate($key) : r\emailBody($key);
    $msg_array['body'][] = $message = strtr($message, $subs);
    $msg_array['subject'] = $subject = @$info['subject'] ?: strtr($GLOBALS['emailSubjects'][$key], $subs);

    $message = str_replace("\r\n", '', $message); // easier reading for log and tests
    $message = str_replace($info['oneTimeLoginUrl'], '(varies)', $message);
    $fields = compact(u\ray('key email subject message'));
    if (@TESTING == 1) \drupal_set_message(t\color($fields, 'email')); // keep this
    
    if (!r\acct()) { // must be register/login/reset, so setup what u\log needs
      r\acct::setDefault($acct);      
      global $channel; if (!$channel) $channel = TX_WEB;
    }
    u\log('email', $fields);

//    $msg_array['subject'] = t('Notification from !site', $variables, compact('langcode'));
//    $msg_array['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, compact('langcode'));
    
}

/**
 * Implements hook_page_alter().
 * Used in testing.
  0 => '#show_messages',
  1 => '#theme',
  2 => '#theme_wrappers',
  3 => '#type',
  4 => 'content',
  5 => 'page_top',
  6 => '#post_render',
 */
function rcredits_page_alter($page) {
  //debug($page['#type']);
  //debug(strip_tags($page['content']['system_main']['main']['#markup']));
}

/**
 * Implements hook_cron().
 */
function rcredits_cron() {
  rCredits\Cron\periodic();
}


/**
 * Implements hook_cron_queue_info().
 */
function rcredits_cron_queue_info() {
  $intensiveQueues = 'virtualPayment redistribute'; // these want to be done ASAP once they start
  $queues = u\ray('checkBalance checkScam inflation statement f1099 ' . $intensiveQueues);
  foreach ($queues as $one) $$one = r\makeQueue($one, strpos($intensiveQueues, $one) !== FALSE ? 5*60 : 15);
  return compact($queues);
}
