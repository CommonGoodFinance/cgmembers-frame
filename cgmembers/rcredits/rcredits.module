<?php
/**
 * @file
 * rCredits
 *
 * A module for the rCredits financial system.
 * This module implements rCredits as an extension to Community Accounting (mcapi).
 *
 * PURPOSE:
 * Specifically, this module keeps track of and manages the following:
 * - balances: how much credit each participating individual or enterprise has been given,
 *             toward future goods and services
 * - credit lines: how much advance credit each participant has been (or is to be) granted, with
 *             the expectation that they will produce commensurate goods and services
 * - transactions: exchanges of credit for goods and services or for other types of credit
 * - credit issuance: how credit comes into being, before it is used in transactions
 *
 * CREDIT ISSUANCE:
 * In the rCredits system, credit is always issued as a Ricardian Contract
 * (see http://www.systemics.com/docs/ricardo/issuer/contract.html).
 * Initially, for the first 6 months, credit will be issued only by the Society to Benefit Everyone, Inc.,
 * for rebates, bonuses, and inflation adjustments. That credit will be backed by the membership
 * promise of each participant.
 *
 * After 6 months, we expect that Common Good Communities will be the sole issuers of rCredits.
 * At that time, all participants will exchange their rCredits one-for-one for new rCredits issued
 * jointly by themselves (that is, by their Common Good Community). The new contract will spell out
 * the financial relationship between Common Good Communities.
 *
 * STRUCTURE:
 * rCredits is the central engine
 * separate modules handle the various transaction channels: rSMS, rSmartphone, rBrowser, etc.
 * rIssue handles credit issuance.
 * 
 * a companion module, rDemocracy, handles participatory financial decision-making
 */

require_once 'rcredits.inc';
require_once 'rcredits-api.inc';
use rCredits as r;
use rCredits\Util as u;
use rCredits\Testing as t;

class rCreditsMailSystem extends DefaultMailSystem {
  public function format(array $message) {
    $message['body'] = drupal_wrap_mail(join("\n\n", $message['body']));
    return $message;
  }
}


/**
 * Top level exception handler (not a hook)
 * Log the error and follow up according to channel.
 *   Web: Jump to default member page and display a complete error message.
 *   SMS: Give a short apology.
 *   Smart: Give a short apology.
 *   Uninitialized: print the full error information and die
 */
function rcredits_exception_handler($e) {
  global $channel, $rsms_number;
  global $R_FATAL_ERROR;
  
  list ($msg, $line0, $file0, $trace) = array($e->getMessage(), $e->getLine(), $e->getFile(), $e->getTrace());
  $file0 = basename($file0);
  $trace_msg = '';
  for ($i = 0; $i < 11; $i++) {
    $line = $file = '';
    extract($trace[$i]); // (file, line, function, args) OR just (function, args)
    $line = @$line ?: '';
    $file = basename(@$file);
    $function = basename($function);
    $args = preg_replace('/Array\s+\(/sm', 'Array', print_r($args, 1));
    $args = substr($args, 6); // discard the gratuitous "Array" at the start
    $args = preg_replace('/$\s*\)$\s$/sm', '', $args);
    $args = '    ' . str_replace("\n", "<br>\n    ", $args);
    $args = str_replace('  ', ' &nbsp;', $args);
    $trace_msg .= "<br>\n- $line in $file, calling $function() with:<br>\n$args";
  }
//    $trace = str_replace('<!--', '<! --', print_r($trace, 1));
//    $trace_msg .= "<!--$trace-->"; // source will contain the whole trace
  $short_msg = "<b>Exception:</b> The rCredits System has detected an unusual problem. If your activity was interrupted, please feel free to try again.<br>\n";
  $msg = "$short_msg<br>\n($msg)<br>\n- $line0 ($file0)" . $trace_msg;
  $message = str_replace('&nbsp;', '', str_replace('<br>', '', $msg));
  $R_FATAL_ERROR = u\log('FATAL', compact('message'));
  if (defined('TESTING')) print_r($msg, 1); // do this in any case (doesn't show up unless interface fails)

  switch (@$channel) {
    case TX_WEB:
      drupal_set_message($msg, 'error'); // this fails
      drupal_goto('error/' . $R_FATAL_ERROR); // this fails -- use shutdown function to show error page (getting message from log)
    case TX_SMS: if (@$rsms_number) \sms_send($rsms_number, $short_msg); break;
    case TX_SMART: api\api_error($short_msg);
    default: die('with no channel'); // definitely do the print_r first
  }
}

/**
 * Implements hook_boot().
 */
function rcredits_boot() {
  drupal_register_shutdown_function('rcredits_shutdown');
  set_exception_handler('rcredits_exception_handler');
}

/**
 * Shutdown function to redirect to error page, if there is an error.
 */
function rcredits_shutdown() {
  global $R_FATAL_ERROR;
  if (@$R_FATAL_ERROR) \drupal_goto('error/' . $R_FATAL_ERROR);
}

/**
 * Implements hook_permission().
 * Permission to transact through various interfaces is created here, 
 * so that those permissions can be granted during installation of the corresponding submodules.
 *
function rcredits_permission() {
  $permissions = array();
  r\permission($permissions, 'Member', t('Has an account, can access the member area and do "As If" transactions'));
  r\permission($permissions, 'Partner', t('Signed the membership agreement and donated'));
  r\permission($permissions, 'Steward', t('Is allowed to vote and is responsible for stewarding the Common Good Community'));
// make this a role  r\permission($permissions, 'rTrader', t('Is allowed to use rCredits for real'));
  r\permission($permissions, 'Charge others', t('Can charge customers without confirmation'));
//  r\permission($permissions, 'Transact via SMS', t('Transfer funds and get account information through the SMS Interface'));
//  r\permission($permissions, 'Transact via Web Browser', t('Transfer funds and get account information through the Web Browser Interface'));
//  r\permission($permissions, 'Transact via Smart Phone', t('Transfer funds and get account information through the Smart Interface'));
  return $permissions;
}
*/

/**
 * Implements hook_help().
 */
function rcredits_help($path, $arg) {
  if ($path == 'admin/help#rCredits') {
    return t('If you have trouble using rCredits software during the development phase, call William Spademan for help: wspademan@RCredits.org.');
  }
}

/**
 * Implements hook_mail().
 */
function rcredits_im_send($key, &$message, $subs) {
  return FALSE; // can't send IMs yet

  $message['send'] = FALSE; // disable emailing, since we sent it my IM instead
  return TRUE;
} 

/**
 * Implements hook_mail().
 */
function rcredits_mail($key, &$msg_array, $subs) {
    $language = $msg_array['language'];
//    $data['user'] = r\acct()->account();
//    user_mail_tokens($variables, $data, compact('language')); // adds links for password reset and account cancelation
    
    if (rcredits_im_send($key, $msg_array, $subs)) return; // If we can send by instant-message, do not send by email.
    $langcode = $language->language;
    $msg_array['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed'; // default is plain text
    $msg_array['subject'] = $subject = strtr($GLOBALS['email_subjects'][$key], $subs);
    $msg_array['body'][] = $message = strtr(r\emailBody($key), $subs);
    $message = str_replace("\r\n", '', $message); // easier reading for log and tests
    $email = $subs['{EMAIL}'];
    $fields = compact(u\ray('key email subject message'));
    if (defined('TESTING')) \drupal_set_message(t\color($fields, 'email')); // keep this
    u\log('email', $fields);

//    $msg_array['subject'] = t('Notification from !site', $variables, compact('langcode'));
//    $msg_array['body'][] = t("Dear !username\n\nThere is new content available on the site.", $variables, compact('langcode'));
    
}

/*************/

define('JSON_UNESCAPED_SLASHES', '');
function json_encode2($s, $zot) { // fudge or pre PHP-5.4 (delete this and change to json_encode (no 2) when we upgrade)
  $standin = '!##$%!';
  $s = str_replace('/', $standin, $s);
  $s = json_encode($s);
  return str_replace($standin, '/', $s);
}

/**
 * Add a single entry to the permission array for hook_permission()
 */
/*
function permission(&$permissions, $title, $description) {
  $permissions[strtolower($title)] = compact('title', 'description');
}
*/