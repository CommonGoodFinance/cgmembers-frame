<?php
namespace rCredits;
use rCredits as r;
use rCredits\Util as u;
use rCredits\Testing as t;

/**
 * @file
 * rCredits check class
 * Extends the TCPDF class -- especially for printing checks.
 */

require_once(__DIR__ . "/../tcpdf/config/lang/eng.php");
require_once(__DIR__ . "/../tcpdf/tcpdf.php");

define('CHECK_FONT_SIZE', 12); // points
define('CHECK_HEIGHT', 3.5); // inch height of checks

class Check extends \TCPDF {
  private $lastX; // x-coordinate of last text
  private $lastY; // y-coordinate of last text
  public $pageW; // page width
  public $pageH; // page height
  public $lineH; // standard line height in inches
  
  /**
   * Create a check object.
   */
	public function __construct() {
    parent::__construct('P', 'in', 'LETTER');
    $this->pageW = $this->getPageWidth();
    $this->pageH = $this->getPageHeight();
    $this->lineH = CHECK_FONT_SIZE / 72;
  }

  /**
   * Put some text somewhere on the page.
   * @param string $text: what to say
   * @param int $x, $y: position coordinates (negative means from trailing edge, '' for same as previous)
   * @param int $w, $h: box size (defaults to until page edge)
   *   If $h is specified, text is justified to the bottom of the box.
   * @param string $format: string list of formats: B, I, CAPS, <font-size>, <font-family>
   *   (default normal, Arial, 10-point)
   * @param string $align: horizontal alignment (L, R, C)
   * @param mixed $borders: border width if numeric or "B" for bottom, "R" for right, etc. (default none)
   */
  public function say($text, $x, $y, $w = '', $h = '', $format = '', $align = '', $borders = 0) {
    global $pdfSays; $pdfSays[] = $text;
    $formats = [];
    $font = 'Arial';
    $size = CHECK_FONT_SIZE;
    if ($x === '') $x = $this->lastX;
    if ($y === '') $y = $this->lastY;
    if ($w === '') $w = $this->pageW - $x;
    $h0 = $h;
    if ($h === '') $h = $this->pageH - $y;
    if ($format) foreach (u\ray($format) as $fmt) {
      if ($fmt == 'B') {$formats[] = 'font-weight:bold;'; continue;}
      if ($fmt == 'I') {$formats[] = 'font-style:italic;'; continue;}
      if ($fmt == 'CAPS') {$text = str_replace('<BR>', '<br>', strtoupper($text)); continue;}
      if (is_numeric($fmt)) {$size = $fmt; continue;}
      $font = $fmt;
    }
    $formats[] = "font-family:$font;";
    $formats[] = "font-size:{$size}pt;";
    $format = join(' ', $formats);
    $offset = $h0 ? ((CHECK_FONT_SIZE - $size) / 72) * (substr_count($text, '<br>') + 1) : 0;
    $text = "<div style=\"$format\">$text</div>";
    $this->writeHTMLCell($w, $h, $x, $y + $offset, $text, $borders, 0, FALSE, TRUE, $align);
    list ($this->lastX, $this->lastY) = [$x, $y];
//    debug("wrote $text at $x,$y");
  }
}
