rCredits Software
Notes for developers

Short term tasks:
On new. server (after updating code):
  UPDATE users SET account_type=IF(uid<100, 0, 1) WHERE account_type IS NULL;
  UPDATE users SET account_type=account_type+1 WHERE account_type>0;
  UPDATE r_asif SET state=-1 WHERE state=0;
  UPDATE r_asif SET state=0 WHERE state=2;
  ALTER TABLE  `users` 
DROP  `dob` ,
DROP  `usd_auth` ,
DROP  `id_proof` ,
DROP  `answer` ,
DROP  `federal_id` ;
  reinstall modules
  
- handle TX_TENTATIVE
- code for usd_amount
- outline distribution procedure for rCredits requests:
    Weekly: Everyone in line gets $10, starting with the Nubes, who have to PAY for their first $10 of credits, which then
    get created on the spot (that's the float)
    Keep going around the queue until there's less than $10 to sell.
    Report result, with option to order more and option to renew order for remainder automatically.
    Date of next distribution is always known.
- in profile, handle links to list of website
- handle personal&commercial (choose only if you are self-employed, using your own social security number and photograph for the business, and you don't want a separate account for the business). Look especially for !PERM_COMPANY.
- rcredits agreement: "plus the amount I saved on credit card processing fees"
- when dwolla confirmation comes through, simply change the state of the transaction from "tentative" to "done" (no need for . 
- The Transactions screen shows always the "amount", which is the total amount, with an extra column for USD.
- Transaction Summary: add extra rows for "Unavailable until <date>", "Available Balance", "Incentive Rewards to Date", and "Amount That Can Be Exchanged for USD", reflecting serialized assoc values in the data field of the account: balance, frozen[n]=array(date,amount), rewards (available balance is calculated)
- cron for daily stuff
- for now, mock up a stand-alone php script on rcredits.org for the secret table. But write it and debug it first on new. (referring back to new.)
- signup button on rcredits.org goes directly to user/register
- demo button on rcredits.org goes to login with options to log in as abeone, beatwo (self-employed), cornerpub, or townarts (which should have a "Contribute" form on its member/townarts page)


A. Development environment
 - See https://docs.google.com/document/d/1oQU-PPown2TV02Xg9htxByzOhUopGH-areUrlZ94Te0/edit
   for Step by Step Development Environment Setup Instructions
 - Use Notepad++ for viewing and editing .feature files (makes it a LOT more pleasant).
   View/User-Defined Dialogue/Import gherkin-format-notepad++.xml from the Gherkin folder
   If you use Notepad++ for PHP, Go to Settings/Style Configurator/Language, select php, add the following list to User Ext.:
      inc module test class install steps
   Also go to Settings/Preferences/Tab Settings and set the tab size to 2, replace with spaces
 
B. Coding style and strategies:
  - isDev (defined at the top of rcredits.inc) is TRUE only under Windows
  - Mostly follow generally-accepted coding practices (For example, all of the Eclipse's defaults.)
  - Exceptions: 
    . Indent two spaces instead of one tab.
    . A simple if then can go all on one line.
    . A simple else can immediately follow the closing brace of the if part. For example: } else zot();
    . Simple, single-line functions can go all on one line, without a documentation header.
  - Use camelCase for all internal variables and function names.
  - Use lowercase-and-hyphens for filenames and URLs.
  - Use lowercase_and_underscores for database fields, API paramaters, and other public/external identifiers.
  - Keep the code as short as possible without losing clarity.
  - In particular, avoid redundant code patterns by creating small, low-level functions.
  - Make the tools easy to use -- that is, allow variations in number and type of arguments if that is convenient for the caller.
  - Avoid high-level Drupal functions -- for example don't use Views, Fields, and complex modules. Eventually we expect to
    drop Drupal, so avoid unnecessary dependency and entanglement.

C. rCredits module structure
   There are at least three distinct interfaces to rCredits, all sharing business logic code in the main rcredits folder.
   Each interface (rWeb, rSmart, and rSMS) has its sub-module in its own folder, with its own features and tests.
   Code that is unlikely ever to apply to more than one interface, should not go in the main rcredits folder and vice versa.
   
D. rCredits namespaces and how they are abbreviated in calling files:
   (r) rCredits: shared business logic code
         (r/Web) rCredits/Web
         (r/Smart) rCredits/Smart
         (r/SMS) rCredits/SMS
   (t) rCredits/Testing
   (u) rCredits/Utilities: helper functions that are not clearly specific to rCredits
   (be) rCredits/Backend: business logic functions called directly by the interfaces
        The separation of r from be is incomplete and muddy. We might wanna just use "r" for these backend functions
 
E. Database clues
   - All rCredits tables begin with "r_", except the users table, which we have added many fields to.
   - users (accounts)
     . Common Good Communities (CGCs) and regional servers have uid < 0.
         -1 to -17575: regional servers (the numeric version of the region's 3-letter qid, negated -- AAA is not used)
           the software should be able to treat some servers as virtual independent servers, for example when CT started
           using rCredits for real before they had their own server, the NEW server gave them all NEC. qids rather than NEW.
         less than -1000000: Common Good Communities (leaving room for 4-character regions)
     . Tests create users with uids starting at 17550 (ZZA, ZZB, etc.)
     . name is a lowercase, no-punctuation version of the full_name field, sometimes with a numeric suffix to disambiguate
         exceptions: admin is admin. For regions, name is (uppercase) the 3-char start of their qids, followed by "."
     . pass and mail should be called "password" and "email" but Drupal doesn't. So it's confusing.
     . we don't currently use theme, signature, or signature format.
     . data: We use this to store non-essential information in a serialized associative array:
         picture: the URL of a temporary guessed-at picture for Greenfield businesses. Once the business uploads a picture, this guessed one has no effect. These links should have gone in the file_managed table instead, but they didn't.
         width and height: size of the picture
         company, employee_ok, and is_owner: these are stored upon registration, but they should really go in the relations table and the user should be required to give a phone number for the company, if it is not in the users table yet
         new_account: qid of new account when this account is closed by moving funds elsewhere
     . description is html for the company's page (N/A for personal accounts)
     . community_uid: the (negative) uid of the account's CGC. For anyone who is not in an established CGC, their community is the region (using the regional server's uid). For region and community records, community_uid === uid
     . counts is not currently used
     . usd_auth is a serialized assoc:
         gateway: Dwolla
         PIN: the Dwolla PIN
         auth: the Dwolla OAUTH code
   - r_txs
     . xid: record id. Always positive in the tables, but in the code: negative zxid means use the ASIF table (r_asif) instead.
       Transactions are identified to the user counting just their own transactions (1, 2, 3, ...), NOT as an xid.
     . payer: normally the uid of the account being debited. If the payer is "foreign" (that is, if their account record is stored on a different regional server), then payer is that region's uid and the data field has details. Similarly, payee, payer_agent, and/or payee_agent might be a region, with details in data.
     . amount: the amount of rCredits transferred. While waiting for a USD amount to clear, the entire transaction amount is
         tentatively (TX_TENTATIVE) transferred in rCredits, so amount is the total transaction amount
     . usd_amount: the amount of USD transferred (or waiting to be transferred). While waiting for a USD amount to clear, 
         this field holds the expected amount of USD. (So the total of amount+usd_amount is typically greater than the total
         transaction amount, until the transaction is TX_DONE.)         
     . data: We use this to store non-essential and unusual essential information in a serialized associative array:
       undone: 1 if the transaction has been reversed
       bonus and rebate: the dollar amounts of any rewards associated with a payment
       zxid: the (signed) transaction id of the undone transaction that this transaction reverses
       pay_all: this transaction is part of a pay "all"
       preapproved: (not in the table, just internally) transaction is preapproved by another server (a payment or an authorized business unilaterally charging a customer)
       foreign_payer, foreign_payee: uid of a non-local party to the transaction
       foreign_payer_agent, foreign_payee_agent: uid of a non-local agent for a party to the transaction
   - r_asif: the pretend version of r_txs (ASIF transaction numbers are displayed with prefix "a")
   (more to come...)
   - r_secret_new: protected personal identifying information from the NEW region
     . id: a random id that matches the type and length of the original data
     . data: the original data, encrypted, len=
         
F. Notes on some PHP functions and rCredits utilities - often-used or crucial
     compact/extract: typically we compact arguments to a function and the function extracts them
     ray: turns a delimited string into an array, increasing code readability, typability, and maintainability
     just: makes extract() simpler, self-documenting, and less prone to confusion
     tt: our version of Drupal's t() function, but with named messages and more convenient substitution
     EXPECT: a costly but easy-to-use constistency checker
     ret<X>: A collection of functions to return the argument when it passes a certain test.
     is<X>: A collection of functions to return TRUE when the argument passes a certain test, otherwise FALSE.
     r\acct(): interface to the acct object -- representing an account (including region), combined with the current agent for the account. Note that r\acct($uid) is very different from new r\acct($uid).
    
G. Special rCredits datatypes
  assoc: an associative array (not really special, but we call it "assoc" rather than "array" in the function headers)
   acct: an account (including the region), together with the agent currently representing that account

  zid: a signed id (non-zero) -- the meaning of a negative value varies, depending on usage (ie a qxid or quid)
 reid: a relation id
  uid: an account id
  xid: a transaction id

  qid: a mostly-alphabetic representation of a zid, eg "XXX.YYYY...", used externally for REST and SMS queries.
    XXX (3 letters) represents the region's uid, YYYY... (some number of letters) represents a record ID
    the separator can be a colon instead of period, giving YYYY... a different meaning
      There are also two accepted alternatives to a colon: .. OR =
    The region (XXX) can be omitted in SMS identifiers (eg "200 to .ABCDE for pie")
    For each region that exists, we have a user record with uid < 0, with name = the region name followed by a period (eg ABC.)
    (Communities within the region also have negative uids, descending from -1,000,000, and do not need qids,
    but could have a qid with a hyphen, like AAA-BBB, if needed.)
  
 qxid: a qid (8 characters or more) reprersenting a zxid (: means a negative zxid)
 quid: a qid (7 characters or more) representing a uid acting as its own agent (. separator) OR an reid (: separator)
 zxid: a (signed) transaction id (>0: xid in r_txs (real), <0: -xid in r_asif)
       All database operations with transactions are performed by dbQ() on a virtual table {txs} with key zxid.

H. TODO
@todo: add videos, like this:
  <video width="320" height="240" controls autoplay>
    <source src="movie.mp4" type="video/mp4">
    <source src="movie.ogg" type="video/ogg">
    <source src="movie.webm" type="video/webm">
  Your browser does not support the video tag. (maybe embed a clickable vid in an iframe here?)
  </video>
@todo: rate each account health as ratio of total demand of repeat payees (2x/2.5mos) to total demand of recent payers (2.5mos) (potential for future) OR to monthly sales (current health); also rate of change of sales volume (maximize for everyone and not negative)

/**
 * Return a number or recordset representing the health of one or more accounts.
 * @param string $where: a uid or criteria for account selection
 * @return: a number representing the health of the specified account OR a recordset given the health of each account
 */
function health($where = 'TRUE') {

  if (is_numeric($where)) $where = "uid=$where";
  
  $payeeDemandSql = demandSql('payee', 2, 2.5, $where);
  $payerDemandSql = demandSql('payer', 0, 3, $where);
  $return eachAccount($queries, $ons, $where, $subs = array()) {

// * @param string $measure: current, future, count, or growth
  if ($measure == 'current' or $measure == 'growth') {
    $lastMonthSales = r\dbQ(salesSql(1, $where));
    $prevMonthSales = r\dbQ(salesSql(2, $where)) - $lastMonthSales;
  }
  if ($measure == 'growth') {
    return u\small($prevMonthSales) ? (u\small($lastMonthSales) ? 0 : 1) : ($lastMonthSales - $prevMonthSales) / $prevMonthSales;
  } elseif ($measure == 

compact('cuid', 'months')

list ($me, $months) = array('payee', '2');
$last2MonthsSales =

/**
 * Return a query that will return payee,sales1,sales2,sales3
 * where the salesN fields are total sales for the payee for the preceding (non-calendar) month, month before that, etc.
 */
function salesSql() {
  $fields = 'payee';
  for ($i = 0; $i <= 3; $i++) {
    $nextMonth = @$monthi;
    $monthi = strtotime("$i months ago", REQUEST_TIME);
    if ($i > 0) $fields .= ",SUM(IF(completed>=$monthi AND completed<$nextMonth, amount, 0)) AS sales$i";
  }
  return "SELECT $fields FROM txs WHERE type=:TX_TRANSACT AND goods AND state=:TX_DONE AND completed>=$monthi AND payee=u.uid";
}

/**
 * Return a query that will return (total) demand for an account's payers or payees in the recent past.
 * @param string $other: payer or payee
 * @param int $minRepeats: consider demand from members who did business with the account at least this many times
 * @param int $months: how far back to look
 */
function demandSql($other, $minRepeats, $months) {
  $earliest = strtotime("$months ago", REQUEST_TIME);
  $me = $other == 'payer' ? 'payee' : 'payer';
  return <<<EOF
  SELECT SUM(demand) AS demand 
    FROM (SELECT $other, COUNT(*) AS count FROM txs 
    WHERE type=:TX_TRANSACT AND goods AND state=:TX_DONE AND completed>=$earliest AND $me=u.uid AND $other>0)
    WHERE count>=$minRepeats
EOF;
}

function eachAccount($queries, $ons, $where = 'TRUE', $subs = array()) {
  $fields = 'u.uid';
  $tables = 'users u';
  foreach ($queries as $q => $query) {
    $on = array_shift($ons);
    $fields .= ",$q.*";
    $tables .= ",($query) $q ON $q.$on=u.uid";
  }
  return r\dbQ("SELECT $fields FROM $tables WHERE $where", $subs);
}

@todo: handle account type as bits. New choices: self-employed doing business under your own name, publicly-traded corporation.
@todo: business ("commercial") can't get incentives until it has specified at least one owner
@todo: use hidentity in r\acct (_get and update, not account()) for federal_id, dob, usd_acct, and id_proof
@todo: move some util functions, like ray(), to rcredits-basic.inc and "USE" them everywhere without a namespace qualifier.
@todo: on successful web request for rCredits, say you will have to Dwolla us $20, to actually be added to the waiting list.
@todo: allow surrounding spaces on all web input, leading dollar signs in amounts. Test. (mostly done)
@todo: change zxid to a class. $tx->xid, table, real
@todo
- handling employees (virtual payments). This should probably be extended to suppliers too,
  or maybe even to everyone. The idea is to pay someone virtually in rCredits by totally paying them
  (either first or second) in US Dollars and (either second or first) having them buy back
  the appropriate amount of rCredits. Probably the best way to do this is with a simple payment transaction
  that requires confirmation by the payee (an "offer"). The payee cannot accept the offer without first paying
  that amount to the Community in US Dollars (using billpay or Dwolla). [need to integrate with Dwolla, otherwise done.]
@todo: we also need some kind of confirmation on foreign transactions (from the other server)
@todo: don't require email address for SMS signups, set name properly [NOT YET. JUST LEAVE IT.]
@todo: store country code rather than country, and state code rather than state, using tables from civiCRM
@todo: store city code (rather than city), with a code for "other" -- store other in data or r_other (same for country/state) MAYBE
@todo: reporting for a community or server (a form that anyone can use)
@todo: download transactions in standard formats
@todo: Finish separating backend. Front end should have no registered users. This should maybe wait until after launch.
@todo: use popups for some things
@todo: make help divs draggable
@todo: when a relation for a company is created with PERM_MANAGE, warn the user that they will no longer be able to log in directly to the company account, change the password to "NOACCESS", and prevent a password change ("Only authorized individuals can manage this account.")
@todo: option to suppress current balance in messages (make it a separate message) BIT_SHOWBAL (default TRUE)
@todo: rTraders have unlimited asif rCredits (or unlimited credit and show balance as N/A)
@todo: Miscellaneous other data to collect:
  Names and Social Security Numbers of Dependents [why do we need this?]
  If this is a joint account and you are the first to join, social security numbers of the other account holders
  If this is a joint account, do you want separate balances? (if so, it will be treated as separate accounts except that available funds may be transferred automatically to any of the joined accounts that dips below its credit limit.)
  Choose a Proxy -- someone to represent you, whenever you are unable to vote directly. This should be someone you trust to make sound decisions for the common good of all. Also choose an Alternate proxy, as a backup. If you choose someone who is not yet a member, you will need to supply their email address, so we can invite them to participate. Your membership will not be complete until your chosen representatives sign up.
  Proxy:
  Alternate:
@todo: closed accounts have only read perm and point (data[new_account]) at new account qid
@todo: servers exchange info on which ss#s (or other ids) are dups
@todo: *** unilateral only if agent charging for company using SMS or scan. No invoicing for remainder beyond partial charge (just say how much is still due).
@todo: donations
@todo
- remove all direct db operations from interface modules (and their .inc files) -- use be\ and u\ there, but not r\

Notes on transaction record system:
  Other servers have a single negative (<0) UID on our system, so a
  user doing business with someone in another region would generate a transaction between an individual and a server,
  with qid for the individual in that other region stored in the data field. 
  Servers and communities have negative uids. Servers have their qid in the name field followed by a dot, eg "NEW.".

  Specifically: when we on the AAA regional server receive a transaction request using a qid, the first four characters are the "region" --
  they tell us what database to hit. For example, if AAA.AAAB pays ZZZ.AAAC, we record a payment from AAA.AAAB's uid (1)
  to ZZZ's uid. The data field in the transaction gets $data['foreign_uid'] = ZZZ.AAAC's uid on the ZZZ server (2).
  We send the request to ZZZ's server and expect a confirmation 
  (if no confirmation, roll back the transaction and give an error message OR queue the request).

  On the other side of things, when we receive a request from some other community for a transaction with one of our accounts
  -- for example if we are the "ZZZ" community, receiving a request from the "ABC" community, for ABC.AAAAA to pay ZZZ.BBBBB --
  we record the payer as ABC's uid and the payee as ZZZ.BBBBB's uid, with $data['payer_id'] = 'ABC.AAAAA'.

  Thus every inter-community transaction is stored in both communities. Both communities know their trade balance, which should be
  public through a RESTful query. Intra-community transactions should also be stored twice -- ideally in member's devices. Smartphones and
  desktop computers running an app should store all their own transactions. Encrypted backups of everything to the cloud too.

Other thoughts:
  Joining by dumb cellphone is for play only. Accounts and transactions created that way should get deleted after a week of inactivity.
  Suppose I live in 413 (NEW), but my cell is 987 (NYC). Person B lives in 222 with cell 333. When I am traveling to AAA I pay person B with SMS, by calling the local rCredits number. The local server contacts NYC to process my side of the transactions, but gets redirected to NEW. Similarly for person B's side. So at most 5 servers are involved (three just redirecting). NEW.rcredits.org and other subdomains act similarly.

To clear cache:   http://localhost/devcore/devel/cache/clear?destination=node
  (or http://new.rcredits.org/devel/cache/clear?destination=node)

To uninstall the rCredits modules manually (export first, since this DESTROYS ALL rCredits DATA except users):
  DELETE FROM system WHERE filename LIKE 'sites/all/modules/rcredits/%' OR name='rcredits';
  DELETE FROM block WHERE theme='rcredits';
  DELETE FROM menu_links WHERE menu_name='main-menu' OR (menu_name='user-menu' AND mlid>20) OR link_title='rCredits';
  DELETE FROM menu_router WHERE access_callback LIKE 'rCredits%' or page_callback LIKE 'rCredits%' OR path LIKE '%rcredits';
  DELETE FROM registry WHERE module IN ('rcredits','rweb','rsmart','rsms');
  DELETE FROM registry_file WHERE filename LIKE 'sites/all/modules/rcredits/%';
  DELETE FROM variable WHERE name LIKE 'rcredits%';
  DROP TABLE IF EXISTS r_areas,r_asif,r_candidates,r_donations,r_industries,r_log,r_nonces,r_regions,r_relations,r_scores,r_smarts,r_sms,r_txs,r_usd;
  TRUNCATE cache;
  TRUNCATE cache_block;
  TRUNCATE cache_bootstrap;
  TRUNCATE cache_field;
  TRUNCATE cache_filter;
  TRUNCATE cache_form;
  TRUNCATE cache_menu;
  TRUNCATE cache_page;
  TRUNCATE cache_path;
  TRUNCATE cache_update;  
  TRUNCATE sessions;
