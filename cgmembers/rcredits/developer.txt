rCredits Software
Notes for developers

PRODUCTION SITE PROBLEMS:
- Dwolla fails (waiting for Dwolla?)

BEFORE MINI LAUNCH:
- 6 people and 3 orgs tested signup, plus one joint account; watch people sign up
- log everything
- tests (ideally before opening accounts): New Pass, Photo, Agreement, Contribute, Proxies
- tests: Usd (including proof of ID), Options, Invite, Cron (daily)
- written instructions for signup (dwolla, etc)
- print me a card (and test it)
- flow (figure credit accordingly, transfer between accounts as needed at day's end)
- inviter gets the Dwolla credit (is this possible?)
- membership gift happens upon account activation (rTrader status); goes through as an rC transaction (test)
- /I/ includes security code, like this: http(s?)://new.rc2.me/new.abc/Urlencoded10CharacterSecurityCode (test)
- ** download must include rebate and bonuses transactions as a separate row (for GFM)
- ** cron: make a "daily" queue for most stuff. include figuring variable_set('totals') (usd, r, demand, etc.)
- don't set aside bought rCredits (for 2 weeks)

To do: (* = before launch ** = earlier)

- make which() put whole quid in choices AND autoselect pick from just same region unless admin
- give ccty admin a way to reset a member's password (assign them a one-time pass, set a one-time bit)
- user/password should give error if user is logged in
- add a Contribute link in footer when logged in
- explain picture format
- in formAccount do away with Drupal basis
- back button
- use can() consistently, but have it do hasBit (for efficiency) when possible (bit < B_MAX)
- "debt ok" pref: make it work: can't go down to credit floor<0 unless chosen "can go below". Credit floor has link to pref.
- help for all pages
- allow at most one repeating gift at a time
- revisit t\addAttrib and t\snapshot (does Drupal make ids lowercase?)
- handle 10-day interval for deposits/withdrawals for non-checking accounts
- write a function to detect if we are too close to the end of a 5-minute chunk, to start an activity. Maybe measure the average time that an activity takes and give it twice that much (and see if we get too many interrupted activities).
- phase out tablefield and/or userfield
- 1/6 month credit after first month, etc. up to 6 mos.
- pref for notification frequency (hourly/daily/weekly/monthly digest, viewable online)
- * finish and test cron (one part at a time)
- * diagram to illustrate min, max, and automatic virtual payments (for employees and companies, each in middle)
- * make flow (draw) work
- nightly: recalc exchange rates / allow users to express amounts in any currency (rounding DOWN); transactions will need to record exchange rate (true currency will be tied to region, regardless of how the user chooses to have it displayed)
- don't go over employee maximums unless we have to (know it ahead of time, either limit it to max or don't. simple) (don't bother with this -- it will probably be better as it is)
- *receive deposit/withrawal callbacks to set "completed" in r_usd. alert staff if fails.
- **set completed in r_usd for other transactions
- *in daily: alert staff if deposit / withdrawal not complete after 3 days
- * log more stuff
- ** shrink photo in formI (should be 50%) done?
- * in profile, handle links to list of websites
- * signup button on rcredits.org goes directly to user/register
- * demo button on rcredits.org goes to login with options to log in as abeone, beatwo (self-employed), cornerpub, or townarts (which should have a "Contribute" form on its member/townarts page)
- automatic bank transfer tester
- how much can the community safely create? this depends on velocity of circulation and two kinds of demand: 
    (1) company/employee/contractor demand and (2) other (by people who have no rCredits income source)
    The first kind reflects the inherent strength of the system, the second should be seen as backup
    We can create the amount of the first kind divided by velocity, probably.
- add flow to relations (1=to, 2=from, 3=both, 0=none)
- * don't allow clicking on links in emails (send to new.rcredits_org.com/whatever, which looks like rcredits.org but scolds the user for clicking on an email link, then offers a link to the real site (don't accept that one either).
- travel checks (use once, limited amount)
- allow extra params in buynow form
- for companies, show HTML for online payment buttons
- * add share to summary page, for admins
- make personal contact info secure?
- Company profile picture will also appear in our office slideshow. Say so on company tab.
- (2013-02-13) i had a dream last night that peace prevailed among the human planets because a benign alien race provided a way to verify the identity of any speaker. This morning the following ideas came to me, about how to approach that ideal. Members should be able to choose their security method:
  . whenever the transaction is between accounts from different regions, in-person merchant must ask the customer for a "travel word". The system reports a new travel word (for next time) that the merchant then tells the customer.
  . the foreign in-person merchant can ask for a PIN (that doesn't change)
  . the customer must show a separate photo ID
  . the customer must pay with an ad-hoc smartphone QR, rather than a card (best). The QR is valid for only 2 minutes (and only once).
  . either in-person or online, the customer must verify the purchase by text message or email (within 2 minutes or so)
  . online, no extra security for requests from the usual machine/IP/cookie. Otherwise customer must first go to the rcredits website separately and log in (you can create an icon, to make this easy).
  . different options may apply for different charge amounts. Rate the "level" of each method and suggest appropriate levels/defaults for (rounded) price ranges (0-5, 6-25, 26-100, 101-500, 501-2500, 2501+)
  . "Protect yourself from identity theft: (give standard tips, plus:) As long as you are using rCredits on *this machine*, we will not need to ask you any security questions. Do not sign in to rCredits on a machine you don't trust. If you must, then as soon as you get home, check your transaction history and change your password and security questions. If you are shopping online at a non-local site, when it comes time to pay, make sure you are really on the rCredits site (show what to look for).
  . (when the member buys something online from a foreign site, from an unusual machine, ALWAYS require confirmation by email. Do not show settings except from home machine)
- relation.class
- Cut the registration process loose from user_register (mostly so the testing can run properly).
- Coding security policy: never show any personal identifying info (R_SECRET_FIELDS) in the HTML. EVER. For example, when verifying someone's identity, the staff member should ask for the last 4 of their ss#, type it in and press submit. The code does a compare and returns just yes or no. Even the member cannot ever see what they earlier typed in. We might want to have a similar but weaker restriction on phone numbers and addresses -- like maybe those are protected for personal accounts. When 1099 time comes, the reports go out electronically only (no preview, etc.) Even user 1 and other admins don't have access to PII. Also put in some safe-guards to prevent repetitive guessing.
- beef up security - immediate:
  . Show the agent's picture below Help/Menu (below accounts dropdown in fullscreen). 
- I figure we can continue without interruption or pain for a few days whenever Dwolla goes down. The current plan is to give everyone (everyone who has been a member for at least a month) one month of reserve credit -- that is, however much rCredits they earned in the past 30 days plus however much rCredits they typically buy (with US Dollars) in 30 days. No fees for that loan as long as it is paid back within 30 days or within 3 days after Dwolla comes back up, whichever is later.

  It would be good to have an alternate way to trade rCredits for USD before that happens.

  Let's hope that by the time we get a DoS attack on a regional rCredits server, we're big enough to hire competent people to fight it. As a corollary, we probably want to encourage regions to use large hosting companies rather than small local ones. Unfortunately.

  We will also want a way to cope with internet outages (local or national). (David this paragraph is mostly for you, after the next sentence.) The current plan is to develop a mobile app that saves a working copy of the entire system in a distributed network (of smart devices) with lots of redundancy. For example, we want each merchant's device(s) to recognize their repeat customers. Each new customer who pays with a smart device (rather than a card) (which we will encourage at some point, perhaps by giving people an extra $5 if they forgo the card, or an extra penny per transaction) brings data to the merchant:
  some encrypted gem that gets passed from member to member on each transaction, to prove their identity and/or balance and/or connection to the merchant's community
  miscellaneous (encrypted) transaction data to add to the merchant's records. (This might just be a second purpose for the same data.)
  In such times, even participants without a smart device could be given a paper receipt that is a single large QR code, to carry to their next transaction. Better, they could be given a (re-writable) mag-stripe card (or the equivalent) that the next merchant reads and re-writes.

TODO whenever

- security later: 
  . Make the agent's picture appear from behind the "r", get big, then shrink and settle into place, traveling in the shape of an "r", ideally leaving a jet trail.
  . How to prove the logged-out site is rcredits? Maybe always ask first "It looks like you came here from an rCredits member site. Make sure this is the real rCredits website! Does your url bar say https://new.rcredits.org? Does it show a security symbol? We will display this reminder only once in a while. Don't let the identity thieves get you. Be sure to check the url bar <i>every time</i>."
@todo: add videos, like this:
  <video width="320" height="240" controls autoplay>
    <source src="movie.mp4" type="video/mp4">
    <source src="movie.ogg" type="video/ogg">
    <source src="movie.webm" type="video/webm">
  Your browser does not support the video tag. (maybe embed a clickable vid in an iframe here?)
  </video>
@todo: rate each account health as ratio of total demand of repeat payees (2x/2.5mos) to total demand of recent payers (2.5mos) (potential for future) OR to monthly sales (current health); also rate of change of sales volume (maximize for everyone and not negative)

/**
 * Return a number or recordset representing the health of one or more accounts.
 * @param string $where: a uid or criteria for account selection
 * @return: a number representing the health of the specified account OR a recordset given the health of each account
 */
function health($where = 'TRUE') {

  if (is_numeric($where)) $where = "uid=$where";
  
  $payeeDemandSql = demandSql('payee', 2, 2.5, $where);
  $payerDemandSql = demandSql('payer', 0, 3, $where);
  $return eachAccount($queries, $ons, $where, $subs = array()) {

// * @param string $measure: current, future, count, or growth
  if ($measure == 'current' or $measure == 'growth') {
    $lastMonthSales = r\dbQ(salesSql(1, $where));
    $prevMonthSales = r\dbQ(salesSql(2, $where)) - $lastMonthSales;
  }
  if ($measure == 'growth') {
    return u\small($prevMonthSales) ? (u\small($lastMonthSales) ? 0 : 1) : ($lastMonthSales - $prevMonthSales) / $prevMonthSales;
  } elseif ($measure == 

compact('myid', 'months')

list ($me, $months) = array('payee', '2');
$last2MonthsSales =

/**
 * Return a query that will return payee,sales1,sales2,sales3
 * where the salesN fields are total sales for the payee for the preceding (non-calendar) month, month before that, etc.
 */
function salesSql() {
  $fields = 'payee';
  for ($i = 0; $i <= 3; $i++) {
    $nextMonth = @$monthi;
    $monthi = strtotime("$i months ago", REQUEST_TIME);
    if ($i > 0) $fields .= ",SUM(IF(completed>=$monthi AND completed<$nextMonth, amount, 0)) AS sales$i";
  }
  return "SELECT $fields FROM txs WHERE type=:TX_TRANSACT AND goods AND state=:TX_DONE AND completed>=$monthi AND payee=u.uid";
}

/**
 * Return a query that will return (total) demand for an account's payers or payees in the recent past.
 * @param string $other: payer or payee
 * @param int $minRepeats: consider demand from members who did business with the account at least this many times
 * @param int $months: how far back to look
 */
function demandSql($other, $minRepeats, $months) {
  $earliest = strtotime("$months ago", REQUEST_TIME);
  $me = $other == 'payer' ? 'payee' : 'payer';
  return <<<EOF
  SELECT SUM(demand) AS demand 
    FROM (SELECT $other, COUNT(*) AS count FROM txs 
    WHERE type=:TX_TRANSACT AND goods AND state=:TX_DONE AND completed>=$earliest AND $me=u.uid AND $other>0)
    WHERE count>=$minRepeats
EOF;
}

function eachAccount($queries, $ons, $where = 'TRUE', $subs = array()) {
  $fields = 'u.uid';
  $tables = 'users u';
  foreach ($queries as $q => $query) {
    $on = array_shift($ons);
    $fields .= ",$q.*";
    $tables .= ",($query) $q ON $q.$on=u.uid";
  }
  return r\dbQ("SELECT $fields FROM $tables WHERE $where", $subs);
}

@todo: move some util functions, like ray(), to rcredits-basic.inc and "USE" them everywhere without a namespace qualifier.
@todo: allow surrounding spaces on all web input, leading dollar signs in amounts. Test. (mostly done)
@todo: we also need some kind of confirmation on foreign transactions (from the other server)
@todo: store city code (rather than city), with a code for "other" -- store other in data or r_other (same for country/state) MAYBE
@todo: reporting for a community or server (a form that anyone can use)
@todo: download transactions in standard formats
@todo: Finish separating backend. Front end should have no registered users. This should maybe wait until after launch.
@todo: use popups for some things
@todo: make help divs draggable
@todo: option to suppress current balance in messages (make it a separate message) B_SHOWBAL (default TRUE)
@todo: Miscellaneous other data to collect:
  Names and Social Security Numbers of Dependents [why do we need this?]
  If this is a joint account, do you want separate balances? (if so, it will be treated as separate accounts except that available funds may be transferred automatically to any of the joined accounts that dips below its credit limit.)
@todo: closed accounts have only read perm and point (data[new_account]) at new account qid
@todo: servers exchange info on which ss#s (or other ids) are dups
@todo
- remove all direct db operations from interface modules (and their .inc files) -- use be\ and u\ there, but not r\

**************************************************

A. Development environment
 - See https://docs.google.com/document/d/1oQU-PPown2TV02Xg9htxByzOhUopGH-areUrlZ94Te0/edit
   for Step by Step Development Environment Setup Instructions
 - Use Notepad++ for viewing and editing .feature files (makes it a LOT more pleasant).
   View/User-Defined Dialogue/Import gherkin-format-notepad++.xml from the Gherkin folder
   If you use Notepad++ for PHP, Go to Settings/Style Configurator/Language, select php, add the following list to User Ext.:
      inc module test class install steps
   Also go to Settings/Preferences/Tab Settings and set the tab size to 2, replace with spaces
 
B. Coding style and strategies:
  - isDev (defined at the top of rcredits.inc) is TRUE only under Windows
  - Mostly follow generally-accepted coding practices (For example, all of the Eclipse's defaults.)
  - Exceptions: 
    . Indent two spaces instead of one tab.
    . A simple if then can go all on one line.
    . A simple else can immediately follow the closing brace of the if part. For example: } else zot();
    . Simple, single-line functions can go all on one line, without a documentation header.
  - Use camelCase for all internal variables and function names.
  - Use lowercase-and-hyphens for filenames and URLs.
  - Use lowercase_and_underscores for database fields, API paramaters, and other public/external identifiers.
  - Keep the code as short as possible without losing clarity.
  - In particular, avoid redundant code patterns by creating small, low-level functions.
  - Make the tools easy to use -- that is, allow variations in number and type of arguments if that is convenient for the caller.
  - Avoid high-level Drupal functions -- for example don't use Views, Fields, and complex modules. Eventually we expect to
    drop Drupal, so avoid unnecessary dependency and entanglement.

C. rCredits module structure
   There are at least three distinct interfaces to rCredits, all sharing business logic code in the main rcredits folder.
   Each interface (rWeb, rSmart, and rSMS) has its sub-module in its own folder, with its own features and tests.
   Code that is unlikely ever to apply to more than one interface, should not go in the main rcredits folder and vice versa.
   
D. rCredits namespaces and how they are abbreviated in calling files:
   (r) rCredits: shared business logic code
         (r/Web) rCredits/Web
         (r/Smart) rCredits/Smart
         (r/SMS) rCredits/SMS
   (t) rCredits/Testing
   (u) rCredits/Utilities: helper functions that are not clearly specific to rCredits
   (be) rCredits/Backend: business logic functions called directly by the interfaces
        The separation of r from be is incomplete and muddy. We might wanna just use "r" for these backend functions
 
E. Database clues
   - All rCredits tables begin with "r_", except the users table, which we have added many fields to.
   - users (accounts)
     . Common Good Communities (CGCs) and regional servers have uid < 0.
         -1 to -17576: regional servers (the numeric version plus one of the region's 3-letter qid, negated)
           the software can treat any or all servers as virtual independent servers, 
           for example when CT started using rCredits for real before they had their own server, the NEW server gave them all "NEC." qids rather than NEW.
         less than -500000: Common Good Communities (leaving room for all 4-character regions)
         1+0  to 3T: users in (not yet independent) region AAA (admin is technically in region AAA)
         1+3T to 6T: users in (not yet independent) region AAB etc.
     . Tests create users with uids starting at 1+xT + 17550 (ZZA, ZZB, etc.)
     . name is a lowercase, no-punctuation version of fullName, sometimes with a numeric suffix to disambiguate.
         Exceptions: 
           admin is admin
           Common Good Finance is cgf (second in the "NEW" region)
           For regions, name is (uppercase) the 3-char start of their qids, followed by "."
     . pass and mail should be called "password" and "email" but Drupal doesn't. So it's confusing. (just a heads-up)
     . we don't currently use theme, picture, timezone, signature, or signature format.
     . data: We use this to store non-essential information in a serialized associative array:
         company, companyPhone, employeeOk, and isOwner: these are stored upon registration, if the company does not exist yet (otherwise the info goes in the relations table)
         wants: bit collection of nonmember stores the member wants to buy from
         newAccount: qid of new account when this account is closed by moving funds elsewhere
         (survey data)
         oneTimePass: [pass, expires]
     . description is html for the company's page (N/A for personal accounts)
     . community: the (negative) uid of the account's CGC. For anyone who is not in an established CGC, their community is the region (using the regional server's uid). For region and community records, community == uid
     . minimum: the user's preferred minimum rCredits balance. Request at least $10r more automatically if balance goes under by even one cent.
     . maximum: the user's preferred maximum rCredits AVAILABLE balance. Exchange any excess beyond maximum+10-.01 automatically for USD
     . usdAccount is the usd account number, encrypted with R_WORD (which gets set in settings.php)
     . secure is an encrypted (with R_WORD) serialized assoc:
         type: Dwolla
         pin: the Dwolla PIN
         auth: the Dwolla OAUTH code
         cardCode: security code for QR code on rCard
   - r_txs
     . xid: record id
     . payerTid: Transactions are identified to the user counting just their own transactions (1, 2, 3, ...), NOT as an xid.
     . payeeTid: ditto
     . payer: the uid of the account being debited.
     . amount: the total transaction amount. While waiting for a USD amount to clear, the entire transaction amount is
         tentatively (TX_TENTATIVE) transferred in rCredits
     . r: the amount of rCredits transferred. While waiting for a USD amount to clear, 
         this field holds the expected amount of rCredits. This may change if the USD EFT does not clear.
     . data: We use this to store non-essential and unusual essential information in a serialized associative array:
       undoneBy: xid of the transaction that reversed this one (if it is reversed)
       undoes: the transaction id of the undone transaction that this transaction reversed
       bonus and rebate: the dollar amounts of any rewards associated with a payment
       preapproved: (not in the table, just internally) transaction is preapproved by another server (a payment or an authorized business unilaterally charging a customer)
   (more to come...)
   - offsite: protected personal identifying information from the NEW region
     . id: a random id that matches the type and length of the original data
     . data: the original data, encrypted, len=
         
F. Notes on some PHP functions and rCredits utilities - often-used or crucial
     compact/extract: typically we compact arguments to a function and the function extracts them
     ray: turns a delimited string into an array, increasing code readability, typability, and maintainability
     just: makes extract() simpler, self-documenting, and less prone to confusion
     tt: our version of Drupal's t() function, but with named messages and more convenient substitution
     EXPECT: a costly but easy-to-use constistency checker
     ret<X>: A collection of functions to return the argument when it passes a certain test.
     is<X>: A collection of functions to return TRUE when the argument passes a certain test, otherwise FALSE.
     r\acct(): interface to the acct object -- representing an account (including region), combined with the current agent for the account. Note that r\acct($uid) is very different from new r\acct($uid).
    
G. Special rCredits datatypes
  assoc: an associative array (not really special, but we call it "assoc" rather than "array" in the function headers)
   acct: an account (including the region), together with the agent currently representing that account

  zid: a signed id (non-zero) -- the meaning of a negative value varies, depending on usage (ie a qxid or quid)
 reid: a relation id
  uid: an account id
  xid: a transaction id

  qid: a mostly-alphabetic representation of a zid, eg "XXX.YYYY...", used externally for REST and SMS queries.
    XXX (3 letters) represents the region's uid, YYYY... (some number of letters) represents a record ID
    the separator can be a colon instead of period, giving YYYY... a different meaning
      There are also two accepted alternatives to a colon: .. OR =
    The region (XXX) can be omitted in SMS identifiers (eg "200 to .ABCDE for pie")
    For each region that exists, we have a user record with uid < 0, with name = the region name followed by a period (eg ABC.)
    (Communities within the region also have negative uids, descending from -REGION_MAX, and do not need qids,
    but could have a qid with a hyphen, like AAA-BBB, if needed.)
  
 qxid: a qid (8 characters or more) representing an xid (currently used only in rSmart)
 quid: a qid (7 characters or more) representing a uid acting as its own agent (. separator) OR an reid (: separator)

H. Notes on transaction record system:
  uids now contain the region info, so no need for recording "foreign" info in the data field
  Specifically: when we on the AAA regional server receive a transaction request using a qid, the first 3 characters are the "region" --
  they tell us what database to hit. For example, if AAA.AAAA pays ZZZ.AAAC, we record a payment from AAA.AAAA's uid (1)
  We send the request to ZZZ's server and expect a confirmation 
  (if no confirmation, roll back the transaction and give an error message OR queue the request).

  On the other side of things, when we receive a request from some other community for a transaction with one of our accounts
  -- for example if we are the "ZZZ" community, receiving a request from the "ABC" community, for ABC.AAAAA to pay ZZZ.BBBBB --
  we record the transaction as our own and send confirmation to the ZZZ server.

  Thus every inter-community transaction is stored in both communities. Both communities know their trade balance, which should be
  public through a RESTful query. Intra-community transactions should also be stored twice -- ideally in member's devices. Smartphones and
  desktop computers running an app should store all their own transactions. Encrypted backups of everything to the cloud too.

I. Cron ops
- Companies with the "pay everyone virtually" option don't have to pay anyone consciously. Their rCredits are offered proportionately to all employees and suppliers. Amounts are truncated to the penny. All payment offers are accepted automatically, up to the amount in the accepter's Dwolla account. Unaccepted amounts are redistributed to others (not recursively, if the company is unable to distribute its funds). Companies must list for each employee and supplier the average amount they pay them per month ($/mo) on the relations screen.

J. Other thoughts:
  - Joining by dumb cellphone is for play only. Accounts and transactions created that way should get deleted after a week of inactivity.
  - Suppose I live in 413 (NEW), but my cell is 987 (NYC). Person B lives in 222 with cell 333. When I am traveling to AAA I pay person B with SMS, by calling the local rCredits number. The local server contacts NYC to process my side of the transactions, but gets redirected to NEW. Similarly for person B's side. So at most 5 servers are involved (three just redirecting). NEW.rcredits.org and other subdomains act similarly.
  - in dwolla.php: replace "if ($" with "if (@$" and "if (!$" with "if (!@$"

To clear cache:   http://localhost/devcore/devel/cache/clear?destination=node
  (or https://new.rcredits.org/devel/cache/clear?destination=node)

To uninstall the rCredits modules manually (export first, since this DESTROYS ALL rCredits DATA except users):
  DELETE FROM system WHERE filename LIKE 'sites/all/modules/rcredits/%' OR name='rcredits';
  DELETE FROM block WHERE theme='rcredits';
  DELETE FROM menu_links WHERE menu_name='main-menu' OR (menu_name='user-menu' AND mlid>20) OR link_title='rCredits';
  DELETE FROM menu_router WHERE access_callback LIKE 'rCredits%' or page_callback LIKE 'rCredits%' OR path LIKE '%rcredits';
  DELETE FROM registry WHERE module IN ('rcredits','rweb','rsmart','rsms');
  DELETE FROM registry_file WHERE filename LIKE 'sites/all/modules/rcredits/%';
  DELETE FROM variable WHERE name LIKE 'rcredits%';
  DROP TABLE IF EXISTS r_areas,r_candidates,r_industries,r_log,r_nonces,r_regions,r_relations,r_scores,r_smarts,r_sms,r_txs;
  TRUNCATE cache;
  TRUNCATE cache_block;
  TRUNCATE cache_bootstrap;
  TRUNCATE cache_field;
  TRUNCATE cache_filter;
  TRUNCATE cache_form;
  TRUNCATE cache_menu;
  TRUNCATE cache_page;
  TRUNCATE cache_path;
  TRUNCATE cache_update;  
  TRUNCATE sessions;
