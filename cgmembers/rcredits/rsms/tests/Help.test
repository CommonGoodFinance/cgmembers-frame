<?php
//
// Feature: Get help
//   AS a caller
//   I WANT helpful information
//   SO I can use the rCredits SMS interface effectively

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsms.steps';

class rsmsHelp extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Help';
  const FEATURE_NAME = 'rsms Test - Help';
  const DESCRIPTION = 'Get help';
  const MODULE = 'rsms';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsms.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)

    }
  }

  // Scenario: A caller wants help with a specific command
  public function testACallerWantsHelpWithASpecificCommand_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    When_('phone %number1 says "help payment"');
    Then_('we say to phone %number1 "help payment"');
  }

  // Scenario: A caller wants to know what's available
  public function testACallerWantsToKnowWhatsAvailable_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    When_('phone %number1 says "help"');
    Then_('we say to phone %number1 "help helpme"');
  }

  // Scenario: A caller types an unrecognized command
  public function testACallerTypesAnUnrecognizedCommand_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    And__('the expected nonce for phone %number1 is ""');
    When_('phone %number1 says %whatever');
    Then_('we say to phone %number1 "syntax|help helpme"');
  }

  // Scenario: Caller gives the wrong nonce
  public function testCallerGivesTheWrongNonce_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    And__('the expected nonce for phone %number1 is "mango"');
    When_('phone %number1 says "anySingleWordOtherThanALegalCommand"');
    Then_('we say to phone %number1 "wrong nonce"');
  }

  // Scenario: A caller types the wrong number of arguments
  public function testACallerTypesTheWrongNumberOfArguments_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    When_('phone %number1 says "info r 100 with too many arguments"');
    Then_('we say to phone %number1 "syntax|help information"');
  }

  // Scenario: Caller types a wrong argument
  public function testCallerTypesAWrongArgument_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    When_('phone %number1 says "info zot"');
    Then_('we say to phone %number1 "syntax|help information"');
  }

  // Scenario: Amount is too big
  public function testAmountIsTooBig_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    And__('phone %number2 is a member');
    When_('phone %number1 says "pay 1%R_MAX_AMOUNT to %number2"');
    Then_('we say to phone %number1 "amount too big"');
  }

  // Scenario: Account does not exist
  public function testAccountDoesNotExist_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('phone %number1 is a member');
    And__('".ZZZ" is not an account id');
    When_('phone %number1 says "100 to .ZZZ"');
    Then_('we say to phone %number1 "unknown member" with subs: "ASSOC'
    . '\\| who  |'
    . '\\| .ZZZ |"');
  }

}