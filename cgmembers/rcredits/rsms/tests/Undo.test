<?php
//
// Feature: Undo
//   AS a member
//   I WANT to undo a transaction recently completed on my account
//   SO I can easily correct a mistake

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsms.steps';

class rsmsUndo extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Undo';
  const FEATURE_NAME = 'rsms Test - Undo';
  const DESCRIPTION = 'Undo';
  const MODULE = 'rsms';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsms.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | number | flags      |'
    . '\\| .ZZA | Abe One    | +20001 | ok,bona  |'
    . '\\| .ZZB | Bea Two    | +20002 | ok,bona  |'
    . '\\| .ZZC | Corner Pub | +20003 | co,ok,bona |"');
    And__('transactions: "ASSOC'
    . '\\| created   | type         | amount | from | to   | purpose      | taking |'
    . '\\| %today-6m | %TX_SIGNUP   | 250    | ctty | .ZZA | signup       | 0      |'
    . '\\| %today-6m | %TX_SIGNUP   | 250    | ctty | .ZZB | signup       | 0      |'
    . '\\| %today-6m | %TX_SIGNUP   | 250    | ctty | .ZZC | signup       | 0      |'
    . '\\| %today-4m | %TX_TRANSFER | 11.11  | .ZZB | .ZZA | cash for me  | 1      |'
    . '\\| %today-3w | %TX_TRANSFER | 22.22  | .ZZC | .ZZA | usd          | 1      |'
    . '\\| %today-3d | %TX_TRANSFER | 33.33  | .ZZA | .ZZB | whatever43   | 0      |'
    . '\\| %today-3d | %TX_REBATE   | 1.67   | ctty | .ZZA | rebate on #4 | 0      |'
    . '\\| %today-3d | %TX_BONUS    | 3.33   | ctty | .ZZB | bonus on #3  | 0      |'
    . '\\| %today-2d | %TX_TRANSFER | 44.44  | .ZZB | .ZZC | cash         | 0      |'
    . '\\| %today-1d | %TX_TRANSFER | 55.55  | .ZZA | .ZZC | whatever43   | 0      |'
    . '\\| %today-1d | %TX_REBATE   | 2.78   | ctty | .ZZA | rebate on #5 | 0      |'
    . '\\| %today-1d | %TX_BONUS    | 5.56   | ctty | .ZZC | bonus on #4  | 0      |"');
    Then_('the community has r$-763.34');
    And__('phone +20001 has r$198.90');
    And__('phone +20002 has r$231.11');
    And__('phone +20003 has r$333.33');
    break;


    }
  }

  // Scenario: Undo the last transaction
  public function testUndoTheLastTransaction_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('phone +20001 says "undo"');
    Then_('we say to phone +20001 "confirm undo|please confirm" with subs: "ASSOC'
    . '\\| created   | amount | tofrom  | otherName | purpose    |'
    . '\\| %today-1d | $55.55 | to      | Corner Pub | whatever54 |"');
  }

  // Scenario: Undo the last transaction with someone specific
  public function testUndoTheLastTransactionWithSomeoneSpecific_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('phone +20001 says "undo .ZZB"');
    Then_('we say to phone +20001 "confirm undo|please confirm" with subs: "ASSOC'
    . '\\| created   | amount | tofrom  | otherName | purpose    |'
    . '\\| %today-3d | $33.33 | to      | Bea Two    | whatever43 |"');
  }

  // Scenario: Undo the last transfer to me
  public function testUndoTheLastTransferToMe_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('phone +20001 says "undo from"');
    Then_('we say to phone +20001 "confirm undo|please confirm" with subs: "ASSOC'
    . '\\| created   | amount | tofrom  | otherName | purpose    |'
    . '\\| %today-3w | $22.22 | from    | Corner Pub | usd        |"');
  }

  // Scenario: Undo the last transfer to me from someone specific
  public function testUndoTheLastTransferToMeFromSomeoneSpecific_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('phone +20001 says "undo from .ZZB"');
    Then_('we say to phone +20001 "confirm undo|please confirm" with subs: "ASSOC'
    . '\\| created   | amount | tofrom | otherName | purpose     |'
    . '\\| %today-4m | $11.11 | from   | Bea Two    | cash for me |"');
  }

  // Scenario: The caller confirms undoing a charge
  public function testTheCallerConfirmsUndoingACharge_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('phone +20001 confirms "undo from .ZZB"');
    Then_('the community has r$-763.34');
    And__('phone +20002 has r$242.22');
    And__('we say to phone +20001 "report undo|report exchange" with subs: "ASSOC'
    . '\\| solution | did    | otherName | amount | balance | tid |'
    . '\\| reversed | gave   | Bea Two    | $11.11 | $187.79 | 6   |"');
  }

  // Scenario: The caller confirms undoing a payment
  public function testTheCallerConfirmsUndoingAPayment_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('phone +20001 confirms "undo to .ZZB"');
    And__('we say to phone +20001 "report undo|report invoice" with subs: "ASSOC'
    . '\\| solution | did     | otherName | amount | tid |'
    . '\\| reversed | charged | Bea Two    | $33.33 | 6   |"');
  }

  // Scenario: The caller refuses to pay the latest invoice
  public function testTheCallerRefusesToPayTheLatestInvoice_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invoices: "ASSOC'
    . '\\| created   | status      | amount | from | to   | purpose  |'
    . '\\| %today    | %TX_PENDING | 100    | .ZZA | .ZZB | cleaning |"');
    When_('phone +20001 confirms "undo"');
    Then_('we say to phone +20001 "report undo" with subs: "ASSOC'
    . '\\| solution          |'
    . '\\| marked \'\'denied\'\' |"');
    And__('we notice "invoice denied" to member "b@" with subs: "ASSOC'
    . '\\| created | fullName | otherName | amount | payeePurpose  |'
    . '\\| %today  | Bea Two  | Abe One    | $100   | cleaning       |"');
  }

  // Scenario: The caller refuses a pending payment
  public function testTheCallerRefusesAPendingPayment_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invoices: "ASSOC'
    . '\\| created   | status      | amount | from | to   | purpose |'
    . '\\| %today    | %TX_PENDING | 100    | .ZZC | .ZZA | wages   |"');
    When_('phone +20001 confirms "undo from .ZZC"');
    Then_('we say to phone +20001 "report undo" with subs: "ASSOC'
    . '\\| solution          |'
    . '\\| marked \'\'denied\'\' |"');
    And__('we notice "offer refused" to member "c@" with subs: "ASSOC'
    . '\\| created | fullName   | otherName | amount | payerPurpose |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | wages         |"');
  }

}