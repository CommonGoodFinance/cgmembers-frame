<?php
//
// Feature: Get help
//   AS a caller
//   I WANT helpful information
//   SO I can use the rCredits SMS interface effectively
//   

require_once __DIR__ . '/../gherkin/test-defs.php';
require_once __DIR__ . '/../rsms.steps';

class rsmsGetHelp extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %number1 becomes some random number)
  var $current_test;
  const FEATURE_NAME = 'rsms Test - GetHelp';
  const DESCRIPTION = 'Get help';
  const MODULE = 'rsms';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkin_guts($statement, $type), $statement, $this->current_test);
  }
  
  public static function getInfo() {
    return array('name' => self::FEATURE_NAME, 'description' => self::DESCRIPTION, 'group' => ucwords(self::MODULE));
  }

  public function setUp() { // especially, enable any modules required for the tests
    parent::setUp(self::MODULE);
    $setup_filename = __DIR__ . '/../' . self::MODULE . '-setup.inc';
    if (file_exists($setup_filename)) include $setup_filename;

  }

  // Scenario: A caller wants help with a specific command
  public function testACallerWantsHelpWithASpecificCommand() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    When_('phone %number1 says "help get"');
    Then_('we say to phone %number1 "help get"');
  }

  // Scenario: A caller wants to know what's available
  public function testACallerWantsToKnowWhatsAvailable() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    When_('phone %number1 says "help"');
    Then_('we say to phone %number1 "help helpme"');
  }

  // Scenario: A caller types an unrecognized command
  public function testACallerTypesAnUnrecognizedCommand() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    And__('the expected nonce for phone %number1 is ""');
    When_('phone %number1 says %whatever');
    Then_('we say to phone %number1 "syntax|help helpme"');
  }

  // Scenario: Caller gives wrong nonce
  public function testCallerGivesWrongNonce() {
    scene_setup($this, __FUNCTION__);
    Given('the expected nonce for phone %number1 is "mango"');
    When_('phone %number1 says "anything but a legal command"');
    Then_('we say to phone %number1 "wrong nonce"');
  }

  // Scenario: A caller types the wrong number of arguments
  public function testACallerTypesTheWrongNumberOfArguments() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    When_('phone %number1 says "get r 100 with too many arguments"');
    Then_('we say to phone %number1 "syntax|help get"');
  }

  // Scenario: A caller types a wrong argument
  public function testACallerTypesAWrongArgument() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    When_('phone %number1 says "get zot"');
    Then_('we say to phone %number1 "syntax|help get"');
  }

  // Scenario: Amount is too big
  public function testAmountIsTooBig() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    When_('phone %number1 says "get r 100000"');
    Then_('we say to phone %number1 "amount too big"');
  }

  // Scenario: Account does not exist
  public function testAccountDoesNotExist() {
    scene_setup($this, __FUNCTION__);
    Given('phone %number1 is a member');
    And__('"neabcdef" is not an account id');
    When_('phone %number1 says "100 to neabcdef"');
    Then_('we say to phone %number1 "not an account id|help to" with subs: "DATA'
    . '\\| @id      |'
    . '\\| neabcdef |"');
  }

}