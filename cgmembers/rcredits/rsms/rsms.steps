<?php
/**
 * @file
 * rSMS Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  global $sms_devel; $sms_devel = TRUE;
  $cgfUid = \variable_get('cgf_uid');

  db\q('DELETE FROM users WHERE uid>:cgfUid', compact('cgfUid'));
  db\q('DELETE FROM r_txs');
  db\q('DELETE FROM r_relations');

  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }
}

r\acct::_clear(); // empty the acct cache
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * phone (ARG) has no account
 *
 * in: OpenAnAccountForTheCaller ATotalNewbieCalls MAKE
 */
function phoneHasNoAccount($number) {
  global $testOnly;
  return !r\SMS\uid($number); // (don't delete anything to make there be no account -- no need and dangerous)
}

/**
 * phone (ARG) says (ARG)
 *
 * in: AbbreviationsWork ACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork ACallerAbbreviatesWithWrongSyntax MAKE
 *     ExchangeForCash TheCallerRequestsAnImplicitTradeWithInsufficientBalance MAKE
 *     GetHelp ACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp ACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp ACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp CallerGivesTheWrongNonce MAKE
 *     GetHelp ACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp CallerTypesAWrongArgument MAKE
 *     GetHelp AmountIsTooBig MAKE
 *     GetHelp AccountDoesNotExist MAKE
 *     GetInformation GettingInformation MAKE
 *     GetInformation GettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits MakeOrUpdateAnOffer MAKE
 *     OpenAnAccountForTheCaller ATotalNewbieCalls MAKE
 *     OpenAnAccountForTheCaller ANamelessNewbieCalls MAKE
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerName MAKE
 *     OpenAnAccountForTheCaller TheNewbieGivesUsAnUnlikelyName MAKE
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerEmailAddress MAKE
 *     OpenAnAccountForTheCaller TheNewbieGivesABadEmailAddress MAKE
 *     Transact TheCallerAsksToPayAMemberId MAKE
 *     Transact TheCallerAsksToPayAPlayerByName MAKE
 *     Transact TheCallerAsksToChargeAMemberId MAKE
 *     Transact TheCallerAsksToPayTheLatestInvoice MAKE
 *     Transact TheCallerAsksToPayTheLatestInvoiceFromAParticularMember MAKE
 *     Undo UndoTheLastTransaction MAKE
 *     Undo UndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo UndoTheLastTransferToMe MAKE
 *     Undo UndoTheLastTransferToMeFromSomeoneSpecific MAKE
 */
function phoneSays($number, $message) {
  global $testOnly; if ($testOnly) return FALSE;
  sms_incoming($number, $message, array('no logout' => TRUE));
  return TRUE;
}

/**
 * phone (ARG) has an account
 *
 * in: OpenAnAccountForTheCaller ATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller ANamelessNewbieCalls MAKE
 */
function phoneHasAnAccount($number) {
  global $testOnly;
  if (!phoneHasNoAccount($number)) return TRUE;
  if ($testOnly) return FALSE;
  return (bool) new r\acct(compact('number'));
}

/**
 * we say to phone (ARG) (ARG)
 *
 * in: AbbreviationsWork ACallerAbbreviatesCommandWords TEST
 *     AbbreviationsWork ACallerAbbreviatesWithWrongSyntax TEST
 *     GetHelp ACallerWantsHelpWithASpecificCommand TEST
 *     GetHelp ACallerWantsToKnowWhatsAvailable TEST
 *     GetHelp ACallerTypesAnUnrecognizedCommand TEST
 *     GetHelp CallerGivesTheWrongNonce TEST
 *     GetHelp ACallerTypesTheWrongNumberOfArguments TEST
 *     GetHelp CallerTypesAWrongArgument TEST
 *     GetHelp AmountIsTooBig TEST
 *     OpenAnAccountForTheCaller ATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller ANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller TheNewbieGivesUsAnUnlikelyName TEST
 *     OpenAnAccountForTheCaller TheNewbieGivesABadEmailAddress TEST
 */
function weSayToPhone($number, $message) {
  return weSayToPhoneWithSubs($number, $message, array());
}

/**
 * we say to phone (ARG) (ARG) with subs: (ARG)
 *
 * in: ExchangeForCash TheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash TheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash TheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     ExchangeForCash TheCallerRequestsAnImplicitTradeWithInsufficientBalance TEST
 *     GetHelp AccountDoesNotExist TEST
 *     GetInformation GettingInformation TEST
 *     GetInformation GettingInformationLargerAmounts TEST
 *     OfferToExchangeUSDollarsForRCredits MakeOrUpdateAnOffer TEST
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transact TheCallerAsksToPayAMemberId TEST
 *     Transact TheCallerAsksToPayAPlayerByName TEST
 *     Transact TheCallerAsksToChargeAMemberId TEST
 *     Transact TheCallerConfirmsAPayment TEST
 *     Transact TheCallerConfirmsARequestToCharge TEST
 *     Transact TheCallerConfirmsAUnilateralCharge TEST
 *     Transact TheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transact TheCallerAsksToPayTheLatestInvoice TEST
 *     Transact TheCallerConfirmsPaymentOfTheLatestInvoice TEST
 *     Transact TheCallerAsksToPayTheLatestInvoiceFromAParticularMember TEST
 *     Transact TheCallerAsksToPayACompanyAgent TEST
 *     Undo UndoTheLastTransaction TEST
 *     Undo UndoTheLastTransactionWithSomeoneSpecific TEST
 *     Undo UndoTheLastTransferToMe TEST
 *     Undo UndoTheLastTransferToMeFromSomeoneSpecific TEST
 *     Undo TheCallerConfirmsUndoingACharge TEST
 *     Undo TheCallerConfirmsUndoingAPayment MAKE
 *     Undo TheCallerRefusesToPayTheLatestInvoice TEST
 *     Undo TheCallerRefusesAPendingPayment TEST
 */
function weSayToPhoneWithSubs($number, $message, $subs) {
  global $testOnly;
///  debug(array(r\SMS\tt($message), r\SMS\tt($message, $subs[0]), $subs));
  return t\findMessage('out', compact('number'), RSMS_PREFIX . trim(r\SMS\tt($message, @$subs[0])));
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Transact TheCallerConfirmsARequestToCharge TEST
 *     Transact TheCallerConfirmsAUnilateralCharge TEST
 *     Undo TheCallerRefusesToPayTheLatestInvoice TEST
 *     Undo TheCallerRefusesAPendingPayment TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * phone (ARG) has no name
 *
 * in: OpenAnAccountForTheCaller ANamelessNewbieCalls MAKE
 */
function phoneHasNoName($number) {
  global $testOnly; if ($testOnly) return FALSE;
  return be\isTempName(r\userField('name', r\SMS\uid($number)));
}

/**
 * phone (ARG) is not waiting to (ARG)
 *
 * in: OpenAnAccountForTheCaller ANamelessNewbieCalls MAKE
 */
function phoneIsNotWaitingTo($number, $todo) {
  global $testOnly;
  if ($testOnly) return phoneIsWaitingTo($number, $todo);
  phoneIsWaitingTo($number, 'something else');
  return TRUE;
}

/**
 * phone (ARG) is waiting to (ARG)
 *
 * in: OpenAnAccountForTheCaller ANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerName BOTH
 *     OpenAnAccountForTheCaller TheNewbieGivesUsAnUnlikelyName BOTH
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerEmailAddress BOTH
 *     OpenAnAccountForTheCaller TheNewbieGivesABadEmailAddress BOTH
 */
function phoneIsWaitingTo($number, $todo, $recalled = FALSE) {
  global $testOnly;
  $actualTodo = be\todo($number);
  $is = (@$actualTodo->todo == $todo);
  if ($is or $testOnly or $recalled) return $is;
  if ($todo == 'setup name') {
    phoneSays($number, 'whatever'); // set up the account
  } elseif ($todo == 'setup email') {
    phoneSays($number, 'whatever'); // set up the account
    phoneSays($number, 'Firstname Lastname'); // grab the name
  } else return FALSE; // nothing else to handle
  return phoneIsWaitingTo($number, $todo, TRUE);
}

/**
 * phone (ARG) account name is (ARG)
 *
 * in: OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerName TEST
 */
function phoneAccountNameIs($number, $name) {
  global $testOnly;
  return (r\userField('fullName', r\SMS\uid($number)) == $name);
}

/**
 * phone (ARG) email is (ARG)
 *
 * in: OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerEmailAddress TEST
 */
function phoneEmailIs($number, $email) {
  global $testOnly;
  return (r\userField('mail', r\SMS\uid($number)) == t\fixEmail($email));
}

/**
 * phone (ARG) has r$(ARG)
 *
 * in: ExchangeForCash TheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash TheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash TheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash TheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     OpenAnAccountForTheCaller TheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transact TheCallerConfirmsAPayment TEST
 *     Transact TheCallerConfirmsARequestToCharge TEST
 *     Transact TheCallerConfirmsAUnilateralCharge TEST
 *     Transact TheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transact TheCallerConfirmsPaymentOfTheLatestInvoice TEST
 *     Undo Setup TEST
 *     Undo TheCallerConfirmsUndoingACharge TEST
 */
function phoneHasR($number, $amount) {
  global $testOnly;
///  debug(t\uidCredit(r\SMS\uid($number))->balance);
  if ($testOnly) return t\eq(t\uidCredit(r\SMS\uid($number))->balance, $amount);
  return FALSE;
}

/**
 * phone (ARG) has r$(ARG) including rewards of $(ARG)
 *
 * in: GetInformation GettingInformation MAKE
 *     GetInformation GettingInformationLargerAmounts MAKE
 */
function phoneHasRIncludingRewardsOf($number, $bal, $rewards) {
  global $testOnly; if ($testOnly) return FALSE;
  $uid = r\SMS\uid($number);
  $info = t\uidCredit($uid);
  list ($old_bal, $old_rewards) = array($info->balance, $info->rewards);

  list ($amount, $from, $to, $type) = array($rewards - $info->rewards, 'community', $uid, TX_SIGNUP);
  t\makeTransaction(compact(u\ray('amount from to type')));
  
  $id = $other = '.ZZM';
  if (!t\makeAccount(compact('id'))) return FALSE;
  list ($amount, $from, $to) = array($bal - ($info->balance + $rewards - $info->rewards), $other, $uid);
  t\makeTransaction(compact(u\ray('amount from to')));
  return TRUE;
}

/**
 * the community has r$(ARG)
 *
 * in: ExchangeForCash TheCallerConfirmsATradeOfRCreditsForCash TEST
 *     Transact TheCallerConfirmsAPayment TEST
 *     Transact TheCallerConfirmsAUnilateralCharge TEST
 *     Transact TheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transact TheCallerConfirmsPaymentOfTheLatestInvoice TEST
 *     Undo Setup TEST
 *     Undo TheCallerConfirmsUndoingACharge TEST
 */
function theCommunityHasR($amount) {
  global $testOnly;
///  debug(t\uidCredit(r\serverUid())->balance);
  return t\eq(t\uidCredit(r\serverUid())->balance, $amount);
}

/**
 * phone (ARG) is a member
 *
 * in: AbbreviationsWork ACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork ACallerAbbreviatesWithWrongSyntax MAKE
 *     GetHelp ACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp ACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp ACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp CallerGivesTheWrongNonce MAKE
 *     GetHelp ACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp CallerTypesAWrongArgument MAKE
 *     GetHelp AmountIsTooBig MAKE
 *     GetHelp AccountDoesNotExist MAKE
 *     OfferToExchangeUSDollarsForRCredits MakeOrUpdateAnOffer MAKE
 */
function phoneIsAMember($number) {
  global $testOnly; if ($testOnly) return FALSE;
  return phoneIsMember($number);
}

/**
 * phone (ARG) is member (ARG)
 *
 * in: GetInformation GettingInformation MAKE
 *     GetInformation GettingInformationLargerAmounts MAKE
 */
function phoneIsMember($number, $id = NULL) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\makeAccount(compact('number', 'id'));
}

/**
 * members: (ARG)
 *
 * in: ExchangeForCash Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 */
function members($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) {
    $one['number'] = $one['cell'];
    if (!t\makeAccount($one)) return FALSE;
  }
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: ExchangeForCash Setup MAKE
 *     Transact Setup MAKE
 *     Transact TheCallerAsksToPayTheLatestInvoice MAKE
 *     Transact TheCallerConfirmsPaymentOfTheLatestInvoice MAKE
 *     Transact TheCallerAsksToPayTheLatestInvoiceFromAParticularMember MAKE
 *     Undo Setup MAKE
 *     Undo TheCallerRefusesToPayTheLatestInvoice MAKE
 *     Undo TheCallerRefusesAPendingPayment MAKE
 */
function transactions($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeTransaction($one)) return FALSE;
  return TRUE;
}

/**
 * phone (ARG) confirms (ARG)
 *
 * in: ExchangeForCash TheCallerConfirmsATradeOfRCreditsForCash MAKE
 *     ExchangeForCash TheCallerConfirmsAnImplicitTradeOfRCreditsForCash MAKE
 *     ExchangeForCash TheCallerConfirmsARequestToTradeCashForRCredits MAKE
 *     ExchangeForCash TheCallerConfirmsAUnilateralTradeOfCashForRCredits MAKE
 *     Transact TheCallerConfirmsAPayment MAKE
 *     Transact TheCallerConfirmsARequestToCharge MAKE
 *     Transact TheCallerConfirmsAUnilateralCharge MAKE
 *     Transact TheCallerConfirmsAPaymentWithInsufficientBalance MAKE
 *     Transact TheCallerConfirmsPaymentOfTheLatestInvoice MAKE
 *     Transact TheCallerAsksToPayACompanyAgent MAKE
 *     Undo TheCallerConfirmsUndoingACharge MAKE
 *     Undo TheCallerConfirmsUndoingAPayment MAKE
 *     Undo TheCallerRefusesToPayTheLatestInvoice MAKE
 *     Undo TheCallerRefusesAPendingPayment MAKE
 */
function phoneConfirms($number, $request) {
  global $testOnly; if ($testOnly) return FALSE;
  phoneSays($number, $request);
///  debug(be\todo($number));
///  if (!$nonce = be\todo($number)->nonce) debug(print_r(compact('number','request','nonce'), 1));
  if (!$nonce = be\todo($number)->nonce) return FALSE; // (null kills phoneSays)
  phoneSays($number, $nonce);
  return TRUE;
}

/**
 * phone (ARG) can charge unilaterally
 *
 * in: ExchangeForCash TheCallerConfirmsAUnilateralTradeOfCashForRCredits MAKE
 *     Transact TheCallerConfirmsAUnilateralCharge MAKE
 */
function phoneCanChargeUnilaterally($number) {
  global $testOnly;
  if (!$acct = r\acct(r\SMS\uid($number))) return FALSE;
  return $acct->co(); // any company can
  //if ($testOnly) return $acct->can(B_CHARGE);
  //return $acct->setBit(B_CHARGE);
}

/**
 * the expected nonce for phone (ARG) is (ARG)
 *
 * in: GetHelp ACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp CallerGivesTheWrongNonce MAKE
 */
function theExpectedNonceForPhoneIs($number, $nonce) {
  global $testOnly;
  $old = be\todo($number);
  $same = ($old->nonce == $nonce);
  if ($testOnly or $same) return $same;
  
  if ($nonce and !$old->nonce) {
    phoneIsAMember($number2 = randomPhone(), 'Firstname2 theExpectedNonceForPhoneIs');
    phoneSays($number, "10 to $number2");
    $old = be\todo($number);
  }
  be\todo($number, $nonce ? $old->todo : '', $nonce);
  return TRUE;
}

/**
 * (ARG) is not an account id
 *
 * in: GetHelp AccountDoesNotExist MAKE
 */
function isNotAnAccountId($id) {
  global $testOnly; if ($testOnly) return FALSE;
  return !r\acct(t\uid($id)); // whether making or not (never delete an account)
}

/**
 * the total demand for rCredits is $(ARG)
 *
 * in: GetInformation GettingInformation MAKE
 *     GetInformation GettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits MakeOrUpdateAnOffer BOTH
 */
function theTotalDemandForRCreditsIs($amount) {
  global $testOnly;
  $old = r\totals()->demand;
  $same = t\eq($old, $amount);
  if ($testOnly or $same) return $same;
  
  if (!$uid = t\makeAccount()) return FALSE;
  $demand = $amount - $old;
  r\acct($uid)->update(compact('demand'));
  // NO - fails for disallowed high amounts. r\demand($uid, $demand);
  return TRUE;
}

/**
 * phone (ARG) demand for rCredits is $(ARG)
 *
 * in: OfferToExchangeUSDollarsForRCredits MakeOrUpdateAnOffer BOTH
 */
function phoneDemandForRCreditsIs($number, $demand) {
  global $testOnly;
  $uid = r\SMS\uid($number);
  if ($testOnly) return t\eq(r\userField('demand', $uid), $demand);
  r\demand($uid, $demand);
  return TRUE;  
}

/**
 * relations: (ARG)
 *
 * in: Transact Setup MAKE
 */
function relations($relations) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($relations as $one) if (!t\makeRelation($one)) return FALSE;
  return TRUE;
}
