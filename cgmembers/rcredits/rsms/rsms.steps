<?php
/**
 * @file
 * rSMS Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
require_once __DIR__ . '/../rcredits.inc';

/**
 * phone (ARG) has no account
 *
 * in: OpenAnAccountForTheCaller - testATotalNewbieCalls MAKE
 *     OpenAnAccountForTheOther - notestTheCallerAsksToPayANonidentifiableTotalNewbieByPhone MAKE
 */
function phoneHasNoAccount($number) {
  return (sms_user_get_uid($number) == '');
}

/**
 * phone (ARG) says (ARG)
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork - notestACallerAbbreviatesWithWrongSyntax MAKE
 *     ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits MAKE
 *     GetHelp - testACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp - notestACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp - notestACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - notestCallerGivesWrongNonce MAKE
 *     GetHelp - notestACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp - notestACallerTypesAWrongArgument MAKE
 *     GetHelp - notestAmountIsTooBig MAKE
 *     GetHelp - notestAccountDoesNotExist MAKE
 *     GetInformation - testGettingInformation MAKE
 *     GetInformation - notestGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer MAKE
 *     OpenAnAccountForTheCaller - testATotalNewbieCalls MAKE
 *     OpenAnAccountForTheCaller - notestANamelessNewbieCalls MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerName MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsAnUnlikelyName MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesABadEmailAddress MAKE
 *     OpenAnAccountForTheOther - testTheCallerAsksToPayAnIdentifiableTotalNewbieByName MAKE
 *     OpenAnAccountForTheOther - notestTheCallerAsksToPayANonidentifiableTotalNewbieByPhone MAKE
 *     OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested MAKE
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation MAKE
 *     Transaction - testTheCallerAsksToPayAMemberId MAKE
 *     Transaction - notestTheCallerAsksToPayAPlayerByName MAKE
 *     Transaction - notestTheCallerAsksToChargeAMemberId MAKE
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - notestUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - notestUndoTheLastTransferToMe MAKE
 *     Undo - notestUndoTheLastTransferFromMeToSomeoneSpecific MAKE
 */
function phoneSays($number, $message) {
  global $test_only;
  if ($test_only) error;
  sms_incoming($number, $message, array('no logout' => TRUE));
  return TRUE;
}

/**
 * phone (ARG) has an account
 *
 * in: OpenAnAccountForTheCaller - testATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller - notestANamelessNewbieCalls MAKE
 *     OpenAnAccountForTheOther - testTheCallerAsksToPayAnIdentifiableTotalNewbieByName TEST
 */
function phoneHasAnAccount($number) {
  global $test_only;
  if (sms_user_get_uid($number) != '') return TRUE;
  if ($test_only) return FALSE;
  return (r\create_user($number) != '');
}

/**
 * we say to phone (ARG) (ARG)
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords TEST
 *     AbbreviationsWork - notestACallerAbbreviatesWithWrongSyntax TEST
 *     GetHelp - testACallerWantsHelpWithASpecificCommand TEST
 *     GetHelp - notestACallerWantsToKnowWhatsAvailable TEST
 *     GetHelp - notestACallerTypesAnUnrecognizedCommand TEST
 *     GetHelp - notestCallerGivesWrongNonce TEST
 *     GetHelp - notestACallerTypesTheWrongNumberOfArguments TEST
 *     GetHelp - notestACallerTypesAWrongArgument TEST
 *     GetHelp - notestAmountIsTooBig TEST
 *     OpenAnAccountForTheCaller - testATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller - notestANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsAnUnlikelyName TEST
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesABadEmailAddress TEST
 */
function weSayToPhone($number, $message) {
  return weSayToPhoneWithSubs($number, $message, array());
}

/**
 * we say to phone (ARG) (ARG) with subs: (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance TEST
 *     ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits TEST
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars TEST
 *     GetHelp - notestAccountDoesNotExist TEST
 *     GetInformation - testGettingInformation TEST
 *     GetInformation - notestGettingInformationLargerAmounts TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     OpenAnAccountForTheOther - testTheCallerAsksToPayAnIdentifiableTotalNewbieByName TEST
 *     OpenAnAccountForTheOther - notestTheCallerAsksToPayANonidentifiableTotalNewbieByPhone TEST
 *     OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested TEST
 *     Transaction - testTheCallerAsksToPayAMemberId TEST
 *     Transaction - notestTheCallerAsksToPayAPlayerByName TEST
 *     Transaction - notestTheCallerAsksToChargeAMemberId TEST
 *     Transaction - notestTheCallerConfirmsAPayment TEST
 *     Transaction - notestTheCallerConfirmsACharge TEST
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - testUndoTheLastTransaction TEST
 *     Undo - notestUndoTheLastTransactionWithSomeoneSpecific TEST
 *     Undo - notestUndoTheLastTransferToMe TEST
 *     Undo - notestUndoTheLastTransferFromMeToSomeoneSpecific TEST
 *     Undo - notestTheCallerConfirmsUndoingACharge TEST
 */
function weSayToPhoneWithSubs($number, $message, $subs) {
  global $test_only;
  if (!$test_only) error;
  $info = r\r_log();
  $type = 'SMSout';
  $message = RSMS_PREFIX . r\SMS\tt($message, $subs);
  return in_array(compact('type', 'message', 'number'), $info);
}

/**
 * phone (ARG) is a player
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork - notestACallerAbbreviatesWithWrongSyntax MAKE
 *     GetHelp - testACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp - notestACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp - notestACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - notestACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp - notestACallerTypesAWrongArgument MAKE
 *     GetHelp - notestAmountIsTooBig MAKE
 *     GetHelp - notestAccountDoesNotExist MAKE
 *     GetInformation - testGettingInformation MAKE
 *     GetInformation - notestGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer MAKE
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation MAKE
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation MAKE
 */
function phoneIsAPlayer($arg1) {
  global $test_only;
  todo;
}

/**
 * players: (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash MAKE
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits MAKE
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash MAKE
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance MAKE
 *     OpenAnAccountForTheOther - testTheCallerAsksToPayAnIdentifiableTotalNewbieByName MAKE
 *     OpenAnAccountForTheOther - notestTheCallerAsksToPayANonidentifiableTotalNewbieByPhone MAKE
 *     OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested MAKE
 *     Transaction - testTheCallerAsksToPayAMemberId MAKE
 *     Transaction - notestTheCallerAsksToPayAPlayerByName MAKE
 *     Transaction - notestTheCallerAsksToChargeAMemberId MAKE
 *     Transaction - notestTheCallerConfirmsAPayment MAKE
 *     Transaction - notestTheCallerConfirmsACharge MAKE
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance MAKE
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - notestUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - notestUndoTheLastTransferToMe MAKE
 *     Undo - notestUndoTheLastTransferFromMeToSomeoneSpecific MAKE
 *     Undo - notestTheCallerConfirmsUndoingACharge MAKE
 */
function players($arg1) {
  global $test_only;
  todo;
}

/**
 * transactions: (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits TEST
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance TEST
 *     OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested MAKE
 *     Transaction - notestTheCallerConfirmsAPayment TEST
 *     Transaction - notestTheCallerConfirmsAPayment TEST
 *     Transaction - notestTheCallerConfirmsACharge TEST
 *     Transaction - notestTheCallerConfirmsACharge TEST
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - notestUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - notestUndoTheLastTransferToMe MAKE
 *     Undo - notestUndoTheLastTransferFromMeToSomeoneSpecific MAKE
 *     Undo - notestTheCallerConfirmsUndoingACharge TEST
 *     Undo - notestTheCallerConfirmsUndoingACharge TEST
 */
function transactions($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) confirms (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash MAKE
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits MAKE
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash MAKE
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance MAKE
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars MAKE
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation MAKE
 *     Transaction - notestTheCallerConfirmsAPayment MAKE
 *     Transaction - notestTheCallerConfirmsACharge MAKE
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance MAKE
 *     Undo - notestTheCallerConfirmsUndoingACharge MAKE
 */
function phoneConfirms($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * the community has r$(ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance TEST
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars TEST
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars TEST
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transaction - notestTheCallerConfirmsAPayment TEST
 *     Transaction - notestTheCallerConfirmsACharge TEST
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - notestTheCallerConfirmsUndoingACharge TEST
 */
function theCommunityHasR($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) has r$(ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsATradeOfCashForRCredits TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - notestTheCallerConfirmsAnImplicitTradeWithInsufficientBalance TEST
 *     ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits MAKE
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars MAKE
 *     GetInformation - testGettingInformation MAKE
 *     GetInformation - notestGettingInformationLargerAmounts MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transaction - notestTheCallerConfirmsAPayment TEST
 *     Transaction - notestTheCallerConfirmsACharge TEST
 *     Transaction - notestTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - notestTheCallerConfirmsUndoingACharge TEST
 */
function phoneHasR($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) is set up for direct deposits
 *
 * in: ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits MAKE
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars MAKE
 */
function phoneIsSetUpForDirectDeposits($arg1) {
  global $test_only;
  todo;
}

/**
 * the community has USD$(ARG)
 *
 * in: ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars TEST
 *     ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars TEST
 */
function theCommunityHasUSD($arg1) {
  global $test_only;
  todo;
}

/**
 * we email to admin (ARG) with subs: (ARG)
 *
 * in: ExchangeRCreditsForUSDollars - notestCallerConfirmsRequestForUSDollars TEST
 */
function weEmailToAdminWithSubs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * we did not just ask (ARG) for confirmation
 *
 * in: GetHelp - notestACallerTypesAnUnrecognizedCommand MAKE
 */
function weDidNotJustAskForConfirmation($arg1) {
  global $test_only;
  todo;
}

/**
 * we just asked (ARG) to confirm (ARG) with nonce (ARG)
 *
 * in: GetHelp - notestCallerGivesWrongNonce MAKE
 */
function weJustAskedToConfirmWithNonce($arg1, $arg2, $arg3) {
  global $test_only;
  todo;
}

/**
 * (ARG) is not an account id
 *
 * in: GetHelp - notestAccountDoesNotExist MAKE
 */
function isNotAnAccountId($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) unavailable is $(ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - notestGettingInformationLargerAmounts MAKE
 */
function phoneUnavailableIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * the total demand for rCredits is $(ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - notestGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 */
function theTotalDemandForRCreditsIs($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) demand for rCredits is $(ARG)
 *
 * in: OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 */
function phoneDemandForRCreditsIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) has no name
 *
 * in: OpenAnAccountForTheCaller - notestANamelessNewbieCalls MAKE
 */
function phoneHasNoName($arg1) {
  global $test_only;
  todo;
}

/**
 * we did not just ask phone (ARG) for a full name
 *
 * in: OpenAnAccountForTheCaller - notestANamelessNewbieCalls MAKE
 */
function weDidNotJustAskPhoneForAFullName($arg1) {
  global $test_only;
  todo;
}

/**
 * we just asked phone (ARG) for (ARG)
 *
 * in: OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerName MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsAnUnlikelyName MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress MAKE
 *     OpenAnAccountForTheCaller - notestTheNewbieGivesABadEmailAddress MAKE
 */
function weJustAskedPhoneFor($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) account name is (ARG)
 *
 * in: OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested TEST
 */
function phoneAccountNameIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) email is (ARG)
 *
 * in: OpenAnAccountForTheCaller - notestTheNewbieGivesUsHisOrHerEmailAddress TEST
 */
function phoneEmailIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * local phonelist: (ARG)
 *
 * in: OpenAnAccountForTheOther - testTheCallerAsksToPayAnIdentifiableTotalNewbieByName MAKE
 */
function localPhonelist($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) cannot be identified
 *
 * in: OpenAnAccountForTheOther - notestTheCallerAsksToPayANonidentifiableTotalNewbieByPhone MAKE
 */
function phoneCannotBeIdentified($arg1) {
  global $test_only;
  todo;
}

/**
 * we just asked phone (ARG) for a full name for phone (ARG)
 *
 * in: OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested MAKE
 */
function weJustAskedPhoneForAFullNameForPhone($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) requested (ARG)
 *
 * in: OpenAnAccountForTheOther - notestTheCallerSuppliesAFullNameForTheRecipientAsRequested MAKE
 */
function phoneRequested($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) (ARG) command use count is (ARG)
 *
 * in: TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 */
function phoneCommandUseCountIs($arg1, $arg2, $arg3) {
  global $test_only;
  todo;
}

/**
 * overall (ARG) command use count is (ARG)
 *
 * in: TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - notestACallerUsesACommandThatDOESRequireConfirmation TEST
 */
function overallCommandUseCountIs($arg1, $arg2) {
  global $test_only;
  todo;
}
