<?php
/**
 * @file
 * rSMS Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  global $sms_devel; $sms_devel = TRUE;
  t\clear(TX_SMS);
  
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }
}

r\acct::_clear(); // empty the acct cache
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * phone (ARG) has no account
 *
 * in: 
 */
function phoneHasNoAccount($number) {
  global $testOnly;
  return !r\SMS\uid($number); // (don't delete anything to make there be no account -- no need and dangerous)
}

/**
 * phone (ARG) says (ARG)
 *
 * in: MAKE Abbreviations ACallerAbbreviatesCommandWords
 *     MAKE Abbreviations ACallerAbbreviatesWithWrongSyntax
 *     MAKE Exchange TheCallerAsksToTradeCashForRCredits
 *     MAKE Exchange TheCallerRequestsAnImplicitTradeWithInsufficientBalance
 *     MAKE Help ACallerWantsHelpWithASpecificCommand
 *     MAKE Help ACallerWantsToKnowWhatsAvailable
 *     MAKE Help ACallerTypesAnUnrecognizedCommand
 *     MAKE Help CallerGivesTheWrongNonce
 *     MAKE Help ACallerTypesTheWrongNumberOfArguments
 *     MAKE Help CallerTypesAWrongArgument
 *     MAKE Help AmountIsTooBig
 *     MAKE Help AccountDoesNotExist
 *     MAKE Information GettingInformation
 *     MAKE Information GettingInformationLargerAmounts
 *     MAKE Transact TheCallerAsksToPayAMemberId
 *     MAKE Transact TheCallerAsksToPayAPlayerByName
 *     MAKE Transact TheCallerAsksToChargeAMemberId
 *     MAKE Transact TheCallerAsksToPayTheLatestInvoice
 *     MAKE Transact TheCallerAsksToPayTheLatestInvoiceFromAParticularMember
 *     MAKE Undo UndoTheLastTransaction
 *     MAKE Undo UndoTheLastTransactionWithSomeoneSpecific
 *     MAKE Undo UndoTheLastTransferToMe
 *     MAKE Undo UndoTheLastTransferToMeFromSomeoneSpecific
 */
function phoneSays($number, $message) {
  global $testOnly; if ($testOnly) return FALSE;
  sms_incoming($number, $message, array('no logout' => TRUE));
  return TRUE;
}

/**
 * phone (ARG) has an account
 *
 * in: 
 */
function phoneHasAnAccount($number) {
  global $testOnly;
  if (!phoneHasNoAccount($number)) return TRUE;
  if ($testOnly) return FALSE;
  return (bool) new r\acct(compact('number'));
}

/**
 * we say to phone (ARG) (ARG)
 *
 * in: TEST Abbreviations ACallerAbbreviatesCommandWords
 *     TEST Abbreviations ACallerAbbreviatesWithWrongSyntax
 *     TEST Exchange TheCallerAsksToTradeCashForRCredits
 *     TEST Help ACallerWantsHelpWithASpecificCommand
 *     TEST Help ACallerWantsToKnowWhatsAvailable
 *     TEST Help ACallerTypesAnUnrecognizedCommand
 *     TEST Help CallerGivesTheWrongNonce
 *     TEST Help ACallerTypesTheWrongNumberOfArguments
 *     TEST Help CallerTypesAWrongArgument
 *     TEST Help AmountIsTooBig
 */
function weSayToPhone($number, $message) {
  return weSayToPhoneWithSubs($number, $message, array());
}

/**
 * we say to phone (ARG) (ARG) with subs: (ARG)
 *
 * in: TEST Exchange TheCallerConfirmsATradeOfRCreditsForCash
 *     TEST Exchange TheCallerRequestsAnImplicitTradeWithInsufficientBalance
 *     TEST Help AccountDoesNotExist
 *     TEST Information GettingInformation
 *     TEST Information GettingInformationLargerAmounts
 *     TEST Transact TheCallerAsksToPayAMemberId
 *     TEST Transact TheCallerAsksToPayAPlayerByName
 *     TEST Transact TheCallerAsksToChargeAMemberId
 *     TEST Transact TheCallerConfirmsAPayment
 *     TEST Transact TheCallerConfirmsARequestToCharge
 *     TEST Transact TheCallerConfirmsAUnilateralCharge
 *     TEST Transact TheCallerConfirmsAPaymentWithInsufficientBalance
 *     TEST Transact TheCallerAsksToPayTheLatestInvoice
 *     TEST Transact TheCallerConfirmsPaymentOfTheLatestInvoice
 *     TEST Transact TheCallerAsksToPayTheLatestInvoiceFromAParticularMember
 *     TEST Transact TheCallerAsksToPayACompanyAgent
 *     TEST Undo UndoTheLastTransaction
 *     TEST Undo UndoTheLastTransactionWithSomeoneSpecific
 *     TEST Undo UndoTheLastTransferToMe
 *     TEST Undo UndoTheLastTransferToMeFromSomeoneSpecific
 *     TEST Undo TheCallerConfirmsUndoingACharge
 *     MAKE Undo TheCallerConfirmsUndoingAPayment
 *     TEST Undo TheCallerRefusesToPayTheLatestInvoice
 *     TEST Undo TheCallerRefusesAPendingPayment
 */
function weSayToPhoneWithSubs($number, $message, $subs) {
  global $testOnly;
///  debug(array(r\SMS\tt($message), r\SMS\tt($message, $subs[0]), $subs));
  return t\findMessage('out', compact('number'), RSMS_PREFIX . trim(u\tt($message, @$subs[0])));
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: 
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * phone (ARG) has no name
 *
 * in: 
 */
function phoneHasNoName($number) {
  global $testOnly; if ($testOnly) return FALSE;
  return be\isTempName(t\phoneField('name', $number));
}

/**
 * phone (ARG) is not waiting to (ARG)
 *
 * in: 
 */
function phoneIsNotWaitingTo($number, $todo) {
  global $testOnly;
  if ($testOnly) return phoneIsWaitingTo($number, $todo);
  phoneIsWaitingTo($number, 'something else');
  return TRUE;
}

/**
 * phone (ARG) is waiting to (ARG)
 *
 * in: 
 */
function phoneIsWaitingTo($number, $todo, $recalled = FALSE) {
  global $testOnly;
  $actualTodo = be\todo($number);
  $is = (@$actualTodo->todo == $todo);
  if ($is or $testOnly or $recalled) return $is;
  if ($todo == 'setup name') {
    phoneSays($number, 'whatever'); // set up the account
  } elseif ($todo == 'setup email') {
    phoneSays($number, 'whatever'); // set up the account
    phoneSays($number, 'Firstname Lastname'); // grab the name
  } else return FALSE; // nothing else to handle
  return phoneIsWaitingTo($number, $todo, TRUE);
}

/**
 * phone (ARG) account name is (ARG)
 *
 * in: 
 */
function phoneAccountNameIs($number, $name) {
  global $testOnly;
  return (t\phoneField('fullName', $number) == $name);
}

/**
 * phone (ARG) email is (ARG)
 *
 * in: 
 */
function phoneEmailIs($number, $email) {
  global $testOnly;
  return (t\phoneField('mail', $number) == t\fixEmail($email));
}


/**
 * phone (ARG) has r$(ARG)
 *
 * in: TEST Exchange TheCallerConfirmsAnImplicitTradeOfRCreditsForCash
 *     TEST Exchange TheCallerAsksToTradeCashForRCredits
 *     TEST Transact TheCallerConfirmsAPayment
 *     TEST Transact TheCallerConfirmsARequestToCharge
 *     TEST Transact TheCallerConfirmsAUnilateralCharge
 *     TEST Transact TheCallerConfirmsAPaymentWithInsufficientBalance
 *     TEST Transact TheCallerConfirmsPaymentOfTheLatestInvoice
 *     TEST Undo Setup
 *     TEST Undo TheCallerConfirmsUndoingACharge
 */
function phoneHasR($number, $amount) {
  global $testOnly;
///  debug(t\uidCredit(r\SMS\uid($number))->balance);
  if ($testOnly) return t\eq(t\uidCredit(r\SMS\uid($number))->balance, $amount);
  return FALSE;
}

/**
 * phone (ARG) has r$(ARG) including rewards of $(ARG)
 *
 * in: MAKE Information GettingInformation
 *     MAKE Information GettingInformationLargerAmounts
 */
function phoneHasRIncludingRewardsOf($number, $bal, $rewards) {
  global $testOnly; if ($testOnly) return FALSE;
  $uid = r\SMS\uid($number);
  $info = t\uidCredit($uid);
  list ($old_bal, $old_rewards) = array($info->balance, $info->rewards);

  $a = r\acct($uid);
  list ($r, $rewards) = array(str_replace(',', '', $bal) + 0, str_replace(',', '', $rewards) + 0);
  $a->update(compact('r', 'rewards'));
  return TRUE;
}

/**
 * the community has r$(ARG)
 *
 * in: TEST Transact TheCallerConfirmsAPayment
 *     TEST Transact TheCallerConfirmsAUnilateralCharge
 *     TEST Transact TheCallerConfirmsAPaymentWithInsufficientBalance
 *     TEST Transact TheCallerConfirmsPaymentOfTheLatestInvoice
 *     TEST Undo Setup
 *     TEST Undo TheCallerConfirmsUndoingACharge
 */
function theCommunityHasR($amount) {
  global $testOnly;
///  debug(t\uidCredit(r\serverUid())->balance);
  return t\eq(t\uidCredit(r\serverUid())->balance, $amount);
}

/**
 * phone (ARG) is a member
 *
 * in: MAKE Abbreviations ACallerAbbreviatesCommandWords
 *     MAKE Abbreviations ACallerAbbreviatesWithWrongSyntax
 *     MAKE Help ACallerWantsHelpWithASpecificCommand
 *     MAKE Help ACallerWantsToKnowWhatsAvailable
 *     MAKE Help ACallerTypesAnUnrecognizedCommand
 *     MAKE Help CallerGivesTheWrongNonce
 *     MAKE Help ACallerTypesTheWrongNumberOfArguments
 *     MAKE Help CallerTypesAWrongArgument
 *     MAKE Help AmountIsTooBig
 *     MAKE Help AccountDoesNotExist
 */
function phoneIsAMember($number) {
  global $testOnly; if ($testOnly) return FALSE;
  return phoneIsMember($number);
}

/**
 * phone (ARG) is member (ARG)
 *
 * in: 
 */
function phoneIsMember($number, $id = NULL) {
  global $testOnly; if ($testOnly) return FALSE;
  $flags = 'ok';
  return t\doAccount(compact(u\ray('number id flags')));
}

/**
 * members: (ARG)
 *
 * in: MAKE Exchange Setup
 *     MAKE Information Setup
 *     MAKE Transact Setup
 *     MAKE Undo Setup
 */
function members($list) {return t\members($list);}

/**
 * transactions: (ARG)
 *
 * in: MAKE Exchange Setup
 *     MAKE Transact Setup
 *     MAKE Undo Setup
 *     MAKE Undo TheCallerRefusesToPayTheLatestInvoice
 *     MAKE Undo TheCallerRefusesAPendingPayment
 */
function transactions($list) {return t\transactions($list);}

/**
 * phone (ARG) confirms (ARG)
 *
 * in: MAKE Exchange TheCallerConfirmsATradeOfRCreditsForCash
 *     MAKE Exchange TheCallerConfirmsAnImplicitTradeOfRCreditsForCash
 *     MAKE Transact TheCallerConfirmsAPayment
 *     MAKE Transact TheCallerConfirmsARequestToCharge
 *     MAKE Transact TheCallerConfirmsAUnilateralCharge
 *     MAKE Transact TheCallerConfirmsAPaymentWithInsufficientBalance
 *     MAKE Transact TheCallerConfirmsPaymentOfTheLatestInvoice
 *     MAKE Transact TheCallerAsksToPayACompanyAgent
 *     MAKE Undo TheCallerConfirmsUndoingACharge
 *     MAKE Undo TheCallerConfirmsUndoingAPayment
 *     MAKE Undo TheCallerRefusesToPayTheLatestInvoice
 *     MAKE Undo TheCallerRefusesAPendingPayment
 */
function phoneConfirms($number, $request) {
  global $testOnly; if ($testOnly) return FALSE;
  phoneSays($number, $request);
///  debug(be\todo($number));
///  if (!$nonce = be\todo($number)->nonce) debug(print_r(compact('number','request','nonce'), 1));
  if (!$nonce = be\todo($number)->nonce) return FALSE; // (null kills phoneSays)
  phoneSays($number, $nonce);
  return TRUE;
}

/**
 * phone (ARG) can charge unilaterally
 *
 * in: MAKE Transact TheCallerConfirmsAUnilateralCharge
 */
function phoneCanChargeUnilaterally($number) {
  global $testOnly;
  if (!$acct = r\acct(r\SMS\uid($number))) return FALSE;
  return $acct->co; // any company can
  //if ($testOnly) return $acct->can(B_CHARGE);
  //return $acct->setBit(B_CHARGE);
}

/**
 * the expected nonce for phone (ARG) is (ARG)
 *
 * in: MAKE Help ACallerTypesAnUnrecognizedCommand
 *     MAKE Help CallerGivesTheWrongNonce
 */
function theExpectedNonceForPhoneIs($number, $nonce) {
  global $testOnly;
  $old = be\todo($number);
  $same = ($old->nonce == $nonce);
  if ($testOnly or $same) return $same;
  
  if ($nonce and !$old->nonce) {
    phoneIsAMember($number2 = randomPhone(), 'Firstname2 theExpectedNonceForPhoneIs');
    phoneSays($number, "10 to $number2");
    $old = be\todo($number);
  }
  be\todo($number, $nonce ? $old->todo : '', $nonce);
  return TRUE;
}

/**
 * (ARG) is not an account id
 *
 * in: MAKE Help AccountDoesNotExist
 */
function isNotAnAccountId($id) {
  global $testOnly; if ($testOnly) return FALSE;
  return !r\acct(t\uid($id)); // whether making or not (never delete an account)
}

/**
 * the total demand for rCredits is $(ARG)
 *
 * in: MAKE Information GettingInformation
 *     MAKE Information GettingInformationLargerAmounts
 */
function theTotalDemandForRCreditsIs($amount) {
  global $testOnly;
  
  $amount = str_replace(',', '', $amount);
  $old = r\totals('ALL', TRUE)->demand;
  $same = t\eq($old, $amount);
  if ($testOnly or $same) return $same;
  
  if (!$uid = t\doAccount(u\ray('id flags', '.ZZZ', 'ok'))) return FALSE;
  $a = r\acct($uid);
  $usd = $amount - $old - $a->usd;
  $a->update(compact('usd'));
  r\totals('ALL', TRUE);
  // NO - fails for disallowed high amounts. r\demand($uid, $demand);
  return TRUE;
}

/**
 * phone (ARG) demand for rCredits is $(ARG)
 *
 * in: 
 */
function phoneDemandForRCreditsIs($number, $demand) {
  global $testOnly;
  $uid = r\SMS\uid($number);
  if ($testOnly) return t\eq(r\acct($uid)->usd, $demand);
  r\demand($uid, $demand);
  return TRUE;  
}

/**
 * relations: (ARG)
 *
 * in: MAKE Transact Setup
 */
function relations($relations) {return t\relations($relations);}

/**
 * balances: (ARG)
 *
 * in: TEST Exchange Setup
 *     TEST Exchange TheCallerConfirmsATradeOfRCreditsForCash
 */
function balances($list) {return t\balances($list);}


/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Transact TheCallerConfirmsARequestToCharge
 *     TEST Transact TheCallerConfirmsAUnilateralCharge
 *     TEST Undo TheCallerRefusesToPayTheLatestInvoice
 *     TEST Undo TheCallerRefusesAPendingPayment
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * invoices: (ARG)
 *
 * in: MAKE Transact TheCallerAsksToPayTheLatestInvoice
 *     MAKE Transact TheCallerConfirmsPaymentOfTheLatestInvoice
 *     MAKE Transact TheCallerAsksToPayTheLatestInvoiceFromAParticularMember
 */
function invoices($arg1) {
  global $testOnly;
  todo;
}
