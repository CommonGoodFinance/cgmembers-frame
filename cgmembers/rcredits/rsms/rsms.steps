<?php
/**
 * @file
 * rSMS Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use \rCredits\SMS as rSMS;
use \rCredits\API as api;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * phone (ARG) has no account
 *
 * in: OpenAnAccountForTheCaller - testATotalNewbieCalls MAKE
 */
function phoneHasNoAccount($number) {
  return !r\user_field(1, rSMS\uid($number));
}

/**
 * phone (ARG) says (ARG)
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork - testACallerAbbreviatesWithWrongSyntax MAKE
 *     ExchangeForCash - testTheCallerRequestsAnImplicitTradeWithInsufficientBalance MAKE
 *     ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits MAKE
 *     GetHelp - testACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp - testACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp - testACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - testCallerGivesWrongNonce MAKE
 *     GetHelp - testACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp - testACallerTypesAWrongArgument MAKE
 *     GetHelp - testAmountIsTooBig MAKE
 *     GetHelp - testAccountDoesNotExist MAKE
 *     GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer MAKE
 *     OpenAnAccountForTheCaller - testATotalNewbieCalls MAKE
 *     OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress MAKE
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation MAKE
 *     Transaction - testTheCallerAsksToPayAMemberId MAKE
 *     Transaction - testTheCallerAsksToPayAPlayerByName MAKE
 *     Transaction - testTheCallerAsksToChargeAMemberId MAKE
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - testUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - testUndoTheLastTransferToMe MAKE
 *     Undo - testUndoTheLastTransferFromMeToSomeoneSpecific MAKE
 */
function phoneSays($number, $message) {
  global $test_only;
  if ($test_only) error;
  sms_incoming($number, $message, array('no logout' => TRUE));
  return TRUE;
}

/**
 * phone (ARG) has an account
 *
 * in: OpenAnAccountForTheCaller - testATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 */
function phoneHasAnAccount($number) {
  global $test_only;
  if (!phoneHasNoAccount($number)) return TRUE;
  if ($test_only) return FALSE;
  return (api\create_user(compact('number')) != '');
}

/**
 * we say to phone (ARG) (ARG)
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords TEST
 *     AbbreviationsWork - testACallerAbbreviatesWithWrongSyntax TEST
 *     GetHelp - testACallerWantsHelpWithASpecificCommand TEST
 *     GetHelp - testACallerWantsToKnowWhatsAvailable TEST
 *     GetHelp - testACallerTypesAnUnrecognizedCommand TEST
 *     GetHelp - testCallerGivesWrongNonce TEST
 *     GetHelp - testACallerTypesTheWrongNumberOfArguments TEST
 *     GetHelp - testACallerTypesAWrongArgument TEST
 *     GetHelp - testAmountIsTooBig TEST
 *     OpenAnAccountForTheCaller - testATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress TEST
 */
function weSayToPhone($number, $message) {
  return weSayToPhoneWithSubs($number, $message, array());
}

/**
 * we say to phone (ARG) (ARG) with subs: (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     ExchangeForCash - testTheCallerRequestsAnImplicitTradeWithInsufficientBalance TEST
 *     ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits TEST
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars TEST
 *     GetHelp - testAccountDoesNotExist TEST
 *     GetInformation - testGettingInformation TEST
 *     GetInformation - testGettingInformationLargerAmounts TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transaction - testTheCallerAsksToPayAMemberId TEST
 *     Transaction - testTheCallerAsksToPayAPlayerByName TEST
 *     Transaction - testTheCallerAsksToChargeAMemberId TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsACharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - testUndoTheLastTransaction TEST
 *     Undo - testUndoTheLastTransactionWithSomeoneSpecific TEST
 *     Undo - testUndoTheLastTransferToMe TEST
 *     Undo - testUndoTheLastTransferFromMeToSomeoneSpecific TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 */
function weSayToPhoneWithSubs($number, $message, $subs) {
  global $test_only;
  u\expect($test_only, 'should be test_only');

  $type = 'out';
  $message = RSMS_PREFIX . r\SMS\tt($message, @$subs[0]);
  if (!TEST_REAL) $message = str_replace('ransaction #', 'ransaction #a', str_replace('@asif', R_ASIF_TEXT, $message));
  debug($message);
  $info = json_encode(compact(u\ray('message number')));
  return r\db_lookup(1, 'r_log', 'type=:type AND channel=:TX_SMS AND info=:info', compact(u\ray('type info')));
}

/**
 * phone (ARG) has no name
 *
 * in: OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 */
function phoneHasNoName($number) {
  global $test_only;
  return u\abbreviates('unknown ', r\user_field('name', rSMS\uid($number)));
}

/**
 * phone (ARG) is not waiting to (ARG)
 *
 * in: OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 */
function phoneIsNotWaitingTo($number, $todo) {
  global $test_only;
  if ($test_only) return phoneIsWaitingTo($number, $todo);
  phoneIsWaitingTo($number, 'something else');
  return TRUE;
}

/**
 * phone (ARG) is waiting to (ARG)
 *
 * in: OpenAnAccountForTheCaller - testANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress TEST
 */
function phoneIsWaitingTo($number, $todo, $recalled = FALSE) {
  global $test_only;
  if (($is = (r\db_lookup('todo', 'r_sms', 'number=:number', compact('number')) == $todo)) or $test_only or $recalled) return $is;
  if ($todo == 'setup name') {
    phoneSays($number, 'whatever'); // set up the account
  } elseif ($todo == 'setup email') {
    phoneSays($number, 'whatever'); // set up the account
    phoneSays($number, 'Firstname Lastname'); // grab the name
  } else return FALSE; // nothing else to handle
  return phoneIsWaitingTo($number, $todo, TRUE);
}

/**
 * phone (ARG) account name is (ARG)
 *
 * in: OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName TEST
 */
function phoneAccountNameIs($number, $name) {
  global $test_only;
  return (r\user_field('full_name', rSMS\uid($number)) == $name);
}

/**
 * phone (ARG) email is (ARG)
 *
 * in: OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 */
function phoneEmailIs($number, $email) {
  global $test_only;
  return (r\user_field('mail', rSMS\uid($number)) == $email);
}

/**
 * phone (ARG) has r$(ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits MAKE
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars MAKE
 *     GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsACharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 */
function phoneHasR($number, $amount) {
  global $test_only;
  return t\uidHasR(rSMS\uid($number), $amount);
}

/**
 * the community has r$(ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars TEST
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsACharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 */
function theCommunityHasR($amount) {
  global $test_only;
  return t\uidHasR(r\server_uid(), $amount);
}

/**
 * phone (ARG) is a member
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork - testACallerAbbreviatesWithWrongSyntax MAKE
 *     GetHelp - testACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp - testACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp - testACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - testACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp - testACallerTypesAWrongArgument MAKE
 *     GetHelp - testAmountIsTooBig MAKE
 *     GetHelp - testAccountDoesNotExist MAKE
 */
function phoneIsAMember($number) {
  global $test_only;
  phoneSays($number, 'whatever'); // set up the account
  phoneSays($number, 'Firstname Lastname'); // grab the name
  phoneSays($number, 'flast@example.com'); // grab the email
  return TRUE;
}

/**
 * members: (ARG)
 *
 * in: ExchangeForCash - featureSetup MAKE
 */
function members($list) {
  global $test_only;
  foreach ($list as $one) t\makeAccount($one);
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: ExchangeForCash - featureSetup MAKE
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsACharge TEST
 *     Transaction - testTheCallerConfirmsACharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - testUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - testUndoTheLastTransferToMe MAKE
 *     Undo - testUndoTheLastTransferFromMeToSomeoneSpecific MAKE
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 */
function transactions($list) {
  global $test_only;
  foreach ($list as $one) t\makeTransaction($one);
  return TRUE;
}

/**
 * phone (ARG) confirms (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash MAKE
 *     ExchangeForCash - testTheCallerConfirmsAnImplicitTradeOfRCreditsForCash MAKE
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits MAKE
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits MAKE
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars MAKE
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation MAKE
 *     Transaction - testTheCallerConfirmsAPayment MAKE
 *     Transaction - testTheCallerConfirmsACharge MAKE
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance MAKE
 *     Undo - testTheCallerConfirmsUndoingACharge MAKE
 */
function phoneConfirms($number, $request) {
  global $test_only;
  phoneSays($number, $request);
  if (!($nonce = api\todo($number)->nonce)) return FALSE; // (null kills phoneSays)
  phoneSays($number, $nonce);
  return TRUE;
}

/**
 * phone (ARG) can charge unilaterally
 *
 * in: ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits MAKE
 */
function phoneCanChargeUnilaterally($number) {
  global $test_only;
  $uid = r\SMS\uid($number);
  if ($test_only) return api\access('charge others', $uid);

  r\set_bit(BIT_CHARGE, $uid);
  return TRUE;
}

/**
 * phone (ARG) is set up for direct deposits
 *
 * in: ExchangeRCreditsForUSDollars - testTheCallerCanGetUSDollarsForRCredits MAKE
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars MAKE
 */
function phoneIsSetUpForDirectDeposits($arg1) {
  global $test_only;
  todo;
}

/**
 * the community has USD$(ARG)
 *
 * in: ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars TEST
 *     ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars TEST
 */
function theCommunityHasUSD($arg1) {
  global $test_only;
  todo;
}

/**
 * we email to admin (ARG) with subs: (ARG)
 *
 * in: ExchangeRCreditsForUSDollars - testCallerConfirmsRequestForUSDollars TEST
 */
function weEmailToAdminWithSubs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * the expected nonce for phone (ARG) is (ARG)
 *
 * in: GetHelp - testACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - testCallerGivesWrongNonce MAKE
 */
function theExpectedNonceForPhoneIs($number, $nonce) {
  global $test_only;
  api\todo($number, $nonce ? 'whatever' : '', $nonce);
  return TRUE;
}

/**
 * (ARG) is not an account id
 *
 * in: GetHelp - testAccountDoesNotExist MAKE
 */
function isNotAnAccountId($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) is a player
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer MAKE
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation MAKE
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation MAKE
 */
function phoneIsAPlayer($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) unavailable is $(ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 */
function phoneUnavailableIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * the total demand for rCredits is $(ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 */
function theTotalDemandForRCreditsIs($arg1) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) demand for rCredits is $(ARG)
 *
 * in: OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 */
function phoneDemandForRCreditsIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * phone (ARG) (ARG) command use count is (ARG)
 *
 * in: TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 */
function phoneCommandUseCountIs($arg1, $arg2, $arg3) {
  global $test_only;
  todo;
}

/**
 * overall (ARG) command use count is (ARG)
 *
 * in: TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDoesNotRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 *     TrackCommands - testACallerUsesACommandThatDOESRequireConfirmation TEST
 */
function overallCommandUseCountIs($arg1, $arg2) {
  global $test_only;
  todo;
}

/**
 * players: (ARG)
 *
 * in: Transaction - testTheCallerAsksToPayAMemberId MAKE
 *     Transaction - testTheCallerAsksToPayAPlayerByName MAKE
 *     Transaction - testTheCallerAsksToChargeAMemberId MAKE
 *     Transaction - testTheCallerConfirmsAPayment MAKE
 *     Transaction - testTheCallerConfirmsACharge MAKE
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance MAKE
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - testUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - testUndoTheLastTransferToMe MAKE
 *     Undo - testUndoTheLastTransferFromMeToSomeoneSpecific MAKE
 *     Undo - testTheCallerConfirmsUndoingACharge MAKE
 */
function players($arg1) {
  global $test_only;
  todo;
}
