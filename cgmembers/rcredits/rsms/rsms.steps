<?php
/**
 * @file
 * rSMS Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use \rCredits\SMS as rSMS;
use \rCredits\API as api;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * phone (ARG) has no account
 *
 * in: OpenAnAccountForTheCaller - testATotalNewbieCalls MAKE
 */
function phoneHasNoAccount($number) {
  return !r\user_field(1, rSMS\uid($number));
}

/**
 * phone (ARG) says (ARG)
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork - testACallerAbbreviatesWithWrongSyntax MAKE
 *     ExchangeForCash - testTheCallerRequestsAnImplicitTradeWithInsufficientBalance MAKE
 *     GetHelp - testACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp - testACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp - testACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - testCallerGivesTheWrongNonce MAKE
 *     GetHelp - testACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp - testCallerTypesAWrongArgument MAKE
 *     GetHelp - testAmountIsTooBig MAKE
 *     GetHelp - testAccountDoesNotExist MAKE
 *     GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer MAKE
 *     OpenAnAccountForTheCaller - testATotalNewbieCalls MAKE
 *     OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress MAKE
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress MAKE
 *     Transaction - testTheCallerAsksToPayAMemberId MAKE
 *     Transaction - testTheCallerAsksToPayAPlayerByName MAKE
 *     Transaction - testTheCallerAsksToChargeAMemberId MAKE
 *     Transaction - testTheCallerAsksToPayTheLatestInvoice MAKE
 *     Transaction - testTheCallerAsksToPayTheLatestInvoiceFromAParticularMember MAKE
 *     Undo - testUndoTheLastTransaction MAKE
 *     Undo - testUndoTheLastTransactionWithSomeoneSpecific MAKE
 *     Undo - testUndoTheLastTransferToMe MAKE
 *     Undo - testUndoTheLastTransferToMeFromSomeoneSpecific MAKE
 */
function phoneSays($number, $message) {
  global $testOnly;
  u\expect(!$testOnly);
  sms_incoming($number, $message, array('no logout' => TRUE));
  return TRUE;
}

/**
 * phone (ARG) has an account
 *
 * in: OpenAnAccountForTheCaller - testATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 */
function phoneHasAnAccount($number) {
  global $testOnly;
  if (!phoneHasNoAccount($number)) return TRUE;
  if ($testOnly) return FALSE;
  return (api\create_user(compact('number')) != '');
}

/**
 * we say to phone (ARG) (ARG)
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords TEST
 *     AbbreviationsWork - testACallerAbbreviatesWithWrongSyntax TEST
 *     GetHelp - testACallerWantsHelpWithASpecificCommand TEST
 *     GetHelp - testACallerWantsToKnowWhatsAvailable TEST
 *     GetHelp - testACallerTypesAnUnrecognizedCommand TEST
 *     GetHelp - testCallerGivesTheWrongNonce TEST
 *     GetHelp - testACallerTypesTheWrongNumberOfArguments TEST
 *     GetHelp - testCallerTypesAWrongArgument TEST
 *     GetHelp - testAmountIsTooBig TEST
 *     OpenAnAccountForTheCaller - testATotalNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress TEST
 */
function weSayToPhone($number, $message) {
  return weSayToPhoneWithSubs($number, $message, array());
}

/**
 * we say to phone (ARG) (ARG) with subs: (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     ExchangeForCash - testTheCallerRequestsAnImplicitTradeWithInsufficientBalance TEST
 *     GetHelp - testAccountDoesNotExist TEST
 *     GetInformation - testGettingInformation TEST
 *     GetInformation - testGettingInformationLargerAmounts TEST
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transaction - testTheCallerAsksToPayAMemberId TEST
 *     Transaction - testTheCallerAsksToPayAPlayerByName TEST
 *     Transaction - testTheCallerAsksToChargeAMemberId TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsARequestToCharge TEST
 *     Transaction - testTheCallerConfirmsAUnilateralCharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transaction - testTheCallerAsksToPayTheLatestInvoice TEST
 *     Transaction - testTheCallerConfirmsPaymentOfTheLatestInvoice TEST
 *     Transaction - testTheCallerAsksToPayTheLatestInvoiceFromAParticularMember TEST
 *     Undo - testUndoTheLastTransaction TEST
 *     Undo - testUndoTheLastTransactionWithSomeoneSpecific TEST
 *     Undo - testUndoTheLastTransferToMe TEST
 *     Undo - testUndoTheLastTransferToMeFromSomeoneSpecific TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 *     Undo - testTheCallerConfirmsUndoingAPayment MAKE
 *     Undo - testTheCallerRefusesToPayTheLatestInvoice TEST
 *     Undo - testTheCallerRefusesAPendingPayment TEST
 */
function weSayToPhoneWithSubs($number, $message, $subs) {
  global $testOnly;
//  debug(array(r\SMS\tt($message), r\SMS\tt($message, $subs[0]), $subs));
  return t\findMessage( 'out', compact('number'), RSMS_PREFIX . trim(r\SMS\tt($message, @$subs[0])));
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Transaction - testTheCallerConfirmsARequestToCharge TEST
 *     Transaction - testTheCallerConfirmsAUnilateralCharge TEST
 *     Undo - testTheCallerRefusesToPayTheLatestInvoice TEST
 *     Undo - testTheCallerRefusesAPendingPayment TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs0) {
  global $testOnly;
  $subs = array();
  foreach ($subs0[0] as $k => $value) $subs['{' . strtoupper($k) . '}'] = $value;
  $message = strtr(r\email_body($key), $subs);
  $subject = strtr($GLOBALS['email_subjects'][$key], $subs);
  return t\findMessage('email', compact(u\ray('key email')), $message, $subject);
}

/**
 * phone (ARG) has no name
 *
 * in: OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 */
function phoneHasNoName($number) {
  global $testOnly;
  return u\abbreviates('unknown ', r\user_field('name', rSMS\uid($number)));
}

/**
 * phone (ARG) is not waiting to (ARG)
 *
 * in: OpenAnAccountForTheCaller - testANamelessNewbieCalls MAKE
 */
function phoneIsNotWaitingTo($number, $todo) {
  global $testOnly;
  if ($testOnly) return phoneIsWaitingTo($number, $todo);
  phoneIsWaitingTo($number, 'something else');
  return TRUE;
}

/**
 * phone (ARG) is waiting to (ARG)
 *
 * in: OpenAnAccountForTheCaller - testANamelessNewbieCalls TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName BOTH
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsAnUnlikelyName BOTH
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress BOTH
 *     OpenAnAccountForTheCaller - testTheNewbieGivesABadEmailAddress BOTH
 */
function phoneIsWaitingTo($number, $todo, $recalled = FALSE) {
  global $testOnly;
  if (($is = (r\db_lookup('todo', 'r_sms', 'number=:number', compact('number')) == $todo)) or $testOnly or $recalled) return $is;
  if ($todo == 'setup name') {
    phoneSays($number, 'whatever'); // set up the account
  } elseif ($todo == 'setup email') {
    phoneSays($number, 'whatever'); // set up the account
    phoneSays($number, 'Firstname Lastname'); // grab the name
  } else return FALSE; // nothing else to handle
  return phoneIsWaitingTo($number, $todo, TRUE);
}

/**
 * phone (ARG) account name is (ARG)
 *
 * in: OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerName TEST
 */
function phoneAccountNameIs($number, $name) {
  global $testOnly;
  return (r\user_field('full_name', rSMS\uid($number)) == $name);
}

/**
 * phone (ARG) email is (ARG)
 *
 * in: OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 */
function phoneEmailIs($number, $email) {
  global $testOnly;
  return (r\user_field('mail', rSMS\uid($number)) == $email);
}

/**
 * phone (ARG) has r$(ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsAnImplicitTradeOfRCreditsForCash TEST
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits TEST
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits TEST
 *     OpenAnAccountForTheCaller - testTheNewbieGivesUsHisOrHerEmailAddress TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsARequestToCharge TEST
 *     Transaction - testTheCallerConfirmsAUnilateralCharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transaction - testTheCallerConfirmsPaymentOfTheLatestInvoice TEST
 *     Undo - featureSetup TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 */
function phoneHasR($number, $amount) {
  global $testOnly;
//  debug(t\uidHasR(rSMS\uid($number))->balance);
  if ($testOnly) return t\eq(t\uidHasR(rSMS\uid($number))->balance, $amount);
  return FALSE;
}

/**
 * phone (ARG) has r$(ARG) including rewards of $(ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 */
function phoneHasRIncludingRewardsOf($number, $bal, $rewards) {
  global $testOnly;
  $uid = rSMS\uid($number);
  $info = t\uidHasR($uid);
  list ($old_bal, $old_rewards) = array($info->balance, $info->rewards);

  list ($amount, $from, $to, $type) = array($rewards - $info->rewards, 'community', $uid, TX_SIGNUP);
  t\makeTransaction(compact(u\ray('amount from to type')));
  
  $id = $other = '.ZZM';
  t\makeAccount(compact('id'));
  list ($amount, $from, $to) = array($bal - ($info->balance + $rewards - $info->rewards), $other, $uid);
  t\makeTransaction(compact(u\ray('amount from to')));
  return TRUE;
}

/**
 * the community has r$(ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash TEST
 *     Transaction - testTheCallerConfirmsAPayment TEST
 *     Transaction - testTheCallerConfirmsAUnilateralCharge TEST
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance TEST
 *     Transaction - testTheCallerConfirmsPaymentOfTheLatestInvoice TEST
 *     Undo - featureSetup TEST
 *     Undo - testTheCallerConfirmsUndoingACharge TEST
 */
function theCommunityHasR($amount) {
  global $testOnly;
//  debug(t\uidHasR(r\server_uid())->balance);
  return t\eq(t\uidHasR(r\server_uid())->balance, $amount);
}

/**
 * phone (ARG) is a member
 *
 * in: AbbreviationsWork - testACallerAbbreviatesCommandWords MAKE
 *     AbbreviationsWork - testACallerAbbreviatesWithWrongSyntax MAKE
 *     GetHelp - testACallerWantsHelpWithASpecificCommand MAKE
 *     GetHelp - testACallerWantsToKnowWhatsAvailable MAKE
 *     GetHelp - testACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - testCallerGivesTheWrongNonce MAKE
 *     GetHelp - testACallerTypesTheWrongNumberOfArguments MAKE
 *     GetHelp - testCallerTypesAWrongArgument MAKE
 *     GetHelp - testAmountIsTooBig MAKE
 *     GetHelp - testAccountDoesNotExist MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer MAKE
 */
function phoneIsAMember($number) {
  global $testOnly;
  return phoneIsMember($number);
}

/**
 * phone (ARG) is member (ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 */
function phoneIsMember($number, $id = NULL) {
  global $testOnly;
  t\makeAccount(compact('number', 'id'));
  return TRUE;
}

/**
 * members: (ARG)
 *
 * in: ExchangeForCash - featureSetup MAKE
 *     Transaction - featureSetup MAKE
 *     Undo - featureSetup MAKE
 */
function members($list) {
  global $testOnly;
  foreach ($list as $one) t\makeAccount($one);
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: ExchangeForCash - featureSetup MAKE
 *     Transaction - featureSetup MAKE
 *     Transaction - testTheCallerAsksToPayTheLatestInvoice MAKE
 *     Transaction - testTheCallerConfirmsPaymentOfTheLatestInvoice MAKE
 *     Transaction - testTheCallerAsksToPayTheLatestInvoiceFromAParticularMember MAKE
 *     Undo - featureSetup MAKE
 *     Undo - testTheCallerRefusesToPayTheLatestInvoice MAKE
 *     Undo - testTheCallerRefusesAPendingPayment MAKE
 */
function transactions($list) {
  global $testOnly;
  foreach ($list as $one) t\makeTransaction($one);
  return TRUE;
}

/**
 * phone (ARG) confirms (ARG)
 *
 * in: ExchangeForCash - testTheCallerConfirmsATradeOfRCreditsForCash MAKE
 *     ExchangeForCash - testTheCallerConfirmsAnImplicitTradeOfRCreditsForCash MAKE
 *     ExchangeForCash - testTheCallerConfirmsARequestToTradeCashForRCredits MAKE
 *     ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits MAKE
 *     Transaction - testTheCallerConfirmsAPayment MAKE
 *     Transaction - testTheCallerConfirmsARequestToCharge MAKE
 *     Transaction - testTheCallerConfirmsAUnilateralCharge MAKE
 *     Transaction - testTheCallerConfirmsAPaymentWithInsufficientBalance MAKE
 *     Transaction - testTheCallerConfirmsPaymentOfTheLatestInvoice MAKE
 *     Undo - testTheCallerConfirmsUndoingACharge MAKE
 *     Undo - testTheCallerConfirmsUndoingAPayment MAKE
 *     Undo - testTheCallerRefusesToPayTheLatestInvoice MAKE
 *     Undo - testTheCallerRefusesAPendingPayment MAKE
 */
function phoneConfirms($number, $request) {
  global $testOnly;
  phoneSays($number, $request);
  if (!($nonce = api\todo($number)->nonce)) return FALSE; // (null kills phoneSays)
  phoneSays($number, $nonce);
  return TRUE;
}

/**
 * phone (ARG) can charge unilaterally
 *
 * in: ExchangeForCash - testTheCallerConfirmsAUnilateralTradeOfCashForRCredits MAKE
 *     Transaction - testTheCallerConfirmsAUnilateralCharge MAKE
 */
function phoneCanChargeUnilaterally($number) {
  global $testOnly;
  $uid = r\SMS\uid($number);
  if ($testOnly) return api\access('charge others', $uid);

  r\set_bit(BIT_CHARGE, $uid);
  return TRUE;
}

/**
 * the expected nonce for phone (ARG) is (ARG)
 *
 * in: GetHelp - testACallerTypesAnUnrecognizedCommand MAKE
 *     GetHelp - testCallerGivesTheWrongNonce MAKE
 */
function theExpectedNonceForPhoneIs($number, $nonce) {
  global $testOnly;
  $old = api\todo($number);
  $same = ($old->nonce == $nonce);
  if ($testOnly or $same) return $same;
  
  if ($nonce and !$old->nonce) {
    phoneIsAMember($number2 = randomPhone(), 'Firstname2 theExpectedNonceForPhoneIs');
    phoneSays($number, "10 to $number2");
    $old = api\todo($number);
  }
  api\todo($number, $nonce ? $old->todo : '', $nonce);
  return TRUE;
}

/**
 * (ARG) is not an account id
 *
 * in: GetHelp - testAccountDoesNotExist MAKE
 */
function isNotAnAccountId($id) {
  global $testOnly;
  return !r\user_field(1, t\uid($id)); // whether making or not (never delete an account)
}

/**
 * the total demand for rCredits is $(ARG)
 *
 * in: GetInformation - testGettingInformation MAKE
 *     GetInformation - testGettingInformationLargerAmounts MAKE
 *     OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer BOTH
 */
function theTotalDemandForRCreditsIs($amount) {
  global $testOnly;
  $old = r\total_demand();
  $same = t\eq($old, $amount);
  if ($testOnly or $same) return $same;
  
  $uid = t\makeAccount();
  $demand = $amount - $old;
//  debug(compact('demand', 'old', 'amount'));
  \drupal_write_record('users', compact('demand', 'uid'), 'uid');
  return TRUE;
}

/**
 * phone (ARG) demand for rCredits is $(ARG)
 *
 * in: OfferToExchangeUSDollarsForRCredits - testMakeOrUpdateAnOffer BOTH
 */
function phoneDemandForRCreditsIs($number, $demand) {
  global $testOnly;
  $uid = r\SMS\uid($number);
  if ($testOnly) return t\eq(r\user_field('demand', $uid), $demand);
  \drupal_write_record('users', compact('uid', 'demand'), 'uid');
//  debug(r\user_field('demand', $uid));
//  debug(compact('number','demand','uid'));
  return TRUE;  
}
