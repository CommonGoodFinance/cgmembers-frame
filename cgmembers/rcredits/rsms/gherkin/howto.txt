Gherkin compiler for Drupal

At the heart of Behavior-Driven Development (BDD) is a rethinking of the approach to unit testing and acceptance testing. The Gherkin language is a formal English-language description of business specifications, that can be compiled automatically into acceptance tests. Business stakeholders and developers work together to formulate these statements of what the software should do. Features are described using the standard Agile framework of a User story for each feature: 

Feature: [Short name of feature]
  As a [role] 
  I want [feature] 
  So [benefit]
# [additional description]

Acceptance criteria are written in terms of one or more scenarios for each feature:

Scenario: [Short name of scenario]
  Given [initial context]
  And [additional context line(s)]
  When [event occurs]
  And [addition event(s) occur]
  Then [expected outcome]
  And [additional expected outcome(s)]
# [additional description]

All the "additional" lines can be multiple or omitted.

This "gherkin" directory is to be placed in the directory containing your module.
Create and place your Gherkin-language feature files in a directory called "features" in the module directory.
If your module is "zot", your module directory (zot) should contain the following files and directorys:
  zot.module
  zot.info
  features directory
  gherkin directory
  test directory (created and populated automatically by the Gherkin compiler)
  other files and directories for your module 
  (any subdirectories for subsidiary modules will need their own gherkin, features, and test directories)

Once you have created a feature, name the file after the feature using compressed titlecase 
-- for example, "PageTiltsWhenIPressEnter.feature" -- and save it in the features folder.

To run the compiler, browse to .../zot/gherkin/compiler.php

This will (if all goes well), create a test directory and, for each feature, a test in
the test directory -- called, for example, "PageTiltsWhenIPressEnter.test".
You shouldn't ever need to alter these test files.

The compiler will automatically include a reference to the created tests,
in your module's .info file (for example, files[] = PageTiltsWhenIPressEnter.test).

The compiler will also create a steps file in the module directory, called zot.steps

Your job then is to change all the "todo"s in the steps file, as needed.
Each step function should return TRUE if the step's assertion is true (otherwise FALSE);
If the global variable $test_only is TRUE, that's ALL the step function should do.
Otherwise, it should MAKE the assertion be true by setting up the appropriate conditions.

For example, if you have a step function called "accountExists", then:
* When the function is called from Given("account 5 exists"),
  it should create the account if it doesn't exist yet.
* However, when the function is called from Then("account 5 exists"), 
  just return FALSE if the account does not exist.

If you modify a feature file, rerun the compiler to recreate all the test files.
The .steps file will also be updated accordingly, 
but the compiler will never change the inside of any step function.
YOU should not change anything in the steps file EXCEPT what is inside the step functions.

Once you have finished coding the steps,
run the tests by browsing to /admin/config/development/testing
Click to put a check mark by your test and click the "Run tests" button.
After several minutes, the "todo"s will show up in yellow as well as failing (which appear in red).

Of course your final task is to make all the tests turn green, by making the module
actually do what is being tested.

Need help? Ask William: wspademan@gmail.com

Have fun.
