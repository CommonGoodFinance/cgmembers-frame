<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_WEB);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
  $subs['%todayn-12m'] = t\subAgo('%todayn-365d', '%Y%m%d');
  $subs['%todayn'] = t\subAgo('%todayn', '%Y%m%d');
  //$subs['%dmy'] = t\subAgo('%todayn', '%d-%b-%Y');
  $subs['%name'] = \user_password(20); // suitable for email address
}

function tlog($msg, $type = 'test', $info = array()) {return u\log($msg, $type, $info);}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: MAKE Bank AMemberTransfersFundsToTheBank
 *     MAKE Flow AMemberOverdrawsWithNotEnoughToDrawOn
 *     MAKE Get AMemberMovesCreditToTheBank
 *     MAKE Get AMemberDrawsCreditFromTheBank
 *     MAKE Get AMemberMovesTooLittleToTheBank
 *     MAKE Get AMemberTriesToCashOutRewardsAndorPendingWithdrawals
 *     MAKE Get AMemberMovesInconvenientlyMuchToTheBank
 *     MAKE Get AMemberTriesToGoBelowTheirMinimum
 *     MAKE Get AMemberAsksToDoTwoTransfersOutInOneDay
 *     MAKE Gift AMemberDonates
 *     MAKE Gift AMemberDonatesWithInsufficientFunds
 *     MAKE Relations AMemberAddsARelation
 *     MAKE Transact AMemberAsksToChargeAnotherMember
 *     MAKE Transact AMemberAsksToPayAnotherMember
 *     MAKE TransactUsd AMemberAsksToChargeAnotherMember
 *     MAKE TransactUsd AMemberAsksToPayAnotherMember
 */
function memberCompletesFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values);}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: MAKE Contact AMemberUpdatesContactInfo
 *     MAKE Contact AMemberGivesABadPhone
 *     MAKE Contact AMemberGivesABadEmail
 *     MAKE Contact AMemberUpdatesToADifferentState
 *     MAKE Contact AMemberUpdatesToADifferentName
 *     MAKE Flow AMemberOverdraws
 *     MAKE Flow AMemberOverdrawsAndDrawsFromBothRAndUSD
 *     MAKE Membership AMemberSignsInForTheFirstTime
 *     MAKE Membership AMemberGivesTheWrongPassword
 *     MAKE Membership AMemberDoesItAll
 *     MAKE Membership AMemberOpensABusinessAccount
 *     MAKE Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     MAKE Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 *     MAKE RealUsd AMixedRCreditsUSDTransactionHappens
 *     MAKE RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance
 *     MAKE RealUsd AMemberBuysSomethingWhenDwollaIsDown
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     MAKE Signup ANewbieRegistersInWesternMassachusetts
 *     MAKE Signup ANewbieRegistersWithAUseName
 *     MAKE Signup ANewbieRegistersElsewhere
 *     MAKE Signup ANewbieRegistersWithNoCase
 *     MAKE Signup AMemberRegistersBadEmail
 *     MAKE Signup AMemberRegistersBadName
 *     MAKE Signup AMemberRegistersBadZip
 *     MAKE Signup AMemberRegistersAgain
 *     MAKE Signup AMemberRegistersWithAnExistingCompany
 *     MAKE Signup AMemberRegistersWithAnUnknownCompany
 *     MAKE Signup AMemberRegistersWithACompanyWithNoRelation
 *     MAKE Transact AMemberConfirmsRequestToChargeAnotherMember
 *     MAKE Transact AMemberConfirmsRequestToPayAnotherMember
 *     MAKE Transact AMemberConfirmsRequestToPayAMemberCompany
 *     MAKE Transact AMemberConfirmsRequestToPayTheSameMemberTheSameAmount
 *     MAKE Transact AMemberConfirmsRequestToChargeTheSameMemberTheSameAmount
 *     MAKE TransactUsd AMemberConfirmsRequestToChargeAnotherMember
 *     MAKE TransactUsd AMemberConfirmsRequestToPayAnotherMember
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * a member confirms form (ARG) (which logs out) with values: (ARG)
 *
 * in: 
 */
function aMemberConfirmsFormwhichLogsOutWithValues($page, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  global $skipToStep;
//  $result = t\postLogout(__FUNCTION__) ?: 
  return MemberConfirmsFormWithValues('?', $page, $values);
//  $skipToStep = NULL;
  return $result;
}

/*
  $sta = array();
 * $sta['input']['mail'] = 'robouser@example.com';
 * $sta['input']['pass']['pass1'] = 'password';
 * $sta['input']['pass']['pass2'] = 'password';
 * $sta['input']['op'] = t('Create new account');
 * drupal_form_submit('user_register_form', $sta);
 * @endcode
 
 function drupal_get_form($form_id) {
  $sta = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $sta['build_info']['args'] = $args;

  return drupal_build_form($form_id, $sta);
}
 */

/**
 * members: (ARG)
 *
 * in: MAKE Bank Setup
 *     MAKE Boxes Setup
 *     MAKE Community Setup
 *     MAKE Contact Setup
 *     TEST Contact AMemberUpdatesContactInfo
 *     TEST Contact AMemberUpdatesToADifferentState
 *     TEST Contact AMemberUpdatesToADifferentName
 *     MAKE Download Setup
 *     MAKE EditTx Setup
 *     MAKE Flow Setup
 *     MAKE Get Setup
 *     MAKE Gift Setup
 *     MAKE Membership Setup
 *     TEST Membership AMemberSignsInForTheFirstTime
 *     MAKE RealUsd Setup
 *     MAKE Relations Setup
 *     MAKE ScanCard Setup
 *     TEST Signup ANewbieRegistersInWesternMassachusetts
 *     TEST Signup ANewbieRegistersWithAUseName
 *     TEST Signup ANewbieRegistersElsewhere
 *     TEST Signup ANewbieRegistersWithNoCase
 *     MAKE Signup AMemberRegistersAgain
 *     BOTH Signup AMemberRegistersWithAnExistingCompany
 *     TEST Signup AMemberRegistersWithAnUnknownCompany
 *     MAKE Summary Setup
 *     MAKE Transact Setup
 *     MAKE Transactions Setup
 *     MAKE TransactUsd Setup
 */
function members($list) {return t\members($list);}

/**
 * transactions: (ARG)
 *
 * in: MAKE Bank Setup
 *     MAKE Community Setup
 *     MAKE Download Setup
 *     MAKE EditTx Setup
 *     TEST Flow AMemberOverdraws
 *     TEST Flow AMemberOverdrawsAndDrawsFromBothRAndUSD
 *     MAKE Get Setup
 *     TEST Gift AMemberDonates
 *     MAKE RealUsd Setup
 *     TEST RealUsd AMixedRCreditsUSDTransactionHappens
 *     TEST RealUsd AMemberBuysSomethingWhenDwollaIsDown
 *     MAKE Relations Setup
 *     MAKE ScanCard Setup
 *     MAKE Summary Setup
 *     MAKE Transact Setup
 *     TEST Transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAMemberCompany
 *     MAKE Transactions Setup
 *     TEST TransactUsd AMemberConfirmsRequestToPayAnotherMember
 */
function transactions($list) {return t\transactions($list);}

/**
 * we say (ARG): (ARG) with subs: (ARG)
 *
 * in: TEST Bank AMemberTransfersFundsToTheBank
 *     TEST EditTx ABuyerTriesToDecreaseAPaymentAmount
 *     TEST Flow AMemberOverdrawsWithNotEnoughToDrawOn
 *     TEST Get AMemberMovesCreditToTheBank
 *     TEST Get AMemberDrawsCreditFromTheBank
 *     TEST Get AMemberTriesToCashOutRewardsAndorPendingWithdrawals
 *     TEST Get AMemberMovesInconvenientlyMuchToTheBank
 *     TEST Get AMemberAsksToDoTwoTransfersOutInOneDay
 *     TEST Gift AMemberDonates
 *     TEST Gift AMemberDonatesWithInsufficientFunds
 *     TEST RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance
 *     TEST Relations AMemberAddsARelation
 *     TEST Signup AMemberRegistersBadName
 *     TEST Signup AMemberRegistersAgain
 *     TEST Transact AMemberConfirmsRequestToChargeAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAMemberCompany
 *     TEST Transact AMemberConfirmsRequestToPayTheSameMemberTheSameAmount
 *     TEST Transact AMemberConfirmsRequestToChargeTheSameMemberTheSameAmount
 *     TEST TransactUsd AMemberConfirmsRequestToChargeAnotherMember
 *     TEST TransactUsd AMemberConfirmsRequestToPayAnotherMember
 */
function weSayWithSubs($type, $index, $subs) {
  global $testOnly;

  $subs = @$subs[0] ?: array();
  if (isset($subs['email'])) t\fixEmail($subs['email']);
  $msg0 = u\tt($index);
  $msg = u\tt($index, $subs);
  foreach ($subs as $key => $value) {
    if (strpos($msg0, "@$key") === FALSE) return t\output("missing sub '$key' in message '$index'");
  }
  $msgs = \drupal_get_messages($type ?: NULL, FALSE);
  $result = (@$msgs[$type] and array_search($msg, $msgs[$type]) !== FALSE);
///  if (!$result) debug(compact('msg','msgs')); // keep
  t\output("EXPECT: $msg", 'output'); // this must come after array_search!
  return $result;
}

/**
 * we say (ARG): (ARG)
 *
 * in: TEST Contact AMemberUpdatesContactInfo
 *     TEST Contact AMemberGivesABadPhone
 *     TEST Contact AMemberGivesABadEmail
 *     TEST Contact AMemberUpdatesToADifferentState
 *     TEST Contact AMemberUpdatesToADifferentName
 *     TEST EditTx ABuyerIncreasesAPaymentAmount
 *     TEST EditTx ABuyerChangesTheGoodsStatus
 *     TEST Get AMemberMovesTooLittleToTheBank
 *     TEST Get AMemberTriesToGoBelowTheirMinimum
 *     TEST Membership AMemberSignsInForTheFirstTime
 *     MAKE Membership AMemberGivesTheWrongPassword
 *     TEST Membership AMemberDoesItAll
 *     TEST Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     TEST Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 *     TEST Signup ANewbieRegistersInWesternMassachusetts
 *     TEST Signup ANewbieRegistersElsewhere
 *     TEST Signup AMemberRegistersBadEmail
 *     TEST Signup AMemberRegistersBadZip
 *     TEST Signup AMemberRegistersWithACompanyWithNoRelation
 *     TEST Summary MembersAccountIsNotActive
 */
function weSay($type, $index) {
  global $testOnly;
  return weSayWithSubs($type, $index, array());
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Signup ANewbieRegistersInWesternMassachusetts
 *     TEST Signup ANewbieRegistersElsewhere
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * we tell staff (ARG) with subs: (ARG)
 *
 * in: TEST Gift AMemberDonates
 *     TEST Gift AMemberDonatesWithInsufficientFunds
 *     TEST Membership AMemberDoesItAll
 *     TEST Membership AMemberOpensABusinessAccount
 */
function weTellStaffWithSubs($topic, $subs) {return t\weTellStaff($topic, $subs);}

/**
 * we show (ARG) with subs: (ARG)
 *
 * in: TEST Transact AMemberAsksToChargeAnotherMember
 *     TEST Transact AMemberAsksToPayAnotherMember
 *     TEST TransactUsd AMemberAsksToChargeAnotherMember
 *     TEST TransactUsd AMemberAsksToPayAnotherMember
 */
function weShowWithSubs($page, $subs) {
  global $testOnly;
  global $testConfirmation; // confirmation message output, if any
  global $formOut; // for testing

  $subs = @$subs[0] ?: array(); // comes in as "" if no subs
  if (strpos($page, 'confirm ') !== FALSE) {
    foreach (u\just(R_DATE_FIELDS, $subs) as $k => $v) if (is_numeric($v)) $subs[$k] = u\fmtDate($v);
    $wanted = u\tt($page, $subs);
    t\output("<b>WANTED: </b>$wanted", 'screen');
/**/ debug(compact('wanted','testConfirmation')); // redundant but very easy
    return ($wanted == $testConfirmation);
  }
  $form = strtr(t\strip(r\Web\showForm($page, @$subs['arg1'], @$subs['arg2'])), $subs);
  t\output("<b>WANTED: </b>$form", 'screen');
  if ($form != $formOut['text']) return FALSE;
  unset($subs['arg1']);
  unset($subs['arg2']);
  foreach ($subs as $one) if (strpos($form, $one) === FALSE) return FALSE; // sometimes we dunno what to sub for
  return TRUE;
}

/**
 * we show (ARG) with: (ARG)
 *
 * in: TEST Boxes AMemberVisitsTheDevicesPageWithNoDevicesYet
 *     TEST Boxes AMemberHasAllKindsOfDevices
 *     TEST Community CronCalculatesTheStatistics
 *     TEST Contact AMemberVisitsTheContactInfoPage
 *     TEST Get AMemberAsksToDoTwoTransfersOutInOneDay
 *     TEST Membership AMemberSignsInForTheFirstTime
 *     TEST Membership AMemberClicksTheMembershipLink
 *     TEST Membership AMemberWithoutADwollaAccountClicksTheMembershipLink
 *     TEST Membership ACompanyAgentClicksOnTheMembershipLink
 *     TEST Membership AMemberDoesItAll
 *     TEST Membership AMemberOpensABusinessAccount
 *     TEST RealUsd AMixedRCreditsUSDTransactionHappens
 *     TEST Relations MemberHasAnEmployeeConfirmed
 *     TEST Relations MemberHasAnEmployeeUnconfirmed
 *     TEST Relations MemberHasARelationWithAContractor
 *     TEST Relations MemberHasAnEmployeeClaimed
 *     TEST Relations EmployeeCanOnlyRead
 *     TEST Relations MemberHasAnEmployer
 *     TEST Relations MemberHasAccessToEmployeeAccount
 *     TEST Relations MemberCompanyHasRelations
 *     TEST Relations ItsComplicated
 *     TEST Relations AMemberAddsARelation
 *     TEST ScanCard SomeoneScansACompanyAgentCard
 *     TEST ScanCard SomeoneScansAnOldCompanyAgentCard
 *     TEST Signup ANewbieVisitsTheRegistrationPageWithNoInvite
 *     TEST Signup ANewbieVisitsTheRegistrationPageWithBadInvite
 *     TEST Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 *     TEST Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     TEST Signup AnInvitedNewbieVisitsTheRegistrationPage
 *     TEST Signup ANewbieRegistersInWesternMassachusetts
 *     TEST Summary AMemberClicksOnTheSummaryTab
 *     TEST Summary AnAgentClicksOnTheSummaryTabWithoutPermissionToManage
 *     TEST Summary ACompanyAgentClicksOnTheSummaryTab
 *     TEST Transactions AMemberLooksAtTransactionsForThePastYear
 *     TEST Transactions AMemberLooksAtTransactionsForThePastFewDays
 */
function weShowWith($title, $content = FALSE, $showDebugs = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  if ($title and !weShow($title, $showDebugs)) return FALSE;
  return weShow($content, $showDebugs);
}

/**
 * with options: (ARG)
 *
 * in: 
 */
function withOptions($options, $showDebugs = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  return t\shownWith($options, 'options', $showDebugs);
}

/**
 * without options: (ARG)
 *
 * in: 
 */
function withoutOptions($options) {
  global $testOnly; if (!$testOnly) return FALSE;
  foreach ($options as $one) if (WithOptions(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: MAKE Community Setup
 *     MAKE Download Setup
 *     MAKE EditTx Setup
 *     MAKE Flow Setup
 *     MAKE Membership Setup
 *     MAKE Relations MemberHasAnEmployeeConfirmed
 *     MAKE Relations MemberHasAnEmployeeUnconfirmed
 *     MAKE Relations MemberHasARelationWithAContractor
 *     MAKE Relations MemberHasAnEmployeeClaimed
 *     MAKE Relations EmployeeCanOnlyRead
 *     MAKE Relations MemberHasAnEmployer
 *     MAKE Relations MemberHasAccessToEmployeeAccount
 *     MAKE Relations MemberCompanyHasRelations
 *     MAKE Relations ItsComplicated
 *     MAKE ScanCard Setup
 *     TEST Signup AMemberRegistersWithAnExistingCompany
 *     MAKE Summary Setup
 *     MAKE Transact Setup
 *     MAKE Transactions Setup
 *     MAKE TransactUsd Setup
 */
function relations($relations) {return t\relations($relations);}

/**
 * balances: (ARG)
 *
 * in: MAKE Bank Setup
 *     BOTH Community Setup
 *     BOTH Download Setup
 *     TEST EditTx Setup
 *     TEST EditTx ABuyerIncreasesAPaymentAmount
 *     TEST EditTx ABuyerChangesTheGoodsStatus
 *     MAKE Flow Setup
 *     TEST Get Setup
 *     TEST Get AMemberMovesCreditToTheBank
 *     MAKE Gift Setup
 *     MAKE RealUsd Setup
 *     TEST RealUsd AMixedRCreditsUSDTransactionHappens
 *     TEST RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance
 *     TEST RealUsd AMemberBuysSomethingWhenDwollaIsDown
 *     TEST Relations Setup
 *     BOTH ScanCard Setup
 *     TEST Summary Setup
 *     TEST Transact Setup
 *     TEST Transact AMemberConfirmsRequestToChargeAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAMemberCompany
 *     BOTH Transactions Setup
 *     MAKE TransactUsd Setup
 *     TEST TransactUsd AMemberAsksToChargeAnotherMember
 *     TEST TransactUsd AMemberConfirmsRequestToChargeAnotherMember
 *     TEST TransactUsd AMemberConfirmsRequestToPayAnotherMember
 */
function balances($list) {return t\balances($list);}

/**
 * usd: (ARG)
 *
 * in: 
 */
function usd($list) {return t\usd($list);}

/**
 * member (ARG) visits page (ARG)
 *
 * in: MAKE Boxes AMemberVisitsTheDevicesPageWithNoDevicesYet
 *     MAKE Boxes AMemberHasAllKindsOfDevices
 *     MAKE Community CronCalculatesTheStatistics
 *     MAKE Contact AMemberVisitsTheContactInfoPage
 *     MAKE Download AMemberDownloadsTransactionsForThePastYear
 *     MAKE Membership AMemberSignsInForTheFirstTime
 *     MAKE Membership AMemberGivesTheWrongPassword
 *     MAKE Membership AMemberClicksTheMembershipLink
 *     MAKE Membership AMemberWithoutADwollaAccountClicksTheMembershipLink
 *     MAKE Membership ACompanyAgentClicksOnTheMembershipLink
 *     MAKE Membership AMemberDoesItAll
 *     MAKE Membership AMemberOpensABusinessAccount
 *     MAKE Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     MAKE Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 *     MAKE RealUsd AMixedRCreditsUSDTransactionHappens
 *     MAKE Relations MemberHasAnEmployeeConfirmed
 *     MAKE Relations MemberHasAnEmployeeUnconfirmed
 *     MAKE Relations MemberHasARelationWithAContractor
 *     MAKE Relations MemberHasAnEmployeeClaimed
 *     MAKE Relations EmployeeCanOnlyRead
 *     MAKE Relations MemberHasAnEmployer
 *     MAKE Relations MemberHasAccessToEmployeeAccount
 *     MAKE Relations MemberCompanyHasRelations
 *     MAKE Relations ItsComplicated
 *     MAKE ScanCard SomeoneScansAMemberCard
 *     MAKE ScanCard SomeoneScansACompanyAgentCard
 *     MAKE ScanCard SomeoneScansAnOldMemberCard
 *     MAKE ScanCard SomeoneScansAnOldCompanyAgentCard
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithNoInvite
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithBadInvite
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     MAKE Signup AnInvitedNewbieVisitsTheRegistrationPage
 *     MAKE Summary AMemberClicksOnTheSummaryTab
 *     MAKE Summary AnAgentClicksOnTheSummaryTabWithoutPermissionToManage
 *     MAKE Summary ACompanyAgentClicksOnTheSummaryTab
 *     MAKE Summary MembersAccountIsNotActive
 *     MAKE Transactions AMemberLooksAtTransactionsForThePastYear
 *     MAKE Transactions AMemberLooksAtTransactionsForThePastFewDays
 */
function memberVisitsPage($id, $page) { // pass options in URL
  global $testOnly; if ($testOnly) return FALSE;
  if (!t\login($id)) return FALSE;
  t\pageForm(t\fixPageArgs($page), FALSE);
  return TRUE;
}

/**
 * member is logged out
 *
 * in: MAKE Membership AMemberSignsInForTheFirstTime
 *     MAKE Signup Setup
 */
function memberIsLoggedOut() {
  global $testOnly;
  //u\deb('memberIsLoggedOut top loggedin=' . \user_is_logged_in());
  if ($testOnly) return !\user_is_logged_in();
  r\acct::setDefault(NULL);
  return TRUE; // never actually log out
}

/**
 * invitation to email (ARG) is (ARG)
 *
 * in: MAKE Membership AMemberSignsInForTheFirstTime
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithNoInvite
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithBadInvite
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 *     MAKE Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     MAKE Signup AnInvitedNewbieVisitsTheRegistrationPage
 *     MAKE Signup ANewbieRegistersInWesternMassachusetts
 *     MAKE Signup ANewbieRegistersWithAUseName
 *     MAKE Signup ANewbieRegistersElsewhere
 *     MAKE Signup ANewbieRegistersWithNoCase
 *     MAKE Signup AMemberRegistersBadEmail
 *     MAKE Signup AMemberRegistersBadName
 *     MAKE Signup AMemberRegistersBadZip
 *     MAKE Signup AMemberRegistersAgain
 *     MAKE Signup AMemberRegistersWithAnExistingCompany
 *     MAKE Signup AMemberRegistersWithAnUnknownCompany
 *     MAKE Signup AMemberRegistersWithACompanyWithNoRelation
 */
function invitationToEmailIs($email, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  if ($code) r\invite(t\fixEmail($email), 1, $code); // invitation comes (arbitrarily) from uid 1
//  t\SERVER('REQUEST_URI', "whatever/$code"); // fake the URI
  return TRUE;
}

/**
 * no relation: (ARG)
 *
 * in: TEST Signup AMemberRegistersWithAnUnknownCompany
 */
function noRelation($relations) {
  global $testOnly;
  foreach ($relations as $one) if (r\relation(1, t\uid($one['main']), t\uid($one['agent']))) return FALSE;
  return TRUE;
}

/**
 * member (ARG) signs in the first time
 *
 * in: 
 */
function memberSignsInTheFirstTime($uid) {
  global $testOnly; if (!$testOnly) return FALSE;
  memberVisitsPage($uid, 'summary');
  return db\lookup('created=login', 'users', 'uid=' . t\uid($uid));
}

/**
 * member (ARG) account is not active
 *
 * in: MAKE Summary MembersAccountIsNotActive
 */
function memberAccountIsNotActive($id) {
  global $testOnly; if ($testOnly) return FALSE;
  list ($uid, $agent) = r\IA(t\fullQid($id)); // not unQuid
  if (!$uid) return FALSE;
  r\acct($uid)->setBit(B_OK, FALSE);
  return TRUE;
}

/**
 * with done (ARG)
 *
 * in: TEST Membership AMemberClicksTheMembershipLink
 *     TEST Membership AMemberWithoutADwollaAccountClicksTheMembershipLink
 *     TEST Membership ACompanyAgentClicksOnTheMembershipLink
 *     TEST Membership AMemberDoesItAll
 *     TEST Membership AMemberOpensABusinessAccount
 *     TEST Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     TEST Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 */
function withDone($steps) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $formOut;
  return $steps == $formOut['done'];
}

/**
 * member (ARG) has done step (ARG)
 *
 * in: MAKE Membership AMemberDoesItAll
 *     MAKE Membership AMemberOpensABusinessAccount
 */
function memberHasDoneStep($uid, $step) {return t\doneStep($uid, $step);}

/**
 * we show (ARG)
 *
 * in: TEST Membership AMemberSignsInForTheFirstTime
 *     TEST Membership AMemberDoesItAll
 *     TEST Membership AMemberOpensABusinessAccount
 *     TEST Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     TEST Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 */
function weShow($what, $show = TRUE) {return t\weShow($what, $show);}

/**
 * member (ARG) supplies (ARG): (ARG)
 *
 * in: 
 */
function memberSupplies($uid, $field, $value) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct($uid = t\uid($uid));
  return $a->update(u\ray($field, $value));
}

/**
 * member (ARG) has permission (ARG)
 *
 * in: MAKE Membership AMemberDoesItAll
 *     MAKE Membership AMemberOpensABusinessAccount
 */
function memberHasPermission($uid, $permission) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct(t\uid($uid))->setBit(u\consta('b', $permission), TRUE);
}

/**
 * member (ARG) one-time password is set
 *
 * in: TEST Membership AMemberSignsInForTheFirstTime
 *     TEST Signup ANewbieRegistersInWesternMassachusetts
 *     TEST Signup ANewbieRegistersElsewhere
 */
function memberOnetimePasswordIsSet($id) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = r\acct($uid = t\uid($id));
  return (isset($a->oneTimePass['pass']) and $a->oneTimePass['expires'] > REQUEST_TIME);
}

/**
 * member (ARG) one-time password is (ARG)
 *
 * in: MAKE Membership AMemberSignsInForTheFirstTime
 *     MAKE Membership AMemberGivesTheWrongPassword
 */
function memberOnetimePasswordIs($id, $pass) {
  global $testOnly;
  if (!$a = r\acct($uid = t\uid($id))) return FALSE;
  if (!$testOnly) {
    $expires = REQUEST_TIME + R_SIGNIN_HOURS * HOUR_SECS;
    $oneTimePass = compact('pass', 'expires');
    $a->update(compact('oneTimePass'));
  }
  return ($a->oneTimePass['pass'] == $pass and $a->oneTimePass['expires'] > REQUEST_TIME);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST EditTx ABuyerIncreasesAPaymentAmount
 *     TEST EditTx ABuyerChangesTheGoodsStatus
 *     TEST Gift AMemberDonates
 *     TEST Transact AMemberConfirmsRequestToChargeAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST Transact AMemberConfirmsRequestToPayAMemberCompany
 *     TEST TransactUsd AMemberConfirmsRequestToChargeAnotherMember
 *     TEST TransactUsd AMemberConfirmsRequestToPayAnotherMember
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * gifts: (ARG)
 *
 * in: TEST Gift AMemberDonates
 *     TEST Gift AMemberDonatesWithInsufficientFunds
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we download (ARG) with: (ARG)
 *
 * in: TEST Download AMemberDownloadsTransactionsForThePastYear
 */
function weDownloadWith($name, $rows) {
  global $testOnly;
  global $testCSV, $testCSVname;

  if (@$testCSVname != $name) return t\output("$testCSVname <> $name");
  if (!is_array($testCSV) or empty($testCSV)) return t\output('testCSV empty');
  $testCSV2 = $testCSV; // don't alter this (withDownloadColumns() needs it)
  $headers = array_shift($testCSV2);
  if ($headers[0] == '#') $headers[0] = 't#';
  foreach ($testCSV2 as $csvRow) {
/// debug(compact('headers', 'csvRow'));
    $csvRow = array_combine($headers, $csvRow); // add keys
/**/ if (!$row = array_shift($rows)) return t\output('extra row in CSV: ' . print_r($csvRow, 1));
    foreach ($row as $key => $value) {
///    debug(compact('row','csvRow'));
      if (strpos($value, '%') !== FALSE) $value = t\lastMinuteSubs($value);
///      if (!isset($csvRow[$key])) debug(compact('key', 'csvRow', 'value'));
      if (!t\eq($csvValue = $csvRow[$key], $value)) return t\output("key=$key csvValue<>expected value: $csvValue<>$value csvRow:" . print_r($csvRow, 1));
    }
  }
  return TRUE;
}

/**
 * with download columns: (ARG)
 *
 * in: TEST Download AMemberDownloadsTransactionsForThePastYear
 */
function withDownloadColumns($columns) {
  global $testOnly;
  global $testCSV, $testCSVname;

  if (!is_array($testCSV) or empty($testCSV)) return FALSE;
  $testCSV2 = $testCSV; // don't alter this (just in case)
  $headers = array_shift($testCSV2);
/// debug(compact('headers','testCSV','columns'));
  foreach ($columns as $one) if (array_search($one['column'], $headers) === FALSE) return FALSE;
  return TRUE;
}

/**
 * Dwolla is down
 *
 * in: MAKE RealUsd AMemberBuysSomethingWhenDwollaIsDown
 */
function dwollaIsDown() {
  global $testOnly; if ($testOnly) return FALSE;
  global $dwollaDown; return $dwollaDown = TRUE;
}

/**
 * usd transfers: (ARG)
 *
 * in: TEST Bank AMemberTransfersFundsToTheBank
 *     MAKE Community Setup
 *     MAKE Download Setup
 *     MAKE Get Setup
 *     TEST Get AMemberMovesCreditToTheBank
 *     TEST Get AMemberDrawsCreditFromTheBank
 *     MAKE Get AMemberAsksToDoTwoTransfersOutInOneDay
 *     MAKE Summary Setup
 *     MAKE Transactions Setup
 */
function usdTransfers($tx) {return t\usdTransfers($tx);}


/**
 * usd transfer count is (ARG)
 *
 * in: TEST RealUsd AMixedRCreditsUSDTransactionHappens
 *     TEST RealUsd AMemberBuysSomethingWhenDwollaIsDown
 */
function usdTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * member (ARG) scans member card (ARG)
 *
 * in: 
 */
function memberScansMemberCard($id1, $id2) {
  global $testOnly; if ($testOnly) return FALSE;
  t\logIn($id1);
  
}

/**
 * member (ARG) card code is (ARG)
 *
 * in: 
 */
function memberCardCodeIs($id, $cardCode) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $secure = compact('cardCode') + ($a->secure ?: array());
  return $a->update(compact('secure'));
}

/**
 * agent (ARG) card code is (ARG)
 *
 * in: 
 */
function agentCardCodeIs($id, $cardCode2) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $secure = compact('cardCode2') + ($a->secure ?: array());
  return $a->update(compact('secure'));
}

/**
 * cron runs (ARG)
 *
 * in: MAKE Community Setup
 *     MAKE Community CronCalculatesTheStatistics
 *     MAKE Summary Setup
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * member (ARG) has a dwolla account, step (ARG)
 *
 * in: 
 */
function memberHasADwollaAccountStep($id, $step) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $us = new rCredits\usd($a);
  return ($us->step() == $step);
}

/**
 * without: (ARG)
 *
 * in: TEST Membership ACompanyAgentClicksOnTheMembershipLink
 *     TEST Relations MemberCompanyHasRelations
 *     TEST Relations ItsComplicated
 *     TEST Signup AnInvitedNewbieVisitsTheRegistrationPage
 *     TEST Summary AnAgentClicksOnTheSummaryTabWithoutPermissionToManage
 *     TEST Summary ACompanyAgentClicksOnTheSummaryTab
 *     TEST Transactions AMemberLooksAtTransactionsForThePastYear
 *     TEST Transactions AMemberLooksAtTransactionsForThePastFewDays
 */
function without($content) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (!is_array($content)) return !weShow($content, FALSE);
  foreach ($content as $one) if (weShow(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * statistics get set (ARG)
 *
 * in: MAKE Community Setup
 */
function statisticsGetSet($time) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\getStats(r\serverUid(), $time) ? TRUE : FALSE;
}

/**
 * we show (ARG) without: (ARG)
 *
 * in: 
 */
function weShowWithout($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * with: (ARG)
 *
 * in: TEST RealUsd AMixedRCreditsUSDTransactionHappens
 *     TEST Relations ItsComplicated
 *     TEST Transactions AMemberLooksAtTransactionsForThePastYear
 *     TEST Transactions AMemberLooksAtTransactionsForThePastFewDays
 */
function with($content) {return weShow($content);}

/**
 * members have: (ARG)
 *
 * in: MAKE Membership AMemberDoesItAll
 *     MAKE Membership AMemberOpensABusinessAccount
 *     MAKE Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     MAKE Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 *     MAKE Summary Setup
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * we redirect to (ARG)
 *
 * in: TEST ScanCard SomeoneScansAMemberCard
 *     TEST ScanCard SomeoneScansAnOldMemberCard
 */
function weRedirectTo($page) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $lastGo;
  return ($lastGo == $page);
}

/**
 * member (ARG) is on step (ARG) within (ARG) seconds
 *
 * in: 
 */
function memberIsOnStepWithinSeconds($id, $step, $secs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $us = new r\usd(r\acct(t\uid($id)));
  for ($i = 0; $i < $secs; $i++) {
    sleep(1);
    if ($us->step() == $step) return TRUE;
  }
  return FALSE;
}

/**
 * member (ARG) chose to verify phone by (ARG)
 *
 * in: MAKE Membership AMemberTypesTheWrongAccountInfonameSsnOrDob
 *     MAKE Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure
 */
function memberChoseToVerifyPhoneBy($id, $verifyBy) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\uid($id));
  return $a->update(compact('verifyBy'));
}

/**
 * account (ARG) was set up by member (ARG)
 *
 * in: MAKE Membership AMemberOpensABusinessAccount
 */
function accountWasSetUpByMember($coId, $id) {
  global $testOnly; if ($testOnly) return FALSE;
  $by = t\uid($id);
  $co = r\acct(t\uid($coId));
  return $co->update(compact('by'));
}

/**
 * next DO code is (ARG)
 *
 * in: MAKE Gift AMemberDonates
 *     MAKE Transact AMemberConfirmsRequestToPayAMemberCompany
 */
function nextDOCodeIs($code) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testDoCode;
  return $testDoCode = $code;
}

/**
 * invitation (ARG) was sent on (ARG)
 *
 * in: MAKE Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 */
function invitationWasSentOn($code, $dt) {
  global $testOnly; if ($testOnly) return FALSE;
  return db\q("UPDATE r_invites SET invited='$dt' WHERE code='$code'");
}

/**
 * devices: (ARG)
 *
 * in: MAKE Boxes AMemberHasAllKindsOfDevices
 */
function devices($list) {return t\devices($list);}

/**
 * invoices: (ARG)
 *
 * in: TEST Transact AMemberConfirmsRequestToChargeAnotherMember
 *     TEST TransactUsd AMemberConfirmsRequestToChargeAnotherMember
 */
function invoices($list) {return t\invoices($list);}

/**
 * signup company info is remembered
 *
 * in: 
 */
function signupCompanyInfoIsRemembered() {
  global $testOnly; if (!$testOnly) return FALSE;
}

/**
 * signup company info for account (ARG) is remembered
 *
 * in: TEST Signup AMemberRegistersWithAnUnknownCompany
 */
function signupCompanyInfoForAccountIsRemembered($id) {
  global $testOnly; if (!$testOnly) return FALSE;
  return (bool) r\acct(t\uid($id))->signupCo;
}

/**
 * that (ARG) has link results: (ARG)
 *
 * in: TEST Gift AMemberDonates
 *     TEST Transact AMemberConfirmsRequestToPayAMemberCompany
 */
function thatHasLinkResults($thing, $info) {return t\hasLinkResults($thing, $info);}

/**
 * member (ARG) edits transaction (ARG) with values: (ARG)
 *
 * in: MAKE EditTx ABuyerIncreasesAPaymentAmount
 *     MAKE EditTx ABuyerChangesTheGoodsStatus
 *     MAKE EditTx ABuyerTriesToDecreaseAPaymentAmount
 */
function memberEditsTransactionWithValues($id, $xid, $values) {
  $page = "history/xid=$xid&do=edit";
  return memberConfirmsFormWithValues($id, $page, $values);
}
