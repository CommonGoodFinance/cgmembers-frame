<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_WEB);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

function tlog($msg, $type = 'test', $info = array()) {return u\log($msg, $type, $info);}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: Gift AMemberContributes MAKE
 *     Gift AMemberContributesPartlyInUSD MAKE
 *     Gift AMemberContributesWithInsufficientFunds MAKE
 *     TransactR AMemberAsksToChargeAnotherMember MAKE
 *     TransactR AMemberAsksToPayAnotherMember MAKE
 *     TransactUsd AMemberAsksToChargeAnotherMember MAKE
 *     TransactUsd AMemberAsksToPayAnotherMember MAKE
 */
function memberCompletesFormWithValues($id, $page, $values, $confirmed = FALSE) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testOp; $testOp = @$values[0]['op'];
  global $testConfirmation; // confirmation message output, if any
  global $formSta;
//debug(compact(u\ray('id page values confirmed testOnly'))); // keep

  $values = $values[0];
  t\fixCountryAndState($values);
  if (isset($values['amount']) and !is_numeric($values['amount'])) {
    $a = r\acct(t\fullQid($id));
    list ($values['amount']) = t\parseAmt($values['amount'], $a);
  }
  if (@$values['email']) $values = u\changeKey('email', 'mail', $values);
  
  t\logIn($id);

  $validate = TRUE;
  if (!$form = t\pageForm(t\fixPageArgs($page), FALSE)) {
    return FALSE; // probably access error
  }
  
  if ($page == 'pay' or $page == 'charge') {
    $page = 'Tx';
    if ($confirmed) $validate = FALSE;
  }

  $errorsBefore = t\getErrors();
  
  $dfts = array();
  foreach ($form as $key => $field) if (substr($key, 0, 1) != '#') {
//    u\setDft($dft, @$field['#default_value']);
    if ($field['#type'] == 'hidden') $dfts[$key] = $field['#value'];
  }
  $formSta['values'] = $formSta['input'] = $values + $dfts; // add to whatever status the form left off in
  if ($validate) foreach (t\postProcess($form, $page, 'validate') as $one) $one($form, $formSta);

  if (count($errors = t\getErrors()) > count($errorsBefore)) {
    // NO! if (!empty($errors)) return FALSE;
    //debug(compact(u\ray('id page values confirmed one errors')));
  } else {
    $testConfirmation = @$formSta['confirm'];
    $lastIdentifierTag = '</div identifiers>';
    if ($i = strpos($testConfirmation, $lastIdentifierTag)) $testConfirmation = substr($testConfirmation, $i + strlen($lastIdentifierTag));
    foreach (t\postProcess($form, $page, 'submit') as $one) {
      $one($form, $formSta);
    }
    if ($page == '/user/login') { // fudge this test until we can take over the login process from Drupal
      t\logIn($id = $formSta['uid']);
      r\Web\loginFollowup($formSta, r\acct($id)->account());
    }
  }

  return TRUE;
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: RealUsd AMixedRCreditsUSDTransactionHappens MAKE
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance MAKE
 *     Relations AMemberAddsARelation MAKE
 *     Signin AMemberSignsInForTheFirstTime MAKE
 *     Signin AMemberGivesTheWrongPassword MAKE
 *     Signup ANewbieRegisters MAKE
 *     Signup AMemberRegistersBadEmail MAKE
 *     Signup AMemberRegistersBadPhone MAKE
 *     Signup AMemberRegistersBadName MAKE
 *     Signup AMemberRegistersBadZip MAKE
 *     Signup AMemberRegistersAgain MAKE
 *     Signup AMemberRegistersWithAnExistingCompany MAKE
 *     Signup AMemberRegistersWithAnUnknownCompany MAKE
 *     Signup AMemberRegistersWithACompanyWithNoRelation MAKE
 *     Signup AMemberRegistersWithAMissingCompany MAKE
 *     Signup AMemberRegistersWithAMissingCompanyPhone MAKE
 *     Signup AMemberRegistersWithABadCompany MAKE
 *     Signup AMemberRegistersWithABadCompanyPhone MAKE
 *     Signup AMemberRegistersACompany MAKE
 *     Signup ANewbieRegistersFromElsewhere MAKE
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember MAKE
 *     TransactR AMemberConfirmsRequestToPayAnotherMember MAKE
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember MAKE
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember MAKE
 */
function memberConfirmsFormWithValues($id, $page, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  return memberCompletesFormWithValues($id, $page, $values, TRUE);
}

/**
 * a member confirms form (ARG) (which logs out) with values: (ARG)
 *
 * in: 
 */
function aMemberConfirmsFormwhichLogsOutWithValues($page, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  global $skipToStep;
//  $result = t\postLogout(__FUNCTION__) ?: 
  return MemberConfirmsFormWithValues('?', $page, $values);
//  $skipToStep = NULL;
  return $result;
}

/*
  $sta = array();
 * $sta['input']['mail'] = 'robouser@example.com';
 * $sta['input']['pass']['pass1'] = 'password';
 * $sta['input']['pass']['pass2'] = 'password';
 * $sta['input']['op'] = t('Create new account');
 * drupal_form_submit('user_register_form', $sta);
 * @endcode
 
 function drupal_get_form($form_id) {
  $sta = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $sta['build_info']['args'] = $args;

  return drupal_build_form($form_id, $sta);
}
 */

/**
 * members: (ARG)
 *
 * in: Gift Setup MAKE
 *     Membership Setup MAKE
 *     RealUsd Setup MAKE
 *     Relations Setup MAKE
 *     Signin AMemberSignsInForTheFirstTime TEST
 *     Signin AMemberGivesTheWrongPassword MAKE
 *     Signup ANewbieRegisters TEST
 *     Signup AMemberRegistersAgain MAKE
 *     Signup AMemberRegistersWithAnExistingCompany BOTH
 *     Signup AMemberRegistersWithAnUnknownCompany TEST
 *     Signup AMemberRegistersACompany BOTH
 *     Signup ANewbieRegistersFromElsewhere TEST
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 *     TransactR Setup MAKE
 *     TransactUsd Setup MAKE
 */
function members($list) {return t\members($list);}

/**
 * transactions: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Gift AMemberContributesPartlyInUSD TEST
 *     RealUsd Setup MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     Relations Setup MAKE
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly MAKE
 *     TransactR Setup MAKE
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function transactions($list) {return t\transactions($list);}

/**
 * we say (ARG): (ARG) with subs: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Gift AMemberContributesWithInsufficientFunds TEST
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance TEST
 *     Signup ANewbieRegisters TEST
 *     Signup AMemberRegistersBadEmail TEST
 *     Signup AMemberRegistersBadName TEST
 *     Signup AMemberRegistersAgain TEST
 *     Signup AMemberRegistersWithAMissingCompany TEST
 *     Signup AMemberRegistersWithAMissingCompanyPhone TEST
 *     Signup AMemberRegistersWithABadCompany TEST
 *     Signup AMemberRegistersWithABadCompanyPhone TEST
 *     Signup AMemberRegistersACompany TEST
 *     Signup ANewbieRegistersFromElsewhere TEST
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weSayWithSubs($type, $index, $subs) {
  global $testOnly;

  $subs = @$subs[0] ?: array();
  if (isset($subs['email'])) {
    $subs['email'] = str_replace("'", '&#039;', htmlspecialchars($subs['email'])); // Drupal does this in user_register()
  }
  $msg = u\tt($index, $subs);
  $msgs = \drupal_get_messages($type ?: NULL, FALSE);
  $result = (@$msgs[$type] and array_search($msg, $msgs[$type]) !== FALSE);
//  if (!$result) debug(compact('msg','msgs')); // keep
  t\testOutput("EXPECT: $msg", 'output'); // this must come after array_search!
  return $result;
}

/**
 * we say (ARG): (ARG)
 *
 * in: Signin AMemberSignsInForTheFirstTime TEST
 *     Signin AMemberGivesTheWrongPassword MAKE
 *     Signup AMemberRegistersBadPhone TEST
 *     Signup AMemberRegistersBadZip TEST
 *     Signup AMemberRegistersWithACompanyWithNoRelation TEST
 *     Summary MembersAccountIsNotActive TEST
 */
function weSay($type, $index) {
  global $testOnly;
  return weSayWithSubs($type, $index, array());
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Signup ANewbieRegisters TEST
 *     Signup ANewbieRegistersFromElsewhere TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $subs = @$subs[0] ?: array();
  return t\findEmail($key, $email, $subs);
}

/**
 * we tell staff (ARG) with: (ARG)
 *
 * in: 
 */
function weTellStaffWith($topic, $subs) {return t\weTellStaff($topic, $subs);}

/**
 * we show (ARG) with subs: (ARG)
 *
 * in: TransactR AMemberAsksToChargeAnotherMember TEST
 *     TransactR AMemberAsksToPayAnotherMember TEST
 *     TransactUsd AMemberAsksToChargeAnotherMember TEST
 *     TransactUsd AMemberAsksToPayAnotherMember TEST
 */
function weShowWithSubs($page, $subs) {
  global $testOnly;
  global $testConfirmation; // confirmation message output, if any
  global $formOut; // for testing
  
  $subs = @$subs[0] ?: array(); // comes in as "" if no subs
  if (u\abbreviates('confirm', $page)) {
    $wanted = u\tt($page, $subs);
    t\testOutput("<b>WANTED: </b>$wanted", 'screen');
    return ($wanted == $testConfirmation);
  }
  $form = strtr(t\strip(r\Web\showForm($page, @$subs['arg1'], @$subs['arg2'])), $subs);
  t\testOutput("<b>WANTED: </b>$form", 'screen');
  if ($form != $formOut['text']) return FALSE;
  unset($subs['arg1']);
  unset($subs['arg2']);
  foreach ($subs as $one) if (strpos($form, $one) === FALSE) return FALSE; // sometimes we dunno what to sub for
  return TRUE;
}

/**
 * we show (ARG) with: (ARG)
 *
 * in: Membership AMemberClicksOnTheMembershipLink TEST
 *     Membership ACompanyAgentClicksOnTheMembershipLink TEST
 *     Membership AMemberDoesItAll TEST
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     Relations MemberHasAnEmployeeConfirmed TEST
 *     Relations MemberHasAnEmployeeUnconfirmed TEST
 *     Relations MemberHasARelationWithAContractor TEST
 *     Relations MemberHasAnEmployeeClaimed TEST
 *     Relations EmployeeCanOnlyRead TEST
 *     Relations MemberHasAnEmployer TEST
 *     Relations MemberHasAccessToEmployeeAccount TEST
 *     Relations MemberCompanyHasRelations TEST
 *     Relations ItsComplicated TEST
 *     Relations AMemberAddsARelation TEST
 *     Signin AMemberSignsInForTheFirstTime TEST
 *     Signup ANewbieVisitsTheRegistrationPageWithNoInvite TEST
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage TEST
 *     Signup ANewbieRegisters TEST
 *     Signup AMemberRegistersACompany TEST
 *     Signup ANewbieRegistersFromElsewhere TEST
 *     Summary AMemberClicksOnTheSummaryTab TEST
 *     Summary AForeignRTraderClicksOnTheSummaryTab TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 */
function weShowWith($title, $content = FALSE, $showDebugs = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (empty($content)) $content = array(); // might be "" called directly from feature
  array_unshift($content, compact('title'));
  return t\shownWith($content, 'text', $showDebugs);
}

/**
 * we show (ARG) without: (ARG)
 *
 * in: Membership ACompanyAgentClicksOnTheMembershipLink TEST
 *     Membership AMemberDoesItAll TEST
 *     Relations MemberCompanyHasRelations TEST
 *     Relations ItsComplicated TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 */
function weShowWithout($title, $content) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (!weShowWith($title)) return FALSE;
  foreach ($content as $one) if (weShowWith($title, array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * with options: (ARG)
 *
 * in: Signup AMemberRegistersACompany TEST
 */
function withOptions($options, $showDebugs = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  return t\shownWith($options, 'options', $showDebugs);
}

/**
 * without options: (ARG)
 *
 * in: Signup AnInvitedNewbieVisitsTheRegistrationPage TEST
 */
function withoutOptions($options) {
  global $testOnly; if (!$testOnly) return FALSE;
  foreach ($options as $one) if (WithOptions(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: Membership Setup MAKE
 *     Relations MemberHasAnEmployeeConfirmed MAKE
 *     Relations MemberHasAnEmployeeUnconfirmed MAKE
 *     Relations MemberHasARelationWithAContractor MAKE
 *     Relations MemberHasAnEmployeeClaimed MAKE
 *     Relations EmployeeCanOnlyRead MAKE
 *     Relations MemberHasAnEmployer MAKE
 *     Relations MemberHasAccessToEmployeeAccount MAKE
 *     Relations MemberCompanyHasRelations MAKE
 *     Relations ItsComplicated MAKE
 *     Signup AMemberRegistersWithAnExistingCompany TEST
 *     Signup AMemberRegistersACompany TEST
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 *     TransactR Setup MAKE
 *     TransactUsd Setup MAKE
 */
function relations($relations) {return t\relations($relations);}

/**
 * balances: (ARG)
 *
 * in: Gift Setup MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance TEST
 *     Relations Setup TEST
 *     Summary Setup TEST
 *     Transactions Setup TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 *     TransactR Setup TEST
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactUsd AMemberAsksToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function balances($list) {return t\balances($list);}

/**
 * usd: (ARG)
 *
 * in: RealUsd Setup MAKE
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance MAKE
 *     Transactions Setup MAKE
 *     TransactR Setup MAKE
 *     TransactUsd Setup MAKE
 */
function usd($list) {return t\usd($list);}

/**
 * member (ARG) visits page (ARG)
 *
 * in: Membership AMemberClicksOnTheMembershipLink MAKE
 *     Membership ACompanyAgentClicksOnTheMembershipLink MAKE
 *     Membership AMemberDoesItAll MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens MAKE
 *     Relations MemberHasAnEmployeeConfirmed MAKE
 *     Relations MemberHasAnEmployeeUnconfirmed MAKE
 *     Relations MemberHasARelationWithAContractor MAKE
 *     Relations MemberHasAnEmployeeClaimed MAKE
 *     Relations EmployeeCanOnlyRead MAKE
 *     Relations MemberHasAnEmployer MAKE
 *     Relations MemberHasAccessToEmployeeAccount MAKE
 *     Relations MemberCompanyHasRelations MAKE
 *     Relations ItsComplicated MAKE
 *     Relations AMemberAddsARelation MAKE
 *     Signin AMemberSignsInForTheFirstTime MAKE
 *     Signin AMemberGivesTheWrongPassword MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithNoInvite MAKE
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage MAKE
 *     Signup AMemberRegistersACompany MAKE
 *     Summary AMemberClicksOnTheSummaryTab MAKE
 *     Summary AForeignRTraderClicksOnTheSummaryTab MAKE
 *     Summary MembersAccountIsNotActive MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastYear MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly MAKE
 */
function memberVisitsPage($id, $page) { // pass options in URL
  global $testOnly; if ($testOnly) return FALSE;

  if (!t\login($id)) return FALSE;
  t\pageForm(t\fixPageArgs($page), FALSE);
  return TRUE;
}

/**
 * member is logged out
 *
 * in: Signin Setup MAKE
 *     Signup Setup MAKE
 */
function memberIsLoggedOut() {
  global $testOnly;
  u\deb('memberIsLoggedOut top loggedin=' . \user_is_logged_in());
  if ($testOnly) return !\user_is_logged_in();
  r\acct::setDefault(NULL);
  return TRUE; // never actually log out
}

/**
 * invitation to email (ARG) is (ARG)
 *
 * in: Signin AMemberSignsInForTheFirstTime MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithNoInvite MAKE
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage MAKE
 *     Signup ANewbieRegisters MAKE
 *     Signup AMemberRegistersBadEmail MAKE
 *     Signup AMemberRegistersBadPhone MAKE
 *     Signup AMemberRegistersBadName MAKE
 *     Signup AMemberRegistersBadZip MAKE
 *     Signup AMemberRegistersAgain MAKE
 *     Signup AMemberRegistersWithAnExistingCompany MAKE
 *     Signup AMemberRegistersWithAnUnknownCompany MAKE
 *     Signup AMemberRegistersWithACompanyWithNoRelation MAKE
 *     Signup AMemberRegistersWithAMissingCompany MAKE
 *     Signup AMemberRegistersWithAMissingCompanyPhone MAKE
 *     Signup AMemberRegistersWithABadCompany MAKE
 *     Signup AMemberRegistersWithABadCompanyPhone MAKE
 *     Signup AMemberRegistersACompany MAKE
 *     Signup ANewbieRegistersFromElsewhere MAKE
 */
function invitationToEmailIs($email, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  if ($code) r\invite($email, 1, $code); // invitation comes (arbitrarily) from uid 1
//  t\SERVER('REQUEST_URI', "whatever/$code"); // fake the URI
  return TRUE;
}

/**
 * no relation: (ARG)
 *
 * in: Signup AMemberRegistersWithAnUnknownCompany TEST
 */
function noRelation($relations) {
  global $testOnly;
  foreach ($relations as $one) if (r\relation(1, t\uid($one['main']), t\uid($one['agent']))) return FALSE;
  return TRUE;
}

/**
 * member (ARG) signs in the first time
 *
 * in: 
 */
function memberSignsInTheFirstTime($uid) {
  global $testOnly; if (!$testOnly) return FALSE;
  memberVisitsPage($uid, 'summary');
  return r\dbLookup('created=login', 'users', 'uid=' . t\uid($uid));
}

/**
 * member (ARG) account is not active
 *
 * in: Summary MembersAccountIsNotActive MAKE
 */
function memberAccountIsNotActive($uid) {
  global $testOnly; if ($testOnly) return FALSE;
  list ($uid, $agent) = r\IA($uid); // not unQuid
  r\acct($uid)->setBit(B_OK, FALSE);
  return TRUE;
}

/**
 * with done (ARG)
 *
 * in: Membership AMemberClicksOnTheMembershipLink TEST
 *     Membership ACompanyAgentClicksOnTheMembershipLink TEST
 *     Membership AMemberDoesItAll TEST
 */
function withDone($steps) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $formOut;
  return $steps == $formOut['done'];
}

/**
 * member (ARG) has done step (ARG)
 *
 * in: Membership AMemberDoesItAll MAKE
 */
function memberHasDoneStep($uid, $step) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct($uid = t\uid($uid));

  if ($step == 'photo') return file_put_contents(DRUPAL_ROOT . $a->auxFilename('picture'), 'whatever');
  if ($step == 'agreement') return $a->update(u\assoc('signed', REQUEST_TIME));
  if ($step == 'contribution') return r\dbInsert('r_gifts', u\assoc('uid amount', $uid, 123));
  if ($step == 'proxies') return r\dbQ('INSERT INTO r_proxies (person, proxy) VALUES (:uid, 2),(:uid, 3)', compact('uid'));
  
  if ($step == 'dwolla') {
    $secure = @$a->secure;
    $secure['auth'] = 'whatever';
    return $a->update(compact('secure'));
  }
  if ($step == 'proof') {
    list ($dob, $federalId) = array(REQUEST_TIME - DAY_SECS*365*40, 123456789);
    $a->update(compact('dob', 'federalId'));
    return file_put_contents(DRUPAL_ROOT . $a->auxFilename('proof'), 'whatever') and $a->dob and $a->federalId;
  }
  if ($step == 'preferences') return $a->update(u\assoc('minimum', 0));
  if ($step == 'invitation') return r\dbInsert('r_invites', u\assoc('inviter email code', $uid, 'any@example.com', 'whatever'));
    
  return FALSE;
}

/**
 * we show (ARG)
 *
 * in: Membership AMemberDoesItAll TEST
 *     Signin AMemberSignsInForTheFirstTime TEST
 */
function weShow($title) {
  global $testOnly; if (!$testOnly) return FALSE;
  return weShowWith($title, array());
}

/**
 * member (ARG) supplies (ARG): (ARG)
 *
 * in: Membership AMemberDoesItAll MAKE
 */
function memberSupplies($uid, $field, $value) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct($uid = t\uid($uid));
  return $a->update(u\assoc($field, $value));
}

/**
 * member (ARG) has permission (ARG)
 *
 * in: Membership AMemberDoesItAll MAKE
 */
function memberHasPermission($uid, $permission) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct(t\uid($uid))->setBit(constant('B_' . strtoupper($permission)), TRUE, TRUE);
}

/**
 * member (ARG) one-time password is set
 *
 * in: Signin AMemberSignsInForTheFirstTime TEST
 *     Signup ANewbieRegisters TEST
 */
function memberOnetimePasswordIsSet($id) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = r\acct($uid = t\uid($id));
  return (isset($a->data['oneTimePass']['pass']) and $a->data['oneTimePass']['expires'] > REQUEST_TIME);
}

/**
 * member (ARG) one-time password is (ARG)
 *
 * in: Signin AMemberSignsInForTheFirstTime MAKE
 *     Signin AMemberGivesTheWrongPassword MAKE
 */
function memberOnetimePasswordIs($id, $pass) {
  global $testOnly;
  $a = r\acct($uid = t\uid($id));
  if (!$testOnly) {
    $expires = REQUEST_TIME + R_SIGNIN_HOURS * HOUR_SECS;
    $oneTimePass = compact('pass', 'expires');
    $data = compact('oneTimePass') + $a->data;
    $a->update(compact('data'));
  }
  return ($a->data['oneTimePass']['pass'] == $pass and $a->data['oneTimePass']['expires'] > REQUEST_TIME);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * gifts: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Gift AMemberContributesWithInsufficientFunds TEST
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we email staff (ARG) with: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Gift AMemberContributesWithInsufficientFunds TEST
 *     Membership AMemberDoesItAll TEST
 */
function weEmailStaffWith($arg1, $arg2) {
  global $testOnly;
  todo;
}
