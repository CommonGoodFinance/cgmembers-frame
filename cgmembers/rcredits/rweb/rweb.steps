<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\API as api;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  global $picturePath; 
  list ($picturePath) = explode('sites', __DIR__);
  $picturePath .= 'sites/default/files/pictures';

  global $sms_devel; $sms_devel = TRUE;
  r\dbQ('DELETE FROM users WHERE uid>1000');
  r\dbQ('TRUNCATE r_sms');
  r\dbQ('TRUNCATE r_asif');
  r\dbQ('TRUNCATE r_txs');
  r\dbQ('DELETE FROM r_smarts WHERE owner>1000');
  r\dbQ('DELETE FROM file_managed WHERE uid>1000');
  r\dbQ('TRUNCATE r_relations');
  r\dbQ('TRUNCATE r_log'); // so we don't find results from the wrong test

  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}

  r\acct::_clear(); // empty the acct cache
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: Transact - testAMemberAsksToChargeAnotherMember MAKE
 *     Transact - testAMemberAsksToPayAnotherMember MAKE
 */
function memberCompletesFormWithValues($id, $formName, $values, $confirmed = FALSE) {
global $testOnly; debug(compact(u\ray('id formName values confirmed testOnly')));
//  global $testOnly; if ($testOnly) return FALSE;
  global $testConfirmation; // confirmation message output, if any

  t\logIn($id);
  $form = r\Web\show_form($formName);
  $form_state['values'] = @$values[0]['email'] ? u\changeKey('email', 'mail', $values[0]) : $values[0];

  if (!$confirmed) foreach (t\postProcess($form, 'tx', 'validate') as $one) {
    $one($form, $form_state);
    if ($errors = \drupal_get_messages('error', FALSE)) {
      $errors = $errors['error']; // the only entry in the array
      while (u\abbreviates('Unable to send e-mail', @$errors[0])) array_shift($errors); // ignore this offline
      if (!empty($errors)) debug(compact(u\ray('id formName values confirmed one errors')));
      if (!empty($errors)) return FALSE;
    }
  }
  $testConfirmation = @$form_state['confirm'];
  if ($i = strpos($testConfirmation, '<hr>')) $testConfirmation = substr($testConfirmation, $i + 4);

  foreach (t\postProcess($form, 'tx', 'submit') as $one) $one($form, $form_state);
  return TRUE;
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: Transact - testAMemberConfirmsRequestToChargeAnotherMember MAKE
 *     Transact - testAMemberConfirmsRequestToPayAnotherMember MAKE
 */
function memberConfirmsFormWithValues($id, $formName, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  return memberCompletesFormWithValues($id, $formName, $values, TRUE);
}

/**
 * a member completes form (ARG) with values: (ARG)
 *
 * in: 
 */
function aMemberCompletesFormWithValues($formName, $values) {

}

/*
  $form_state = array();
 * $form_state['values']['mail'] = 'robouser@example.com';
 * $form_state['values']['pass']['pass1'] = 'password';
 * $form_state['values']['pass']['pass2'] = 'password';
 * $form_state['values']['op'] = t('Create new account');
 * drupal_form_submit('user_register_form', $form_state);
 * @endcode
 
 function drupal_get_form($form_id) {
  $form_state = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $form_state['build_info']['args'] = $args;

  return drupal_build_form($form_id, $form_state);
}
 */

/**
 * members: (ARG)
 *
 * in: Relations - featureSetup MAKE
 *     Summary - featureSetup MAKE
 *     Transact - featureSetup MAKE
 *     Transactions - featureSetup MAKE
 */
function members($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeAccount($one)) return FALSE;
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: Relations - featureSetup MAKE
 *     Summary - featureSetup MAKE
 *     Transact - featureSetup MAKE
 *     Transact - testAMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact - testAMemberConfirmsRequestToPayAnotherMember TEST
 *     Transactions - featureSetup MAKE
 *     Transactions - testTransactionsWithOtherStatesShowUpProperly MAKE
 */
function transactions($list) {
  global $testOnly; 

  $function = $testOnly ? 'rCredits\\Testing\\verifyTx' : 'rCredits\\Testing\\makeTransaction';
  foreach ($list as $one) if (!$function($one)) return FALSE;
  return TRUE;
}

/**
 * we say (ARG): (ARG) with subs: (ARG)
 *
 * in: Transact - testAMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact - testAMemberConfirmsRequestToPayAnotherMember TEST
 */
function weSayWithSubs($type, $index, $subs) {
  global $testOnly;

  $msg = t\realFix(u\tt($index, $subs[0]));
  $msgs = drupal_get_messages($type ?: NULL, FALSE);
  $result = (array_search($msg, $msgs[$type]) !== FALSE);
  t\testOutput($msg, 'output');
  return $result;
}

/**
 * we show (ARG) with subs: (ARG)
 *
 * in: Transact - testAMemberAsksToChargeAnotherMember TEST
 *     Transact - testAMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact - testAMemberAsksToPayAnotherMember TEST
 *     Transact - testAMemberConfirmsRequestToPayAnotherMember TEST
 */
function weShowWithSubs($page, $subs) {
  global $testOnly;
  global $testConfirmation; // confirmation message output, if any
  global $formOutput; // for testing
  
  $subs = $subs[0];
  if (u\abbreviates('confirm', $page)) {
    $wanted = u\tt($page, $subs);
    t\testOutput($wanted, 'screen');
    return ($wanted == $testConfirmation);
  }
  $form = strtr(t\strip(r\Web\show_form($page, @$subs['arg1'], @$subs['arg2'])), $subs);
  t\testOutput($form, 'screen');
  return ($form == $formOutput);
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Transact - testAMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact - testAMemberConfirmsRequestToPayAnotherMember TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {
  global $testOnly;
  return t\findEmail($key, $email, $subs);
}

/**
 * we show (ARG)
 *
 * in: 
 */
function weShow($arg1) {
  global $testOnly;
  todo;
}

/**
 * relations: (ARG)
 *
 * in: Relations - testMemberHasAnEmployeeConfirmed MAKE
 *     Relations - testMemberHasAnEmployeeUnconfirmed MAKE
 *     Relations - testMemberHasAnEmployeeClaimed MAKE
 *     Relations - testEmployeeCanOnlyRead MAKE
 *     Relations - testMemberHasAnEmployer MAKE
 *     Relations - testMemberHasAccessToEmployeeAccount MAKE
 *     Relations - testMemberCompanyHasRelations MAKE
 *     Relations - testItsComplicated MAKE
 *     Summary - featureSetup MAKE
 *     Transact - featureSetup MAKE
 *     Transactions - featureSetup MAKE
 */
function relations($relations) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($relations as $one) if (!t\makeRelation($one)) return FALSE;
  return TRUE;
}

/**
 * balances: (ARG)
 *
 * in: Relations - featureSetup TEST
 *     Summary - featureSetup TEST
 *     Transact - featureSetup TEST
 *     Transact - testAMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact - testAMemberConfirmsRequestToPayAnotherMember TEST
 *     Transactions - featureSetup TEST
 *     Transactions - testTransactionsWithOtherStatesShowUpProperly TEST
 */
function balances($list) {
  global $testOnly;
  foreach ($list as $one) if (!t\eq(t\uidCredit(t\uid($one['id']))->balance, $one['balance'])) return FALSE;
  return TRUE;
}

/**
 * member (ARG) visits page (ARG)
 *
 * in: Relations - testMemberHasAnEmployeeConfirmed MAKE
 *     Relations - testMemberHasAnEmployeeUnconfirmed MAKE
 *     Relations - testMemberHasAnEmployeeClaimed MAKE
 *     Relations - testEmployeeCanOnlyRead MAKE
 *     Relations - testMemberHasAnEmployer MAKE
 *     Relations - testMemberHasAccessToEmployeeAccount MAKE
 *     Relations - testMemberCompanyHasRelations MAKE
 *     Relations - testItsComplicated MAKE
 */
function memberVisitsPage($id, $page) {
  global $testOnly; if ($testOnly) return FALSE;
  return memberVisitsPageWithOptions($id, $page, '');
}

/**
 * member (ARG) visits page (ARG) with options (ARG)
 *
 * in: Summary - testAMemberClicksOnTheSummaryTab MAKE
 *     Summary - testAForeignRTraderClicksOnTheSummaryTab MAKE
 *     Transactions - testAMemberLooksAtTransactionsForThePastYear MAKE
 *     Transactions - testAMemberLooksAtTransactionsForThePastFewDays MAKE
 *     Transactions - testTransactionsWithOtherStatesShowUpProperly MAKE
 */
function memberVisitsPageWithOptions($id, $page, $options) {
  global $testOnly; if ($testOnly) return FALSE;

  $cacct = r\acct(); // save, so we can restore it
  r\acct::setDefault(r\acct(t\fullQid($id)));
  global $formShown; $formShown = t\strip(r\Web\show_form($page, $options));
  r\acct::setDefault($cacct);
  return TRUE;
}

/**
 * we show page (ARG) with: (ARG)
 *
 * in: Relations - testMemberHasAnEmployeeConfirmed TEST
 *     Relations - testMemberHasAnEmployeeUnconfirmed TEST
 *     Relations - testMemberHasAnEmployeeClaimed TEST
 *     Relations - testEmployeeCanOnlyRead TEST
 *     Relations - testMemberHasAnEmployer TEST
 *     Relations - testMemberHasAccessToEmployeeAccount TEST
 *     Relations - testMemberCompanyHasRelations TEST
 *     Relations - testItsComplicated TEST
 *     Summary - testAMemberClicksOnTheSummaryTab TEST
 *     Summary - testAForeignRTraderClicksOnTheSummaryTab TEST
 *     Transactions - testAMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions - testAMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions - testTransactionsWithOtherStatesShowUpProperly TEST
 */
function weShowPageWith($page, $content, $showDebugs = TRUE) {
  global $testOnly, $formShown;
  $xi = $i = 0;
  foreach ($content as $fields) {
    foreach ($fields as $key => $one) if (strpos($one, '%') !== FALSE) t\lastMinuteSubs($fields[$key]);
    if ($showDebugs) debug($fields); // keep this
    foreach ($fields as $key => $one) {
      if ($key == 'tid' and substr($one, 0, 1) != 'a' and !TEST_REAL) $one = 'a' . $one;
      if ($one !== '') $i = strpos($formShown, $one, $xi = $i);
      if ($i === FALSE) {
        if ($showDebugs) t\testOutput(substr($formShown, 0, $xi) . ' <b style="font-size:200%;">[OK until here]</b> ' . substr($formShown, $xi));
        if ($showDebugs) t\testOutput(compact('xi','one'));
        return FALSE;
      } else $i++;
    }
  }
  return TRUE;
}


/**
 * we show page (ARG) without: (ARG)
 *
 * in: Relations - testMemberCompanyHasRelations TEST
 *     Relations - testItsComplicated TEST
 *     Transactions - testAMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions - testAMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions - testTransactionsWithOtherStatesShowUpProperly TEST
 */
function weShowPageWithout($page, $content) {
  global $testOnly;
  foreach ($content as $one) if (weShowPageWith($page, array($one), FALSE)) return FALSE;
  return TRUE;
}
