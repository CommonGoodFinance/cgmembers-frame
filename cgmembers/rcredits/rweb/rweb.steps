<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_WEB);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
  $subs['%todayn-12m'] = t\subAgo('%todayn-365d', '%Y%m%d');
  $subs['%todayn'] = t\subAgo('%todayn', '%Y%m%d');
  $subs['%name'] = \user_password(20); // suitable for email address
}

function tlog($msg, $type = 'test', $info = array()) {return u\log($msg, $type, $info);}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: Flow AMemberOverdrawsWithNotEnoughToDrawOn MAKE
 *     Get AMemberMovesCreditToTheBank MAKE
 *     Get AMemberDrawsCreditFromTheBank MAKE
 *     Get AMemberMovesTooLittleToTheBank MAKE
 *     Get AMemberTriesToCashOutRewards MAKE
 *     Get AMemberMovesInconvenientlyMuchToTheBank MAKE
 *     Get AMemberTriesToGoBelowTheirMinimum MAKE
 *     Get AMemberAsksToDoTwoTransfersOutInOneDay MAKE
 *     Gift AMemberContributes MAKE
 *     Gift AMemberContributesWithInsufficientFunds MAKE
 *     Relations AMemberAddsARelation MAKE
 *     TransactR AMemberAsksToChargeAnotherMember MAKE
 *     TransactR AMemberAsksToPayAnotherMember MAKE
 *     TransactUsd AMemberAsksToChargeAnotherMember MAKE
 *     TransactUsd AMemberAsksToPayAnotherMember MAKE
 */
function memberCompletesFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values);}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: Contact AMemberUpdatesContactInfo MAKE
 *     Contact AMemberGivesABadPhone MAKE
 *     Contact AMemberGivesABadEmail MAKE
 *     Flow AMemberOverdraws MAKE
 *     Flow AMemberOverdrawsAndDrawsFromBothRAndUSD MAKE
 *     Membership AMemberSignsInForTheFirstTime MAKE
 *     Membership AMemberGivesTheWrongPassword MAKE
 *     Membership AMemberDoesItAll MAKE
 *     Membership AMemberOpensABusinessAccount MAKE
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob MAKE
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens MAKE
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance MAKE
 *     RealUsd AMemberBuysSomethingWhenDwollaIsDown MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite MAKE
 *     Signup ANewbieRegisters MAKE
 *     Signup ANewbieRegistersWithNoCase MAKE
 *     Signup AMemberRegistersBadEmail MAKE
 *     Signup AMemberRegistersBadName MAKE
 *     Signup AMemberRegistersBadZip MAKE
 *     Signup AMemberRegistersAgain MAKE
 *     Signup AMemberRegistersWithAnExistingCompany MAKE
 *     Signup AMemberRegistersWithAnUnknownCompany MAKE
 *     Signup AMemberRegistersWithACompanyWithNoRelation MAKE
 *     Signup AMemberRegistersWithAMissingCompany MAKE
 *     Signup AMemberRegistersWithAMissingCompanyPhone MAKE
 *     Signup AMemberRegistersWithABadCompany MAKE
 *     Signup AMemberRegistersWithABadCompanyPhone MAKE
 *     Signup AMemberRegistersACompany MAKE
 *     Signup ANewbieRegistersFromElsewhere MAKE
 *     Transactions AMemberConfirmsNO MAKE
 *     Transactions AMemberConfirmsOK MAKE
 *     Transactions AMemberConfirmsOKForADisputedTransaction MAKE
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember MAKE
 *     TransactR AMemberConfirmsRequestToPayAnotherMember MAKE
 *     TransactR AMemberConfirmsRequestToPayAMemberCompany MAKE
 *     TransactR AMemberConfirmsRequestToPayTheSameMemberTheSameAmount MAKE
 *     TransactR AMemberConfirmsRequestToChargeTheSameMemberTheSameAmount MAKE
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember MAKE
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember MAKE
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * a member confirms form (ARG) (which logs out) with values: (ARG)
 *
 * in: 
 */
function aMemberConfirmsFormwhichLogsOutWithValues($page, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  global $skipToStep;
//  $result = t\postLogout(__FUNCTION__) ?: 
  return MemberConfirmsFormWithValues('?', $page, $values);
//  $skipToStep = NULL;
  return $result;
}

/*
  $sta = array();
 * $sta['input']['mail'] = 'robouser@example.com';
 * $sta['input']['pass']['pass1'] = 'password';
 * $sta['input']['pass']['pass2'] = 'password';
 * $sta['input']['op'] = t('Create new account');
 * drupal_form_submit('user_register_form', $sta);
 * @endcode
 
 function drupal_get_form($form_id) {
  $sta = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $sta['build_info']['args'] = $args;

  return drupal_build_form($form_id, $sta);
}
 */

/**
 * members: (ARG)
 *
 * in: Community Setup MAKE
 *     Contact Setup MAKE
 *     Contact AMemberUpdatesContactInfo TEST
 *     Download Setup MAKE
 *     Flow Setup MAKE
 *     Get Setup MAKE
 *     Gift Setup MAKE
 *     Membership Setup MAKE
 *     Membership AMemberSignsInForTheFirstTime TEST
 *     RealUsd Setup MAKE
 *     Relations Setup MAKE
 *     ScanCard Setup MAKE
 *     Signup ANewbieRegisters TEST
 *     Signup ANewbieRegistersWithNoCase TEST
 *     Signup AMemberRegistersAgain MAKE
 *     Signup AMemberRegistersWithAnExistingCompany BOTH
 *     Signup AMemberRegistersWithAnUnknownCompany TEST
 *     Signup AMemberRegistersACompany BOTH
 *     Signup ANewbieRegistersFromElsewhere TEST
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 *     TransactR Setup MAKE
 *     TransactUsd Setup MAKE
 */
function members($list) {return t\members($list);}

/**
 * transactions: (ARG)
 *
 * in: Community Setup MAKE
 *     Download Setup BOTH
 *     Flow AMemberOverdraws TEST
 *     Flow AMemberOverdrawsAndDrawsFromBothRAndUSD TEST
 *     Gift AMemberContributes TEST
 *     RealUsd Setup MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     RealUsd AMemberBuysSomethingWhenDwollaIsDown TEST
 *     Relations Setup MAKE
 *     ScanCard Setup MAKE
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 *     Transactions AMemberClicksNO MAKE
 *     Transactions AMemberConfirmsNO MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastYear MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly MAKE
 *     Transactions AMemberClicksOK MAKE
 *     Transactions AMemberConfirmsOK MAKE
 *     Transactions AMemberConfirmsOKForADisputedTransaction MAKE
 *     TransactR Setup MAKE
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAMemberCompany TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function transactions($list) {return t\transactions($list);}

/**
 * we say (ARG): (ARG) with subs: (ARG)
 *
 * in: Flow AMemberOverdrawsWithNotEnoughToDrawOn TEST
 *     Get AMemberMovesCreditToTheBank TEST
 *     Get AMemberDrawsCreditFromTheBank TEST
 *     Get AMemberTriesToCashOutRewards TEST
 *     Get AMemberMovesInconvenientlyMuchToTheBank TEST
 *     Get AMemberAsksToDoTwoTransfersOutInOneDay TEST
 *     Gift AMemberContributes TEST
 *     Gift AMemberContributesWithInsufficientFunds TEST
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance TEST
 *     Relations AMemberAddsARelation TEST
 *     Signup AMemberRegistersBadName TEST
 *     Signup AMemberRegistersAgain TEST
 *     Signup AMemberRegistersWithAMissingCompany TEST
 *     Signup AMemberRegistersWithAMissingCompanyPhone TEST
 *     Signup AMemberRegistersWithABadCompany TEST
 *     Signup AMemberRegistersWithABadCompanyPhone TEST
 *     Transactions AMemberConfirmsOK TEST
 *     Transactions AMemberConfirmsOKForADisputedTransaction TEST
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAMemberCompany TEST
 *     TransactR AMemberConfirmsRequestToPayTheSameMemberTheSameAmount TEST
 *     TransactR AMemberConfirmsRequestToChargeTheSameMemberTheSameAmount TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weSayWithSubs($type, $index, $subs) {
  global $testOnly;

  $subs = @$subs[0] ?: array();
  if (isset($subs['email'])) t\fixEmail($subs['email']);
  $msg0 = u\tt($index);
  $msg = u\tt($index, $subs);
  foreach ($subs as $key => $value) {
    if (strpos($msg0, "@$key") === FALSE) return t\output("missing sub '$key' in message '$index'");
  }
  $msgs = \drupal_get_messages($type ?: NULL, FALSE);
  $result = (@$msgs[$type] and array_search($msg, $msgs[$type]) !== FALSE);
///  if (!$result) debug(compact('msg','msgs')); // keep
  t\output("EXPECT: $msg", 'output'); // this must come after array_search!
  return $result;
}

/**
 * we say (ARG): (ARG)
 *
 * in: Contact AMemberUpdatesContactInfo TEST
 *     Contact AMemberGivesABadPhone TEST
 *     Contact AMemberGivesABadEmail TEST
 *     Get AMemberMovesTooLittleToTheBank TEST
 *     Get AMemberTriesToGoBelowTheirMinimum TEST
 *     Membership AMemberSignsInForTheFirstTime TEST
 *     Membership AMemberGivesTheWrongPassword MAKE
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob TEST
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure TEST
 *     Signup ANewbieRegisters TEST
 *     Signup AMemberRegistersBadEmail TEST
 *     Signup AMemberRegistersBadZip TEST
 *     Signup AMemberRegistersWithACompanyWithNoRelation TEST
 *     Signup AMemberRegistersACompany TEST
 *     Signup ANewbieRegistersFromElsewhere TEST
 *     Summary MembersAccountIsNotActive TEST
 */
function weSay($type, $index) {
  global $testOnly;
  return weSayWithSubs($type, $index, array());
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Signup ANewbieRegisters TEST
 *     Signup ANewbieRegistersFromElsewhere TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * we tell staff (ARG) with subs: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Gift AMemberContributesWithInsufficientFunds TEST
 *     Membership AMemberDoesItAll TEST
 *     Membership AMemberOpensABusinessAccount TEST
 */
function weTellStaffWithSubs($topic, $subs) {return t\weTellStaff($topic, $subs);}

/**
 * we show (ARG) with subs: (ARG)
 *
 * in: Transactions AMemberClicksNO TEST
 *     Transactions AMemberClicksOK TEST
 *     TransactR AMemberAsksToChargeAnotherMember TEST
 *     TransactR AMemberAsksToPayAnotherMember TEST
 *     TransactUsd AMemberAsksToChargeAnotherMember TEST
 *     TransactUsd AMemberAsksToPayAnotherMember TEST
 */
function weShowWithSubs($page, $subs) {
  global $testOnly;
  global $testConfirmation; // confirmation message output, if any
  global $formOut; // for testing

  $subs = @$subs[0] ?: array(); // comes in as "" if no subs
  if (strpos($page, 'confirm ') !== FALSE) {
    foreach (u\just(R_DATE_FIELDS, $subs) as $k => $v) if (is_numeric($v)) $subs[$k] = u\fmtDate($v);
    $wanted = u\tt($page, $subs);
    t\output("<b>WANTED: </b>$wanted", 'screen');
/**/ debug(compact('wanted','testConfirmation')); // redundant but very easy
    return ($wanted == $testConfirmation);
  }
  $form = strtr(t\strip(r\Web\showForm($page, @$subs['arg1'], @$subs['arg2'])), $subs);
  t\output("<b>WANTED: </b>$form", 'screen');
  if ($form != $formOut['text']) return FALSE;
  unset($subs['arg1']);
  unset($subs['arg2']);
  foreach ($subs as $one) if (strpos($form, $one) === FALSE) return FALSE; // sometimes we dunno what to sub for
  return TRUE;
}

/**
 * we show (ARG) with: (ARG)
 *
 * in: Community CronCalculatesTheStatistics TEST
 *     Contact AMemberVisitsTheContactInfoPage TEST
 *     Get AMemberAsksToDoTwoTransfersOutInOneDay TEST
 *     Membership AMemberSignsInForTheFirstTime TEST
 *     Membership AMemberClicksOnTheMembershipLink TEST
 *     Membership ACompanyAgentClicksOnTheMembershipLink TEST
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     Relations MemberHasAnEmployeeConfirmed TEST
 *     Relations MemberHasAnEmployeeUnconfirmed TEST
 *     Relations MemberHasARelationWithAContractor TEST
 *     Relations MemberHasAnEmployeeClaimed TEST
 *     Relations EmployeeCanOnlyRead TEST
 *     Relations MemberHasAnEmployer TEST
 *     Relations MemberHasAccessToEmployeeAccount TEST
 *     Relations MemberCompanyHasRelations TEST
 *     Relations ItsComplicated TEST
 *     Relations AMemberAddsARelation TEST
 *     ScanCard SomeoneScansACompanyAgentCard TEST
 *     ScanCard SomeoneScansAnOldCompanyAgentCard TEST
 *     Signup ANewbieVisitsTheRegistrationPageWithNoInvite TEST
 *     Signup ANewbieVisitsTheRegistrationPageWithBadInvite TEST
 *     Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite TEST
 *     Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite TEST
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage TEST
 *     Signup ANewbieRegisters TEST
 *     Signup AMemberRegistersACompany TEST
 *     Signup ANewbieRegistersFromElsewhere TEST
 *     Summary AMemberClicksOnTheSummaryTab TEST
 *     Summary AnAgentClicksOnTheSummaryTabWithoutPermissionToManage TEST
 *     Summary AForeignRTraderClicksOnTheSummaryTab TEST
 *     Transactions AMemberClicksNO TEST
 *     Transactions AMemberConfirmsNO TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 *     Transactions AMemberClicksOK TEST
 *     Transactions AMemberConfirmsOK TEST
 *     Transactions AMemberConfirmsOKForADisputedTransaction TEST
 */
function weShowWith($title, $content = FALSE, $showDebugs = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  if ($title and !weShow($title, $showDebugs)) return FALSE;
  return weShow($content, $showDebugs);
}

/**
 * with options: (ARG)
 *
 * in: Signup AMemberRegistersACompany TEST
 */
function withOptions($options, $showDebugs = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  return t\shownWith($options, 'options', $showDebugs);
}

/**
 * without options: (ARG)
 *
 * in: 
 */
function withoutOptions($options) {
  global $testOnly; if (!$testOnly) return FALSE;
  foreach ($options as $one) if (WithOptions(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: Community Setup MAKE
 *     Download Setup MAKE
 *     Flow Setup MAKE
 *     Membership Setup MAKE
 *     Relations MemberHasAnEmployeeConfirmed MAKE
 *     Relations MemberHasAnEmployeeUnconfirmed MAKE
 *     Relations MemberHasARelationWithAContractor MAKE
 *     Relations MemberHasAnEmployeeClaimed MAKE
 *     Relations EmployeeCanOnlyRead MAKE
 *     Relations MemberHasAnEmployer MAKE
 *     Relations MemberHasAccessToEmployeeAccount MAKE
 *     Relations MemberCompanyHasRelations MAKE
 *     Relations ItsComplicated MAKE
 *     ScanCard Setup MAKE
 *     Signup AMemberRegistersWithAnExistingCompany TEST
 *     Signup AMemberRegistersACompany TEST
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 *     TransactR Setup MAKE
 *     TransactUsd Setup MAKE
 */
function relations($relations) {return t\relations($relations);}

/**
 * balances: (ARG)
 *
 * in: Community Setup BOTH
 *     Download Setup BOTH
 *     Flow Setup MAKE
 *     Get Setup MAKE
 *     Gift Setup MAKE
 *     RealUsd Setup MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     RealUsd AMemberConfirmsPaymentWithInsufficientUSDBalance TEST
 *     RealUsd AMemberBuysSomethingWhenDwollaIsDown TEST
 *     Relations Setup TEST
 *     ScanCard Setup BOTH
 *     Signup AMemberRegistersACompany TEST
 *     Summary Setup TEST
 *     Transactions Setup BOTH
 *     Transactions AMemberClicksNO MAKE
 *     Transactions AMemberConfirmsNO MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 *     TransactR Setup TEST
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAMemberCompany TEST
 *     TransactUsd Setup MAKE
 *     TransactUsd AMemberAsksToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function balances($list) {return t\balances($list);}

/**
 * usd: (ARG)
 *
 * in: 
 */
function usd($list) {return t\usd($list);}

/**
 * member (ARG) visits page (ARG)
 *
 * in: Community CronCalculatesTheStatistics MAKE
 *     Contact AMemberVisitsTheContactInfoPage MAKE
 *     Download AMemberDownloadsTransactionsForThePastYear MAKE
 *     Download AMemberDownloadsCompletedTransactionsForThePastYear MAKE
 *     Membership AMemberSignsInForTheFirstTime MAKE
 *     Membership AMemberGivesTheWrongPassword MAKE
 *     Membership AMemberClicksOnTheMembershipLink MAKE
 *     Membership ACompanyAgentClicksOnTheMembershipLink MAKE
 *     Membership AMemberDoesItAll MAKE
 *     Membership AMemberOpensABusinessAccount MAKE
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob MAKE
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens MAKE
 *     Relations MemberHasAnEmployeeConfirmed MAKE
 *     Relations MemberHasAnEmployeeUnconfirmed MAKE
 *     Relations MemberHasARelationWithAContractor MAKE
 *     Relations MemberHasAnEmployeeClaimed MAKE
 *     Relations EmployeeCanOnlyRead MAKE
 *     Relations MemberHasAnEmployer MAKE
 *     Relations MemberHasAccessToEmployeeAccount MAKE
 *     Relations MemberCompanyHasRelations MAKE
 *     Relations ItsComplicated MAKE
 *     ScanCard SomeoneScansAMemberCard MAKE
 *     ScanCard SomeoneScansACompanyAgentCard MAKE
 *     ScanCard SomeoneScansAnOldMemberCard MAKE
 *     ScanCard SomeoneScansAnOldCompanyAgentCard MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithNoInvite MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithBadInvite MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite MAKE
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage MAKE
 *     Signup AMemberRegistersACompany MAKE
 *     Summary AMemberClicksOnTheSummaryTab MAKE
 *     Summary AnAgentClicksOnTheSummaryTabWithoutPermissionToManage MAKE
 *     Summary AForeignRTraderClicksOnTheSummaryTab MAKE
 *     Summary MembersAccountIsNotActive MAKE
 *     Transactions AMemberClicksNO MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastYear MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly MAKE
 *     Transactions AMemberClicksOK MAKE
 */
function memberVisitsPage($id, $page) { // pass options in URL
  global $testOnly; if ($testOnly) return FALSE;
  if (!t\login($id)) return FALSE;
  t\pageForm(t\fixPageArgs($page), FALSE);
  return TRUE;
}

/**
 * member is logged out
 *
 * in: Membership AMemberSignsInForTheFirstTime MAKE
 *     Signup Setup MAKE
 */
function memberIsLoggedOut() {
  global $testOnly;
  u\deb('memberIsLoggedOut top loggedin=' . \user_is_logged_in());
  if ($testOnly) return !\user_is_logged_in();
  r\acct::setDefault(NULL);
  return TRUE; // never actually log out
}

/**
 * invitation to email (ARG) is (ARG)
 *
 * in: Membership AMemberSignsInForTheFirstTime MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithNoInvite MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithBadInvite MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite MAKE
 *     Signup ANewbieVisitsTheRegistrationPageWithAUsedInvite MAKE
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage MAKE
 *     Signup ANewbieRegisters MAKE
 *     Signup ANewbieRegistersWithNoCase MAKE
 *     Signup AMemberRegistersBadEmail MAKE
 *     Signup AMemberRegistersBadName MAKE
 *     Signup AMemberRegistersBadZip MAKE
 *     Signup AMemberRegistersAgain MAKE
 *     Signup AMemberRegistersWithAnExistingCompany MAKE
 *     Signup AMemberRegistersWithAnUnknownCompany MAKE
 *     Signup AMemberRegistersWithACompanyWithNoRelation MAKE
 *     Signup AMemberRegistersWithAMissingCompany MAKE
 *     Signup AMemberRegistersWithAMissingCompanyPhone MAKE
 *     Signup AMemberRegistersWithABadCompany MAKE
 *     Signup AMemberRegistersWithABadCompanyPhone MAKE
 *     Signup AMemberRegistersACompany MAKE
 *     Signup ANewbieRegistersFromElsewhere MAKE
 */
function invitationToEmailIs($email, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  if ($code) r\invite(t\fixEmail($email), 1, $code); // invitation comes (arbitrarily) from uid 1
//  t\SERVER('REQUEST_URI', "whatever/$code"); // fake the URI
  return TRUE;
}

/**
 * no relation: (ARG)
 *
 * in: Signup AMemberRegistersWithAnUnknownCompany TEST
 */
function noRelation($relations) {
  global $testOnly;
  foreach ($relations as $one) if (r\relation(1, t\uid($one['main']), t\uid($one['agent']))) return FALSE;
  return TRUE;
}

/**
 * member (ARG) signs in the first time
 *
 * in: 
 */
function memberSignsInTheFirstTime($uid) {
  global $testOnly; if (!$testOnly) return FALSE;
  memberVisitsPage($uid, 'summary');
  return db\lookup('created=login', 'users', 'uid=' . t\uid($uid));
}

/**
 * member (ARG) account is not active
 *
 * in: Summary MembersAccountIsNotActive MAKE
 */
function memberAccountIsNotActive($id) {
  global $testOnly; if ($testOnly) return FALSE;
  list ($uid, $agent) = r\IA(t\fullQid($id)); // not unQuid
  if (!$uid) return FALSE;
  r\acct($uid)->setBit(B_OK, FALSE);
  return TRUE;
}

/**
 * with done (ARG)
 *
 * in: Membership AMemberClicksOnTheMembershipLink TEST
 *     Membership ACompanyAgentClicksOnTheMembershipLink TEST
 *     Membership AMemberDoesItAll TEST
 *     Membership AMemberOpensABusinessAccount TEST
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob TEST
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure TEST
 */
function withDone($steps) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $formOut;
  return $steps == $formOut['done'];
}

/**
 * member (ARG) has done step (ARG)
 *
 * in: Membership AMemberDoesItAll MAKE
 *     Membership AMemberOpensABusinessAccount MAKE
 */
function memberHasDoneStep($uid, $step) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct($uid = t\uid($uid));

  if ($step == 'photo') return file_put_contents(DRUPAL_ROOT . $a->auxFilename('picture', TRUE), 'whatever');
  if ($step == 'agreement') return $a->update(u\ray('signed', REQUEST_TIME));
  if ($step == 'contribution') return db\insert('r_gifts', u\ray('uid amount', $uid, 123));
  if ($step == 'proxies') return db\q('INSERT INTO r_proxies (person, proxy) VALUES (:uid, 2),(:uid, 3)', compact('uid'));
  
  if ($step == 'contact') {
  }
  if ($step == 'connect') {
    $secure = @$a->secure;
    $secure['bankAccount'] = 'USkk123456789whatever';
    return $a->update(compact('secure'));
  }
  if ($step == 'preferences') return $a->update(u\ray('minimum', 0));
  if ($step == 'invitation') return db\insert('r_invites', u\ray('inviter email code', $uid, 'any@example.com', 'whatever'));
  if ($step == 'company') return $a->update(u\ray('selling', 'stuff'));    
  return FALSE;
}

/**
 * we show (ARG)
 *
 * in: Membership AMemberSignsInForTheFirstTime TEST
 *     Membership AMemberDoesItAll TEST
 *     Membership AMemberOpensABusinessAccount TEST
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob TEST
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure TEST
 */
function weShow($what, $show = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  if ($what === '') return TRUE;
  return t\ShownWith(is_array($what) ? $what : array(u\ray('_', $what)), 'text', $show);
}

/**
 * member (ARG) supplies (ARG): (ARG)
 *
 * in: 
 */
function memberSupplies($uid, $field, $value) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct($uid = t\uid($uid));
  return $a->update(u\ray($field, $value));
}

/**
 * member (ARG) has permission (ARG)
 *
 * in: Membership AMemberDoesItAll MAKE
 *     Membership AMemberOpensABusinessAccount MAKE
 */
function memberHasPermission($uid, $permission) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct(t\uid($uid))->setBit(u\consta('b', $permission), TRUE);
}

/**
 * member (ARG) one-time password is set
 *
 * in: Membership AMemberSignsInForTheFirstTime TEST
 *     Signup ANewbieRegisters TEST
 */
function memberOnetimePasswordIsSet($id) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = r\acct($uid = t\uid($id));
  return (isset($a->data['oneTimePass']['pass']) and $a->data['oneTimePass']['expires'] > REQUEST_TIME);
}

/**
 * member (ARG) one-time password is (ARG)
 *
 * in: Membership AMemberSignsInForTheFirstTime MAKE
 *     Membership AMemberGivesTheWrongPassword MAKE
 */
function memberOnetimePasswordIs($id, $pass) {
  global $testOnly;
  if (!$a = r\acct($uid = t\uid($id))) return FALSE;
  if (!$testOnly) {
    $expires = REQUEST_TIME + R_SIGNIN_HOURS * HOUR_SECS;
    $oneTimePass = compact('pass', 'expires');
    $data = compact('oneTimePass') + ($a->data ?: array());
    $a->update(compact('data'));
  }
  return ($a->data['oneTimePass']['pass'] == $pass and $a->data['oneTimePass']['expires'] > REQUEST_TIME);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Transactions AMemberConfirmsOK TEST
 *     TransactR AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAnotherMember TEST
 *     TransactR AMemberConfirmsRequestToPayAMemberCompany TEST
 *     TransactUsd AMemberConfirmsRequestToChargeAnotherMember TEST
 *     TransactUsd AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * gifts: (ARG)
 *
 * in: Gift AMemberContributes TEST
 *     Gift AMemberContributesWithInsufficientFunds TEST
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we download (ARG) with: (ARG)
 *
 * in: Download AMemberDownloadsTransactionsForThePastYear TEST
 *     Download AMemberDownloadsCompletedTransactionsForThePastYear TEST
 */
function weDownloadWith($name, $rows) {
  global $testOnly;
  global $testCSV, $testCSVname;

  if (@$testCSVname != $name) return t\output("$testCSVname <> $name");
  if (!is_array($testCSV) or empty($testCSV)) return t\output('testCSV empty');
  $testCSV2 = $testCSV; // don't alter this (withDownloadColumns() needs it)
  $headers = array_shift($testCSV2);
  if ($headers[0] == '#') $headers[0] = 't#';
  foreach ($testCSV2 as $csvRow) {
/// debug(compact('headers', 'csvRow'));
    $csvRow = array_combine($headers, $csvRow); // add keys
    if (!$row = array_shift($rows)) return t\output('extra row in CSV: ' . print_r($csvRow, 1));
    foreach ($row as $key => $value) {
///    debug(compact('row','csvRow'));
      if (strpos($value, '%') !== FALSE) $value = t\lastMinuteSubs($value);
///      if (!isset($csvRow[$key])) debug(compact('key', 'csvRow', 'value'));
      if (!t\eq($csvValue = $csvRow[$key], $value)) return t\output("key=$key csvValue<>value: $csvValue<>$value");
    }
  }
  return TRUE;
}

/**
 * with download columns: (ARG)
 *
 * in: Download AMemberDownloadsTransactionsForThePastYear TEST
 */
function withDownloadColumns($columns) {
  global $testOnly;
  global $testCSV, $testCSVname;

  if (!is_array($testCSV) or empty($testCSV)) return FALSE;
  $testCSV2 = $testCSV; // don't alter this (just in case)
  $headers = array_shift($testCSV2);
/// debug(compact('headers','testCSV','columns'));
  foreach ($columns as $one) if (array_search($one['column'], $headers) === FALSE) return FALSE;
  return TRUE;
}

/**
 * Dwolla is down
 *
 * in: RealUsd AMemberBuysSomethingWhenDwollaIsDown MAKE
 */
function dwollaIsDown() {
  global $testOnly; if ($testOnly) return FALSE;
  global $dwollaDown; return $dwollaDown = TRUE;
}

/**
 * usd transfers: (ARG)
 *
 * in: Community Setup MAKE
 *     Download Setup MAKE
 *     Get Setup MAKE
 *     Get AMemberMovesCreditToTheBank TEST
 *     Get AMemberDrawsCreditFromTheBank TEST
 *     Get AMemberAsksToDoTwoTransfersOutInOneDay MAKE
 *     RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 */
function usdTransfers($tx) {return t\usdTransfers($tx);}


/**
 * usd transfer count is (ARG)
 *
 * in: RealUsd AMemberBuysSomethingWhenDwollaIsDown TEST
 */
function usdTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * member (ARG) scans member card (ARG)
 *
 * in: 
 */
function memberScansMemberCard($id1, $id2) {
  global $testOnly; if ($testOnly) return FALSE;
  t\logIn($id1);
  
}

/**
 * member (ARG) card code is (ARG)
 *
 * in: 
 */
function memberCardCodeIs($id, $cardCode) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $secure = compact('cardCode') + ($a->secure ?: array());
  return $a->update(compact('secure'));
}

/**
 * agent (ARG) card code is (ARG)
 *
 * in: 
 */
function agentCardCodeIs($id, $cardCode2) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $secure = compact('cardCode2') + ($a->secure ?: array());
  return $a->update(compact('secure'));
}

/**
 * cron runs (ARG)
 *
 * in: Community Setup MAKE
 *     Community CronCalculatesTheStatistics MAKE
 *     Download Setup MAKE
 *     Summary Setup MAKE
 *     Transactions Setup MAKE
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * member (ARG) has a dwolla account, step (ARG)
 *
 * in: 
 */
function memberHasADwollaAccountStep($id, $step) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $us = new rCredits\usd($a);
  return ($us->step() == $step);
}

/**
 * without: (ARG)
 *
 * in: Membership ACompanyAgentClicksOnTheMembershipLink TEST
 *     Relations MemberCompanyHasRelations TEST
 *     Relations ItsComplicated TEST
 *     Signup AnInvitedNewbieVisitsTheRegistrationPage TEST
 *     Summary AnAgentClicksOnTheSummaryTabWithoutPermissionToManage TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 */
function without($content) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (!is_array($content)) return !weShow($content, FALSE);
  foreach ($content as $one) if (weShow(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * statistics get set (ARG)
 *
 * in: Community Setup MAKE
 */
function statisticsGetSet($time) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\getStats(r\serverUid(), $time) ? TRUE : FALSE;
}

/**
 * we show (ARG) without: (ARG)
 *
 * in: 
 */
function weShowWithout($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * with: (ARG)
 *
 * in: RealUsd AMixedRCreditsUSDTransactionHappens TEST
 *     Relations ItsComplicated TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 */
function with($content) {return weShow($content);}

/**
 * members have: (ARG)
 *
 * in: Membership AMemberDoesItAll MAKE
 *     Membership AMemberOpensABusinessAccount MAKE
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob MAKE
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure MAKE
 *     Summary Setup MAKE
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * we redirect to (ARG)
 *
 * in: ScanCard SomeoneScansAMemberCard TEST
 *     ScanCard SomeoneScansAnOldMemberCard TEST
 */
function weRedirectTo($page) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $lastGo;
  return ($lastGo == $page);
}

/**
 * member (ARG) is on step (ARG) within (ARG) seconds
 *
 * in: Membership AMemberSignsInForTheFirstTime TEST
 *     Membership AMemberDoesItAll TEST
 *     Membership AMemberOpensABusinessAccount TEST
 *     Membership AMemberTypesTheWrongAccountInfonameSsnOrDob TEST
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure TEST
 */
function memberIsOnStepWithinSeconds($id, $step, $secs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $us = new r\usd(r\acct(t\uid($id)));
  for ($i = 0; $i < $secs; $i++) {
    sleep(1);
    if ($us->step() == $step) return TRUE;
  }
  return FALSE;
}

/**
 * member (ARG) chose to verify phone by (ARG)
 *
 * in: Membership AMemberTypesTheWrongAccountInfonameSsnOrDob MAKE
 *     Membership AMemberCompanyTypesTheWrongAccountInfonameEinOrBusinessStructure MAKE
 */
function memberChoseToVerifyPhoneBy($id, $verifyBy) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\uid($id));
  return $a->update(u\ray('data', compact('verifyBy') + $a->data));
}

/**
 * account (ARG) was set up by member (ARG)
 *
 * in: Membership AMemberOpensABusinessAccount MAKE
 */
function accountWasSetUpByMember($coId, $id) {
  global $testOnly; if ($testOnly) return FALSE;
  $by = t\uid($id);
  $co = r\acct(t\uid($coId));
  return $co->update(u\ray('data', compact('by') + $co->data));
}

/**
 * next DO code is (ARG)
 *
 * in: Gift AMemberContributes MAKE
 *     Transactions AMemberConfirmsOK MAKE
 *     TransactR AMemberConfirmsRequestToPayAMemberCompany MAKE
 */
function nextDOCodeIs($code) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testDoCode;
  return $testDoCode = $code;
}

/**
 * invitation (ARG) was sent on (ARG)
 *
 * in: Signup ANewbieVisitsTheRegistrationPageWithExpiredInvite MAKE
 */
function invitationWasSentOn($code, $dt) {
  global $testOnly; if ($testOnly) return FALSE;
  return db\q("UPDATE r_invites SET invited='$dt' WHERE code='$code'");
}
