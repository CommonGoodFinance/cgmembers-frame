<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */
use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;
use CG\Web as w;

require_once __DIR__ . '/../defs.inc';

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
}

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup() {
  t\clear(TX_WEB);
}

function tlog($msg, $type = 'test', $info = array()) {return u\log($msg, $type, $info);}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: MAKE backing AMemberChangesBackingAmount
 *     MAKE bank AMemberMovesCreditToTheBank
 *     MAKE bank AMemberDrawsCreditFromTheBankWithZeroFloor
 *     MAKE bank AMemberDrawsCreditFromTheBankWithAdequateFloor
 *     MAKE bank AMemberMovesTooLittleToTheBank
 *     MAKE bank AMemberMovesTooMuchToTheBank
 *     MAKE bank AMemberTriesToGoBelowTheirMinimum
 *     MAKE bank AMemberAsksToDoTwoTransfersOutInOneDay
 *     MAKE bank AMemberDrawsCreditFromTheBankThenCancels
 *     MAKE connect AMemberConnectsABankAccount
 *     MAKE coupons AMemberCompanyCreatesAGiftCoupon
 *     MAKE coupons AMemberRedeemsAGiftCoupon
 *     MAKE coupons AMemberCompanyCreatesADollarAmountDiscountCoupon
 *     MAKE coupons AMemberCompanyCreatesARestrictedDollarAmountDiscountCoupon
 *     MAKE flow AMemberOverdrawsWithNotEnoughToDrawOn
 *     MAKE food AMemberMakesAFoodDonation
 *     MAKE food AMemberMakesAFoodDonationWithoutAdequateFunds
 *     MAKE gift AMemberDonates
 *     MAKE gift AMemberMakesARecurringDonation
 *     MAKE gift AMemberMakesANewRecurringDonation
 *     MAKE gift ACompanyMakesARecurringDonation
 *     MAKE gift AMemberDonatesWithInsufficientFunds
 *     MAKE invest AMemberJoinsTheInvestmentClub
 *     MAKE invest AMemberCompanyJoinsTheInvestmentClub
 *     MAKE invest AMemberBuysAStakeInTheClub
 *     MAKE invest TheClubAddsAProposedInvestment
 *     MAKE invest MembersRateAProposedInvestment
 *     MAKE invest TheClubBuysShares
 *     MAKE invest TheClubSellsShares
 *     MAKE invest TheClubSellsItsRemainingSharesInAnInvestment
 *     MAKE invest MembersIncreaseAndDecreaseTheirStakes
 *     MAKE invest AMemberTriesToDecreaseStakeBelowZero
 *     MAKE invest AClubAdministratorHandlesRequestsToCashOut
 *     MAKE invest TheInvestmentClubIssuesDividends
 *     MAKE invest MembersRateAProposedLoan
 *     MAKE invest TheClubMakesALoan
 *     MAKE joint AJoinedAccountSlaveMemberRequestsANewMinimum
 *     MAKE joint AMemberCreatesAJointAccountByClickingTheSummaryPageButton
 *     MAKE membership AMemberSignsInForTheFirstTime
 *     MAKE paybutton AMemberAsksForANewPasswordForUsername
 *     MAKE paybutton AMemberAsksForANewPasswordForAccountID
 *     MAKE paybutton AMemberAsksForANewPasswordForEmail
 *     MAKE paybutton AMemberAsksForANewPasswordForAnUnknownAccount
 *     MAKE paybutton AMemberAsksForANewPasswordForACompany
 *     MAKE paybutton AMemberClicksALinkToResetPassword
 *     MAKE paybutton AMemberClicksALinkToResetPasswordWithWrongCode
 *     MAKE paybutton AMemberClicksALinkToResetPasswordForUnknownAccount
 *     MAKE preferences AMemberChangesPreferences
 *     MAKE signin AMemberAsksForANewPasswordForUsername
 *     MAKE signin AMemberAsksForANewPasswordForAccountID
 *     MAKE signin AMemberAsksForANewPasswordForEmail
 *     MAKE signin AMemberAsksForANewPasswordForAnUnknownAccount
 *     MAKE signin AMemberAsksForANewPasswordForACompany
 *     MAKE signin AMemberClicksALinkToResetPassword
 *     MAKE signin AMemberClicksALinkToResetPasswordWithWrongCode
 *     MAKE signin AMemberClicksALinkToResetPasswordForUnknownAccount
 *     MAKE transact AMemberAsksToChargeAnotherMemberForGoods
 *     MAKE transact AMemberAsksToPayAnotherMemberForGoods
 *     MAKE transact AMemberAsksToPayAnotherMemberForLoanreimbursement
 *     MAKE transact ANewMemberAsksToPayAnotherMemberBeforeMakingACommonGoodCardPurchase
 */
function memberCompletesFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values);}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: MAKE company AMemberUpdatesCompanyInfo
 *     MAKE company AMemberGivesABadEmployeeCount
 *     MAKE company AMemberGivesABadGross
 *     MAKE contact AMemberUpdatesContactInfo
 *     MAKE contact AMemberGivesABadPhone
 *     MAKE contact AMemberGivesABadEmail
 *     MAKE contact AMemberUpdatesToADifferentState
 *     MAKE contact AMemberUpdatesToADifferentName
 *     MAKE coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsAPercentageDiscountCoupon
 *     MAKE coupons AMemberRedeemsARestrictedDiscountCoupon
 *     MAKE coupons AMemberRedeemsADiscountCouponInDribsAndDrabs
 *     MAKE coupons AMemberWithNothingRedeemsAZeroMinimumDiscountCoupon
 *     MAKE coupons AMemberRedeemsADiscountCouponSponsoredByAThirdParty
 *     MAKE flow AMemberDraws
 *     MAKE flow AMemberDrawsAgain
 *     MAKE invoice AMemberConfirmsRequestToChargeAnotherMember
 *     MAKE invoice AMemberConfirmsRequestToChargeAnotherMemberWhoHasABankAccount
 *     MAKE invoice AMemberConfirmsRequestToChargeANotyetMember
 *     MAKE invoice AMemberDeniesAnInvoice
 *     MAKE invoice AMemberApprovesAnInvoiceWithInsufficientFunds
 *     MAKE invoice AMemberApprovesInvoicesForevermore
 *     MAKE invoice AMemberApprovesAnInvoiceToATrustingCustomer
 *     MAKE joint AMemberRequestsAJointAccount
 *     MAKE membership AMemberSignsInForTheFirstTime
 *     MAKE partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     MAKE paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     MAKE paybutton AMemberSignsInWithUsernameOnTheMemberSite
 *     MAKE paybutton AMemberSignsInWithAccountIDOnTheMemberSite
 *     MAKE paybutton AMemberSignsInWithEmailOnTheMemberSite
 *     MAKE paybutton AMemberTypesTheWrongPassword
 *     MAKE paybutton AMemberTypesAnUnknownUsernameID
 *     MAKE paybutton AMemberClicksALinkToResetPassword
 *     MAKE signin AMemberSignsInWithUsernameOnTheMemberSite
 *     MAKE signin AMemberSignsInWithAccountIDOnTheMemberSite
 *     MAKE signin AMemberSignsInWithEmailOnTheMemberSite
 *     MAKE signin AMemberTypesTheWrongPassword
 *     MAKE signin AMemberTypesAnUnknownUsernameID
 *     MAKE signin AMemberClicksALinkToResetPassword
 *     MAKE signupco AMemberRegistersACompany
 *     MAKE signupco AMemberRegistersACompanyWhileManagingAnotherAccount
 *     MAKE signupco AMemberRegistersACompanyHavingGivenCompanyInfo
 *     MAKE signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     MAKE signup ANewbieRegistersInWesternMassachusetts
 *     MAKE signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     MAKE signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     MAKE signup ANewbieRegistersWithADifferentLegalName
 *     MAKE signup ANewbieRegistersFromElsewhere
 *     MAKE signup ANewbieRegistersWithNoCase
 *     MAKE signup AMemberRegistersBadEmail
 *     MAKE signup AMemberRegistersBadName
 *     MAKE signup AMemberRegistersBadZip
 *     MAKE signup AMemberRegistersAgain
 *     MAKE signup AMemberRegistersWithAnExistingCompany
 *     MAKE signup AMemberRegistersWithAnUnknownCompany
 *     MAKE signup AMemberRegistersWithACompanyWithNoRelation
 *     MAKE signup AMemberRegistersWithABadCompanyPhone
 *     MAKE transact AMemberConfirmsRequestToChargeAnotherMember
 *     MAKE transact AMemberConfirmsRequestToPayAnotherMember
 *     MAKE transact AMemberConfirmsRequestToPayAnotherMemberALot
 *     MAKE transact AMemberConfirmsRequestToPayAMemberCompany
 *     MAKE transact AMemberPaysAnotherMemberRepeatedly
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * a member confirms form (ARG) (which logs out) with values: (ARG)
 *
 * in: 
 */
function aMemberConfirmsFormwhichLogsOutWithValues($page, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  global $skipToStep;
  //  $result = t\postLogout(__FUNCTION__) ?: 
  return MemberConfirmsFormWithValues('?', $page, $values);
  //  $skipToStep = NULL;
  return $result;
}

/*
  $sta = array();
  * $sta['input']['mail'] = 'robouser@example.com';
  * $sta['input']['pass']['pass1'] = 'password';
  * $sta['input']['pass']['pass2'] = 'password';
  * $sta['input']['op'] = t('Create new account');
  * drupal_form_submit('user_register_form', $sta);
  * @endcode
 
  function drupal_get_form($form_id) {
  $sta = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $sta['build_info']['args'] = $args;

  return drupal_build_form($form_id, $sta);
  }
*/

/**
 * members: (ARG)
 *
 * in: MAKE backing Setup
 *     TEST backing AMemberChangesBackingAmount
 *     MAKE balancesheet Setup
 *     MAKE bank Setup
 *     MAKE community Setup
 *     MAKE company Setup
 *     TEST company AMemberUpdatesCompanyInfo
 *     MAKE connect Setup
 *     MAKE contact Setup
 *     TEST contact AMemberUpdatesContactInfo
 *     TEST contact AMemberUpdatesToADifferentState
 *     TEST contact AMemberUpdatesToADifferentName
 *     MAKE coupons Setup
 *     MAKE custstatement Setup
 *     MAKE demographics Setup
 *     MAKE download Setup
 *     MAKE flow Setup
 *     MAKE food Setup
 *     MAKE gift Setup
 *     MAKE invest Setup
 *     MAKE invoice Setup
 *     MAKE joint Setup
 *     MAKE membership Setup
 *     TEST membership AMemberSignsInForTheFirstTime
 *     MAKE partnersignup Setup
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     MAKE partnersignup AMemberVisitsTheRegistrationPageSentByAPartner
 *     MAKE paybutton Setup
 *     MAKE preferences Setup
 *     TEST preferences AMemberChangesPreferences
 *     MAKE queries Setup
 *     MAKE relations Setup
 *     MAKE scancard Setup
 *     MAKE showrecurs Setup
 *     MAKE signin Setup
 *     MAKE signin AMemberAsksForANewPasswordForACompany
 *     MAKE signout Setup
 *     MAKE signupco Setup
 *     TEST signupco AMemberRegistersACompany
 *     MAKE signup Setup
 *     TEST signup ANewbieRegistersInWesternMassachusetts
 *     TEST signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     TEST signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     TEST signup ANewbieRegistersWithADifferentLegalName
 *     TEST signup ANewbieRegistersFromElsewhere
 *     TEST signup ANewbieRegistersWithNoCase
 *     MAKE signup AMemberRegistersAgain
 *     BOTH signup AMemberRegistersWithAnExistingCompany
 *     TEST signup AMemberRegistersWithAnUnknownCompany
 *     MAKE statement Setup
 *     MAKE summary Setup
 *     MAKE transact Setup
 *     MAKE transactions Setup
 */
function members($list) {return t\members($list);}

/**
 * transactions: (ARG)
 *
 * in: MAKE backing AMemberChangesBackingAmount
 *     MAKE balancesheet Setup
 *     MAKE bank Setup
 *     TEST bank AMemberDrawsCreditFromTheBankWithZeroFloor
 *     TEST bank AMemberDrawsCreditFromTheBankThenCancels
 *     MAKE community Setup
 *     MAKE custstatement Setup
 *     MAKE demographics Setup
 *     MAKE download Setup
 *     TEST gift AMemberDonates
 *     TEST gift AMemberMakesARecurringDonation
 *     TEST gift AMemberMakesANewRecurringDonation
 *     TEST gift ACompanyMakesARecurringDonation
 *     TEST invest AMemberBuysAStakeInTheClub
 *     MAKE invest MembersIncreaseAndDecreaseTheirStakes
 *     BOTH invest AClubAdministratorHandlesRequestsToCashOut
 *     BOTH invest TheInvestmentClubIssuesDividends
 *     TEST invoice AMemberConfirmsRequestToChargeAnotherMember
 *     TEST invoice AMemberApprovesAnInvoiceToATrustingCustomer
 *     MAKE joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     MAKE joint AJoinedAccountMemberUnjoinsTheAccount
 *     TEST paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     MAKE preferences AMemberChangesPreferences
 *     MAKE queries Setup
 *     MAKE statement Setup
 *     MAKE summary Setup
 *     MAKE summary AMemberClicksTheSummaryTabWithRoundups
 *     TEST transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST transact AMemberConfirmsRequestToPayAnotherMemberALot
 *     TEST transact AMemberConfirmsRequestToPayAMemberCompany
 *     TEST transact AMemberPaysAnotherMemberRepeatedly
 *     MAKE transactions Setup
 *     MAKE transactions AMemberLooksAtTransactionsWithRoundups
 */
function transactions($list) {return t\transactions($list);}

/**
 * we say (ARG): (ARG) with subs: (ARG)
 *
 * in: TEST bank AMemberMovesCreditToTheBank
 *     TEST bank AMemberDrawsCreditFromTheBankWithZeroFloor
 *     TEST bank AMemberDrawsCreditFromTheBankWithAdequateFloor
 *     TEST bank AMemberMovesTooMuchToTheBank
 *     TEST bank AMemberAsksToDoTwoTransfersOutInOneDay
 *     TEST coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     TEST flow AMemberOverdrawsWithNotEnoughToDrawOn
 *     TEST invest AMemberBuysAStakeInTheClub
 *     TEST invest MembersRateAProposedInvestment
 *     TEST invest TheClubBuysShares
 *     TEST invest TheClubSellsShares
 *     TEST invest TheClubSellsItsRemainingSharesInAnInvestment
 *     TEST invest MembersIncreaseAndDecreaseTheirStakes
 *     TEST invest TheInvestmentClubIssuesDividends
 *     TEST invest MembersRateAProposedLoan
 *     TEST invest TheClubMakesALoan
 *     TEST invoice AMemberApprovesAnInvoiceWithInsufficientFunds
 *     TEST joint AMemberRequestsAJointAccount
 *     TEST joint AMemberRequestsTwoJoinsAtOnce
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST partnersignup AMemberVisitsTheRegistrationPageSentByAPartner
 *     TEST paybutton AMemberAsksForANewPasswordForACompany
 *     TEST relations AMemberAddsARelation
 *     TEST signin AMemberAsksForANewPasswordForACompany
 *     TEST signup AMemberRegistersBadName
 *     TEST signup AMemberRegistersAgain
 *     TEST signup AMemberRegistersWithABadCompanyPhone
 *     TEST transact AMemberConfirmsRequestToChargeAnotherMember
 *     TEST transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST transact AMemberConfirmsRequestToPayAMemberCompany
 *     TEST transact ANewMemberAsksToPayAnotherMemberBeforeMakingACommonGoodCardPurchase
 *     TEST transact AMemberPaysAnotherMemberRepeatedly
 */
function weSayWithSubs($type, $index, $subs) {return t\weSayWithSubs($type, $index, $subs);}

/**
 * we say (ARG): (ARG)
 *
 * in: TEST backing AMemberChangesBackingAmount
 *     TEST bank AMemberMovesTooLittleToTheBank
 *     TEST bank AMemberTriesToGoBelowTheirMinimum
 *     TEST company AMemberUpdatesCompanyInfo
 *     TEST contact AMemberUpdatesContactInfo
 *     TEST contact AMemberGivesABadPhone
 *     TEST contact AMemberGivesABadEmail
 *     TEST contact AMemberUpdatesToADifferentState
 *     TEST contact AMemberUpdatesToADifferentName
 *     TEST coupons AMemberRedeemsAGiftCoupon
 *     TEST coupons AMemberRedeemsADiscountCouponInDribsAndDrabs
 *     TEST coupons AMemberWithNothingRedeemsAZeroMinimumDiscountCoupon
 *     TEST coupons AMemberRedeemsADiscountCouponSponsoredByAThirdParty
 *     TEST food AMemberMakesAFoodDonation
 *     TEST food AMemberMakesAFoodDonationWithoutAdequateFunds
 *     TEST gift AMemberDonates
 *     TEST gift AMemberMakesARecurringDonation
 *     TEST gift AMemberMakesANewRecurringDonation
 *     TEST gift ACompanyMakesARecurringDonation
 *     TEST gift AMemberDonatesWithInsufficientFunds
 *     TEST invest AMemberJoinsTheInvestmentClub
 *     TEST invest AMemberCompanyJoinsTheInvestmentClub
 *     TEST invest TheClubAddsAProposedInvestment
 *     TEST invest AMemberTriesToDecreaseStakeBelowZero
 *     TEST invest AClubAdministratorHandlesRequestsToCashOut
 *     TEST invoice AMemberConfirmsRequestToChargeANotyetMember
 *     TEST joint AMemberCreatesAJointAccountByClickingTheSummaryPageButton
 *     TEST membership AMemberSignsInForTheFirstTime
 *     TEST paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     TEST paybutton AMemberTypesTheWrongPassword
 *     TEST paybutton AMemberTypesAnUnknownUsernameID
 *     TEST paybutton AMemberAsksForANewPasswordForAnUnknownAccount
 *     TEST paybutton AMemberClicksALinkToResetPasswordWithWrongCode
 *     TEST paybutton AMemberClicksALinkToResetPasswordForUnknownAccount
 *     TEST relations AMemberTriesToAddARelationWithSelf
 *     TEST relations AMemberTriesToAddARelationAgain
 *     TEST showrecurs AMemberStopsARecurringTransaction
 *     TEST showrecurs AMemberStopsAStoppedRecurringTransaction
 *     TEST showrecurs AMemberAttemptsToStopANonexistentRecurringTransaction
 *     TEST showrecurs AMemberAttemptsToStopAnotherMembersRecurringTransaction
 *     TEST showrecurs AMemberStopsAnAutopayment
 *     TEST signin AMemberTypesTheWrongPassword
 *     TEST signin AMemberTypesAnUnknownUsernameID
 *     TEST signin AMemberAsksForANewPasswordForAnUnknownAccount
 *     TEST signin AMemberClicksALinkToResetPasswordWithWrongCode
 *     TEST signin AMemberClicksALinkToResetPasswordForUnknownAccount
 *     TEST signupco AMemberRegistersACompany
 *     TEST signup ANewbieRegistersInWesternMassachusetts
 *     TEST signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     TEST signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     TEST signup ANewbieRegistersFromElsewhere
 *     TEST signup AMemberRegistersBadEmail
 *     TEST signup AMemberRegistersBadZip
 *     TEST signup AMemberRegistersWithACompanyWithNoRelation
 */
function weSay($type, $index) {return weSayWithSubs($type, $index, array());}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST membership AMemberSignsInForTheFirstTime
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST paybutton AMemberAsksForANewPasswordForUsername
 *     TEST paybutton AMemberAsksForANewPasswordForAccountID
 *     TEST paybutton AMemberAsksForANewPasswordForEmail
 *     TEST signin AMemberAsksForANewPasswordForUsername
 *     TEST signin AMemberAsksForANewPasswordForAccountID
 *     TEST signin AMemberAsksForANewPasswordForEmail
 *     TEST signup ANewbieRegistersInWesternMassachusetts
 *     TEST signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     TEST signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     TEST signup ANewbieRegistersFromElsewhere
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * we tell admin (ARG) with subs: (ARG)
 *
 * in: 
 */
function weTellAdminWithSubs($topic, $subs) {return t\weTellAdmin($topic, $subs);}

/**
 * we show (ARG)
 *
 * in: TEST food ANonmemberVisitsTheFoodPage
 *     TEST food AMemberSignsInAndSeesLink
 *     TEST food AMemberMakesAFoodDonation
 *     TEST food AMemberMakesAFoodDonationWithoutAdequateFunds
 *     TEST invest AMemberJoinsTheInvestmentClub
 *     TEST invest AMemberCompanyJoinsTheInvestmentClub
 *     TEST membership AMemberSignsInForTheFirstTime
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST paybutton AMemberSignsInWithUsernameOnTheMemberSite
 *     TEST paybutton AMemberSignsInWithAccountIDOnTheMemberSite
 *     TEST paybutton AMemberSignsInWithEmailOnTheMemberSite
 *     TEST paybutton AMemberClicksALinkToResetPassword
 *     TEST paybutton AMemberClicksALinkToResetPasswordWithWrongCode
 *     TEST paybutton AMemberClicksALinkToResetPasswordForUnknownAccount
 *     TEST signin AMemberSignsInWithUsernameOnTheMemberSite
 *     TEST signin AMemberSignsInWithAccountIDOnTheMemberSite
 *     TEST signin AMemberSignsInWithEmailOnTheMemberSite
 *     TEST signin AMemberClicksALinkToResetPassword
 *     TEST signin AMemberClicksALinkToResetPasswordWithWrongCode
 *     TEST signin AMemberClicksALinkToResetPasswordForUnknownAccount
 *     TEST signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 *     TEST signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     TEST signup ANewbieRegistersInWesternMassachusetts
 *     TEST signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     TEST signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     TEST signup ANewbieRegistersFromElsewhere
 *     TEST summary MembersAccountIsNotActive
 */
function weShow($what, $show = TRUE) {return t\weShow($what, $show);}

/**
 * we show (ARG) with subs: (ARG)
 *
 * in: 
 */
function weShowWithSubs($page, $subs) {return t\weShowWithSubs($page, $subs);}

/**
 * we show (ARG) with: (ARG)
 *
 * in: TEST backing AMemberVisitsTheBackingPage
 *     TEST balancesheet AMemberLooksAtTheBalanceSheet
 *     TEST balancesheet ANonmemberLooksAtTheBalanceSheet
 *     TEST bank AMemberAsksToDoTwoTransfersOutInOneDay
 *     TEST community CronCalculatesTheStatistics
 *     TEST company AMemberVisitsTheCompanyInfoPage
 *     TEST connect AMemberConnectsABankAccount
 *     TEST contact AMemberVisitsTheContactInfoPage
 *     TEST coupons AMemberCompanyCreatesAGiftCoupon
 *     TEST coupons AMemberCompanyCreatesADollarAmountDiscountCoupon
 *     TEST coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     TEST coupons AMemberRedeemsAPercentageDiscountCoupon
 *     TEST coupons AMemberCompanyCreatesARestrictedDollarAmountDiscountCoupon
 *     TEST coupons AMemberRedeemsARestrictedDiscountCoupon
 *     TEST custstatement ACompanyLooksAtACustomerStatement
 *     TEST demographics ACompanyAgentRunsTheDemographicsQuery
 *     TEST gift AMemberDonates
 *     TEST gift AMemberMakesANewRecurringDonation
 *     TEST invest AMemberJoinsTheInvestmentClub
 *     TEST invest AMemberCompanyJoinsTheInvestmentClub
 *     TEST invest AnAdministratorViewsTheInvestmentPage
 *     TEST invest TheClubAddsAProposedInvestment
 *     TEST invest MembersRateAProposedInvestment
 *     TEST invest TheClubBuysShares
 *     TEST invest TheClubSellsShares
 *     TEST invest MembersIncreaseAndDecreaseTheirStakes
 *     TEST invest AClubAdministratorHandlesRequestsToCashOut
 *     TEST invest TheInvestmentClubIssuesDividends
 *     TEST invest MembersRateAProposedLoan
 *     TEST invest TheClubMakesALoan
 *     TEST invoice AMemberConfirmsRequestToChargeAnotherMember
 *     TEST invoice AMemberConfirmsRequestToChargeANotyetMember
 *     TEST joint AMemberRequestsAJointAccount
 *     TEST joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     TEST joint AMemberRequestsTwoJoinsAtOnce
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST paybutton AMemberClicksAPayWithCommonGoodButton
 *     TEST paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     TEST preferences AMemberVisitsThePreferencesPage
 *     TEST preferences ACompanyAgentVisitsThePreferencesPage
 *     TEST queries AMemberVisitsTheCommunityDataPage
 *     TEST queries AnAdminVisitsTheCommunityDataPage
 *     TEST queries AnAdminRunsAQueryAboutFoodFund
 *     TEST queries AnAdminRunsAQueryAboutTrustedMembers
 *     TEST queries AMemberRunsAQueryAboutEmployees
 *     TEST queries AMemberRunsAQueryAboutTransactionTotals
 *     TEST queries AMemberRunsAQueryAboutBusinessIncome
 *     TEST queries AMemberRunsAQueryAboutPositiveAndNegative
 *     TEST queries AMemberRunsAQueryAboutBalances
 *     TEST queries AMemberRunsAQueryAboutActualDonations
 *     TEST queries AMemberRunsAQueryAboutExpectedMemberDonations
 *     TEST queries AMemberRunsAQueryAboutExpectedCompanyDonations
 *     TEST queries AMemberRunsAQueryAboutWhence
 *     TEST relations MemberHasAnEmployeeConfirmed
 *     TEST relations MemberHasAnEmployeeUnconfirmed
 *     TEST relations MemberHasARelationWithAContractor
 *     TEST relations MemberHasAnEmployeeClaimed
 *     TEST relations EmployeeCanOnlyRead
 *     TEST relations MemberHasAnEmployer
 *     TEST relations MemberHasAccessToEmployeeAccount
 *     TEST relations MemberCompanyHasRelations
 *     TEST relations ItsComplicated
 *     TEST relations AMemberAddsARelation
 *     TEST scancard SomeoneScansACompanyAgentCard
 *     TEST showrecurs AMemberLooksAtTheirRecurringPayments
 *     TEST showrecurs AMemberStopsARecurringTransaction
 *     TEST showrecurs AMemberStopsAStoppedRecurringTransaction
 *     TEST showrecurs AMemberAttemptsToStopANonexistentRecurringTransaction
 *     TEST showrecurs AMemberAttemptsToStopAnotherMembersRecurringTransaction
 *     TEST showrecurs AMemberStopsAnAutopayment
 *     TEST signin AMemberVisitsTheMemberSite
 *     TEST signupco AMemberRegistersACompany
 *     TEST statement AMemberLooksAtAStatementForPreviousMonth
 *     TEST summary AMemberClicksTheSummaryTab
 *     TEST summary AMemberClicksTheSummaryTabWithRoundups
 *     TEST summary AnAgentClicksTheSummaryTabWithoutPermissionToManage
 *     TEST summary ACompanyAgentClicksTheSummaryTab
 *     TEST transactions AMemberLooksAtTransactionsForThePastYear
 *     TEST transactions AMemberLooksAtTransactionsForThePastFewDays
 *     TEST transactions AMemberLooksAtTransactionsWithRoundups
 */
function weShowWith($title, $content = FALSE, $debug = TRUE) {return t\weShowWith($title, $content, $debug);}

/**
 * with: (ARG)
 *
 * in: TEST custstatement ACompanyLooksAtACustomerStatement
 *     TEST joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     TEST preferences AMemberVisitsThePreferencesPage
 *     TEST preferences ACompanyAgentVisitsThePreferencesPage
 *     TEST relations ItsComplicated
 *     TEST signupco AMemberRegistersACompany
 *     TEST statement AMemberLooksAtAStatementForPreviousMonth
 *     TEST transactions AMemberLooksAtTransactionsForThePastYear
 *     TEST transactions AMemberLooksAtTransactionsForThePastFewDays
 *     TEST transactions AMemberLooksAtTransactionsWithRoundups
 */
function with($content) {return weShow($content);}

/**
 * without: (ARG)
 *
 * in: TEST invest MembersRateAProposedInvestment
 *     TEST invest TheClubBuysShares
 *     TEST invest AClubAdministratorHandlesRequestsToCashOut
 *     TEST invest TheInvestmentClubIssuesDividends
 *     TEST invest MembersRateAProposedLoan
 *     TEST invest TheClubMakesALoan
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST queries AMemberVisitsTheCommunityDataPage
 *     TEST relations MemberHasAnEmployer
 *     TEST relations MemberCompanyHasRelations
 *     TEST showrecurs AMemberStopsAnAutopayment
 *     TEST statement AMemberLooksAtAStatementForPreviousMonth
 *     TEST summary AnAgentClicksTheSummaryTabWithoutPermissionToManage
 *     TEST transactions AMemberLooksAtTransactionsForThePastYear
 *     TEST transactions AMemberLooksAtTransactionsForThePastFewDays
 */
function without($content) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (!is_array($content)) return !weShow($content, FALSE);
  foreach ($content as $one) if (weShow(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * with options: (ARG)
 *
 * in: 
 */
function withOptions($options, $debug = TRUE) {return t\shownWith($options, 'options', $debug);}

/**
 * without options: (ARG)
 *
 * in: 
 */
function withoutOptions($options) {
  global $testOnly; if (!$testOnly) return FALSE;
  foreach ($options as $one) if (WithOptions(array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: MAKE balancesheet Setup
 *     MAKE bank Setup
 *     MAKE community Setup
 *     MAKE company Setup
 *     MAKE custstatement Setup
 *     MAKE demographics Setup
 *     MAKE download Setup
 *     MAKE flow Setup
 *     MAKE invest Setup
 *     MAKE invoice Setup
 *     TEST invoice AMemberApprovesInvoicesForevermore
 *     MAKE invoice AMemberApprovesAnInvoiceToATrustingCustomer
 *     MAKE joint AMemberRequestsAJointAccount
 *     MAKE joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     MAKE joint AJoinedAccountMemberUnjoinsTheAccount
 *     MAKE joint AMemberRequestsTwoJoinsAtOnce
 *     TEST joint AMemberCreatesAJointAccountByClickingTheSummaryPageButton
 *     MAKE membership Setup
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST partnersignup AMemberVisitsTheRegistrationPageSentByAPartner
 *     MAKE queries Setup
 *     MAKE relations MemberHasAnEmployeeConfirmed
 *     MAKE relations MemberHasAnEmployeeUnconfirmed
 *     MAKE relations MemberHasARelationWithAContractor
 *     MAKE relations MemberHasAnEmployeeClaimed
 *     MAKE relations EmployeeCanOnlyRead
 *     MAKE relations MemberHasAnEmployer
 *     MAKE relations MemberHasAccessToEmployeeAccount
 *     MAKE relations MemberCompanyHasRelations
 *     MAKE relations ItsComplicated
 *     MAKE relations AMemberTriesToAddARelationAgain
 *     MAKE scancard Setup
 *     MAKE signupco Setup
 *     TEST signupco AMemberRegistersACompany
 *     TEST signup AMemberRegistersWithAnExistingCompany
 *     MAKE statement Setup
 *     MAKE summary Setup
 *     MAKE transact Setup
 *     MAKE transactions Setup
 */
function relations($relations) {return t\relations($relations);}

/**
 * balances: (ARG)
 *
 * in: TEST balancesheet Setup
 *     TEST bank Setup
 *     TEST bank AMemberMovesCreditToTheBank
 *     TEST bank AMemberDrawsCreditFromTheBankWithZeroFloor
 *     TEST bank AMemberDrawsCreditFromTheBankWithAdequateFloor
 *     TEST bank AMemberDrawsCreditFromTheBankThenCancels
 *     TEST community Setup
 *     TEST coupons AMemberRedeemsAGiftCoupon
 *     TEST coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     TEST coupons AMemberRedeemsAPercentageDiscountCoupon
 *     TEST coupons AMemberRedeemsARestrictedDiscountCoupon
 *     TEST coupons AMemberRedeemsADiscountCouponInDribsAndDrabs
 *     TEST coupons AMemberWithNothingRedeemsAZeroMinimumDiscountCoupon
 *     TEST coupons AMemberRedeemsADiscountCouponSponsoredByAThirdParty
 *     TEST download Setup
 *     MAKE flow Setup
 *     MAKE gift Setup
 *     MAKE invest Setup
 *     MAKE invest MembersIncreaseAndDecreaseTheirStakes
 *     MAKE invest AClubAdministratorHandlesRequestsToCashOut
 *     BOTH invest TheInvestmentClubIssuesDividends
 *     TEST invoice Setup
 *     TEST invoice AMemberConfirmsRequestToChargeAnotherMember
 *     TEST invoice AMemberDeniesAnInvoice
 *     TEST invoice AMemberApprovesAnInvoiceWithInsufficientFunds
 *     TEST invoice AMemberApprovesAnInvoiceToATrustingCustomer
 *     TEST joint Setup
 *     TEST joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     TEST joint AJoinedAccountMemberUnjoinsTheAccount
 *     BOTH queries Setup
 *     TEST signupco AMemberRegistersACompany
 *     TEST statement Setup
 *     TEST summary Setup
 *     TEST summary AMemberClicksTheSummaryTabWithRoundups
 *     TEST transact Setup
 *     TEST transact AMemberConfirmsRequestToChargeAnotherMember
 *     TEST transact AMemberConfirmsRequestToPayAnotherMember
 *     MAKE transact AMemberConfirmsRequestToPayAnotherMemberALot
 *     TEST transact AMemberConfirmsRequestToPayAMemberCompany
 *     BOTH transactions Setup
 *     TEST transactions AMemberLooksAtTransactionsWithRoundups
 */
function balances($list) {return t\balances($list);}

/**
 * usd: (ARG)
 *
 * in: 
 */
function usd($list) {return t\usd($list);}

/**
 * member (ARG) visits page (ARG)
 *
 * in: MAKE backing AMemberVisitsTheBackingPage
 *     MAKE balancesheet AMemberLooksAtTheBalanceSheet
 *     MAKE balancesheet ANonmemberLooksAtTheBalanceSheet
 *     MAKE bank AMemberDrawsCreditFromTheBankThenCancels
 *     MAKE community CronCalculatesTheStatistics
 *     MAKE company AMemberVisitsTheCompanyInfoPage
 *     MAKE connect AMemberConnectsABankAccount
 *     MAKE contact AMemberVisitsTheContactInfoPage
 *     MAKE coupons AMemberCompanyCreatesAGiftCoupon
 *     MAKE coupons AMemberCompanyCreatesADollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsAPercentageDiscountCoupon
 *     MAKE coupons AMemberCompanyCreatesARestrictedDollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsARestrictedDiscountCoupon
 *     MAKE demographics ACompanyAgentRunsTheDemographicsQuery
 *     MAKE download AMemberDownloadsTransactionsForThePastYear
 *     MAKE download AMemberDownloadsIncomingInvoicesForThePastYear
 *     MAKE food ANonmemberVisitsTheFoodPage
 *     MAKE food AMemberSignsInAndSeesLink
 *     MAKE food AMemberMakesAFoodDonation
 *     MAKE food AMemberMakesAFoodDonationWithoutAdequateFunds
 *     MAKE gift AMemberDonates
 *     MAKE gift AMemberMakesANewRecurringDonation
 *     MAKE invest AMemberJoinsTheInvestmentClub
 *     MAKE invest AMemberCompanyJoinsTheInvestmentClub
 *     MAKE invest AnAdministratorViewsTheInvestmentPage
 *     MAKE invest TheClubAddsAProposedInvestment
 *     MAKE invest MembersRateAProposedInvestment
 *     MAKE invest TheClubBuysShares
 *     MAKE invest TheClubSellsShares
 *     MAKE invest MembersIncreaseAndDecreaseTheirStakes
 *     MAKE invest AClubAdministratorHandlesRequestsToCashOut
 *     MAKE invest TheInvestmentClubIssuesDividends
 *     MAKE invest MembersRateAProposedLoan
 *     MAKE invest TheClubMakesALoan
 *     MAKE invoice AMemberConfirmsRequestToChargeAnotherMember
 *     MAKE invoice AMemberConfirmsRequestToChargeANotyetMember
 *     MAKE joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     MAKE membership AMemberSignsInForTheFirstTime
 *     MAKE partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     MAKE paybutton AMemberClicksAPayWithCommonGoodButton
 *     MAKE paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     MAKE paybutton AMemberClicksALinkToResetPassword
 *     MAKE paybutton AMemberClicksALinkToResetPasswordWithWrongCode
 *     MAKE paybutton AMemberClicksALinkToResetPasswordForUnknownAccount
 *     MAKE preferences AMemberVisitsThePreferencesPage
 *     MAKE preferences ACompanyAgentVisitsThePreferencesPage
 *     MAKE queries AMemberVisitsTheCommunityDataPage
 *     MAKE queries AnAdminVisitsTheCommunityDataPage
 *     MAKE relations MemberHasAnEmployeeConfirmed
 *     MAKE relations MemberHasAnEmployeeUnconfirmed
 *     MAKE relations MemberHasARelationWithAContractor
 *     MAKE relations MemberHasAnEmployeeClaimed
 *     MAKE relations EmployeeCanOnlyRead
 *     MAKE relations MemberHasAnEmployer
 *     MAKE relations MemberHasAccessToEmployeeAccount
 *     MAKE relations MemberCompanyHasRelations
 *     MAKE relations ItsComplicated
 *     MAKE scancard SomeoneScansAMemberCard
 *     MAKE scancard SomeoneScansACompanyAgentCard
 *     MAKE showrecurs AMemberLooksAtTheirRecurringPayments
 *     MAKE showrecurs AMemberStopsARecurringTransaction
 *     MAKE showrecurs AMemberStopsAStoppedRecurringTransaction
 *     MAKE showrecurs AMemberAttemptsToStopANonexistentRecurringTransaction
 *     MAKE showrecurs AMemberAttemptsToStopAnotherMembersRecurringTransaction
 *     MAKE showrecurs AMemberStopsAnAutopayment
 *     MAKE signin AMemberVisitsTheMemberSite
 *     MAKE signin AMemberClicksALinkToResetPassword
 *     MAKE signin AMemberClicksALinkToResetPasswordWithWrongCode
 *     MAKE signin AMemberClicksALinkToResetPasswordForUnknownAccount
 *     MAKE signout AMemberSignsOut
 *     MAKE signout AMemberTimesOutAndSignsOutAutomatically
 *     MAKE signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 *     MAKE signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     MAKE summary AMemberClicksTheSummaryTab
 *     MAKE summary AMemberClicksTheSummaryTabWithRoundups
 *     MAKE summary AnAgentClicksTheSummaryTabWithoutPermissionToManage
 *     MAKE summary ACompanyAgentClicksTheSummaryTab
 *     MAKE summary MembersAccountIsNotActive
 *     MAKE transactions AMemberLooksAtTransactionsForThePastYear
 *     MAKE transactions AMemberLooksAtTransactionsForThePastFewDays
 *     MAKE transactions AMemberLooksAtTransactionsWithRoundups
 *     MAKE transactions AdminReversesABankTransfer
 */
function memberVisitsPage($id, $page) {return t\memberVisitsPage($id, $page);}

/**
 * member is logged out
 *
 * in: MAKE balancesheet ANonmemberLooksAtTheBalanceSheet
 *     MAKE membership AMemberSignsInForTheFirstTime
 *     MAKE partnersignup Setup
 *     MAKE paybutton Setup
 *     MAKE paybutton AMemberClicksALinkToResetPassword
 *     MAKE signin Setup
 *     MAKE signin AMemberClicksALinkToResetPassword
 *     MAKE signout Setup
 *     MAKE signup Setup
 */
function memberIsLoggedOut() {
  global $testOnly, $mya;
  w\setAcct(); // make sure we notice, if signed in
  //u\deb('memberIsLoggedOut top loggedin=' . \user_is_logged_in());
  if ($testOnly) return !$mya;
  w\setAcct(NULL);
  return TRUE;
}

/**
 * invitation to email (ARG) from member (ARG) is (ARG)
 *
 * in: MAKE membership AMemberSignsInForTheFirstTime
 *     MAKE signupco AMemberRegistersACompany
 *     MAKE signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 *     MAKE signup ANewbieVisitsTheRegistrationPageWithAUsedInvite
 *     MAKE signup ANewbieRegistersInWesternMassachusetts
 *     MAKE signup ANewbieRegistersWithADifferentLegalName
 *     MAKE signup ANewbieRegistersFromElsewhere
 *     MAKE signup ANewbieRegistersWithNoCase
 *     MAKE signup AMemberRegistersBadEmail
 *     MAKE signup AMemberRegistersBadName
 *     MAKE signup AMemberRegistersBadZip
 *     MAKE signup AMemberRegistersAgain
 *     MAKE signup AMemberRegistersWithAnExistingCompany
 *     MAKE signup AMemberRegistersWithAnUnknownCompany
 *     MAKE signup AMemberRegistersWithACompanyWithNoRelation
 *     MAKE signup AMemberRegistersWithABadCompanyPhone
 */
function invitationToEmailFromMemberIs($email, $id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  $email = t\fixEmail($email);
  $uid = t\uid($id);
  if ($iid = db\get('id', 'r_invites', 'email=:email AND inviter=:uid', compact('email', 'uid'))) {
    db\q('UPDATE r_invites SET code=:code WHERE id=:iid', compact('code', 'iid'));
  } elseif ($code) r\invite($email, $uid, $code);
  //  t\SERVER('REQUEST_URI', "whatever/$code"); // fake the URI
  return TRUE;
}

/**
 * no relation: (ARG)
 *
 * in: TEST signup AMemberRegistersWithAnUnknownCompany
 */
function noRelation($relations) {
  global $testOnly;
  foreach ($relations as $one) if (r\relation(1, t\uid($one['main']), t\uid($one['agent']))) return FALSE;
  return TRUE;
}

/**
 * member (ARG) signs in the first time
 *
 * in: 
 */
function memberSignsInTheFirstTime($uid) {
  global $testOnly; if (!$testOnly) return FALSE;
  memberVisitsPage($uid, 'summary');
  return db\get('created=login', 'users', 'uid=' . t\uid($uid));
}

/**
 * member (ARG) account is not active
 *
 * in: 
 */
function memberAccountIsNotActive($id) {
  global $testOnly; if ($testOnly) return FALSE;
  $uid = r\qo($id)->id;
  if (!$uid) return FALSE;
  r\acct($uid)->setBit(B_OK, FALSE);
  return TRUE;
}

/**
 * with done (ARG)
 *
 * in: 
 */
function withDone($steps) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $formOut;
  return $steps == $formOut['done'];
}

/**
 * member (ARG) has done step (ARG)
 *
 * in: 
 */
function memberHasDoneStep($uid, $step) {return t\doneStep($uid, $step);}

/**
 * member (ARG) supplies (ARG): (ARG)
 *
 * in: 
 */
function memberSupplies($uid, $field, $value) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct($uid = t\uid($uid));
  return $a->update(ray($field, $value));
}

/**
 * member (ARG) has permission (ARG)
 *
 * in: MAKE membership AMemberSignsInForTheFirstTime
 */
function memberHasPermission($uid, $permission) {
  global $testOnly; if ($testOnly) return FALSE;
  r\acct(t\uid($uid))->setBit(u\consta('b', $permission), TRUE);
  return TRUE;
}

/**
 * member (ARG) one-time password is (ARG)
 *
 * in: 
 */
function memberOnetimePasswordIs($id, $pass) {
  global $testOnly;
  if (!$a = r\acct($uid = t\uid($id))) return FALSE;
  if (!$testOnly) {
    $expires = REQUEST_TIME + R_SIGNIN_HOURS * HOUR_SECS;
    $oneTimePass = compact('pass', 'expires');
    $a->update(compact('oneTimePass'));
  }
  return ($a->oneTimePass['pass'] == $pass and $a->oneTimePass['expires'] > REQUEST_TIME);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST food AMemberMakesAFoodDonation
 *     TEST gift AMemberDonates
 *     TEST gift AMemberMakesARecurringDonation
 *     TEST invoice AMemberDeniesAnInvoice
 *     TEST transact AMemberConfirmsRequestToPayAnotherMember
 *     TEST transact AMemberConfirmsRequestToPayAMemberCompany
 *     TEST transact AMemberPaysAnotherMemberRepeatedly
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * gifts: (ARG)
 *
 * in: 
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we download (ARG) with: (ARG)
 *
 * in: TEST download AMemberDownloadsTransactionsForThePastYear
 *     TEST download AMemberDownloadsIncomingInvoicesForThePastYear
 */
function weDownloadWith($name, $rows) {
  global $testOnly;
  global $testCSV, $testCSVname;

  if (@$testCSVname != $name) return t\output("$testCSVname <> $name");
  if (!is_array($testCSV) or empty($testCSV)) return t\output('testCSV empty');
  $csv2 = $testCSV; // don't change this
  $headers = array_values(array_shift($csv2));

  foreach ($rows as $row) {
    if (!$csvRow = array_shift($csv2)) return t\output('missing row in CSV: ' . pr($row));
    $csvRow = array_combine($headers, $csvRow); // add keys
    foreach ($row as $k => $v) {
      if (strpos($v, '%') !== FALSE) $v = t\lastMinuteSubs($v);
      if (!t\eq($csvValue = @$csvRow[$k], $v)) return t\output("key=$k csvValue<>expected value ($csvValue<>$v) csvRow:" . pr($csvRow));
    }
  }
  if (count($testCSV) != count($rows) + 1) return t\output('There are extra rows in testCSV: '. pr($testCSV) . ' rows: ' . pr($rows));
  return TRUE;
}

/**
 * with download columns: (ARG)
 *
 * in: 
 */
function withDownloadColumns($columns) {
  global $testOnly;
  global $testCSV, $testCSVname;

  if (!is_array($testCSV) or empty($testCSV)) return FALSE;
  $csv2 = $testCSV; // don't alter this (just in case)
  $headers = array_values(array_shift($csv2));
///   debug(compact('headers','testCSV','columns'));
  foreach ($columns as $one) if (array_search($one['column'], $headers) === FALSE) return FALSE;
  return TRUE;
}

/**
 * usd transfers: (ARG)
 *
 * in: MAKE balancesheet Setup
 *     MAKE bank Setup
 *     TEST bank AMemberMovesCreditToTheBank
 *     TEST bank AMemberDrawsCreditFromTheBankWithZeroFloor
 *     TEST bank AMemberDrawsCreditFromTheBankWithAdequateFloor
 *     MAKE bank AMemberAsksToDoTwoTransfersOutInOneDay
 *     TEST bank AMemberDrawsCreditFromTheBankThenCancels
 *     MAKE community Setup
 *     MAKE custstatement Setup
 *     MAKE demographics Setup
 *     MAKE download Setup
 *     MAKE joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     MAKE queries Setup
 *     MAKE statement Setup
 *     MAKE summary Setup
 *     MAKE transactions Setup
 *     TEST transactions AdminReversesABankTransfer
 */
function usdTransfers($tx) {return t\usdTransfers($tx);}


/**
 * usd transfer count is (ARG)
 *
 * in: 
 */
function usdTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * member (ARG) scans member card (ARG)
 *
 * in: 
 */
function memberScansMemberCard($id1, $id2) {
  global $testOnly; if ($testOnly) return FALSE;
  t\logIn($id1);
  
}

/**
 * member (ARG) card code is (ARG)
 *
 * in: 
 */
function memberCardCodeIs($id, $cardCode) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $secure = compact('cardCode') + ($a->secure ?: array());
  return $a->update(compact('secure'));
}

/**
 * agent (ARG) card code is (ARG)
 *
 * in: 
 */
function agentCardCodeIs($id, $cardCode2) {
  global $testOnly; if ($testOnly) return FALSE;
  $a = r\acct(t\fullQid($id));
  $secure = compact('cardCode2') + ($a->secure ?: array());
  return $a->update(compact('secure'));
}

/**
 * cron runs (ARG)
 *
 * in: MAKE community CronCalculatesTheStatistics
 *     MAKE joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     MAKE summary Setup
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * statistics get set (ARG)
 *
 * in: MAKE community CronCalculatesTheStatistics
 */
function statisticsGetSet($time) {
  global $testOnly; if ($testOnly) return FALSE;
  //  return r\getStats(r\serverUid(), $time) ? TRUE : FALSE;
  return r\stats(r\serverUid(), $time) ? TRUE : FALSE;
}

/**
 * members have: (ARG)
 *
 * in: BOTH coupons AMemberCompanyCreatesAGiftCoupon
 *     BOTH coupons AMemberRedeemsAGiftCoupon
 *     MAKE coupons AMemberWithNothingRedeemsAZeroMinimumDiscountCoupon
 *     MAKE download AMemberDownloadsTransactionsForThePastYear
 *     TEST food AMemberMakesAFoodDonation
 *     TEST food AMemberMakesAFoodDonationWithoutAdequateFunds
 *     MAKE invoice AMemberApprovesInvoicesForevermore
 *     TEST joint AMemberRequestsAJointAccount
 *     BOTH joint AJoinedAccountSlaveMemberRequestsANewMinimum
 *     MAKE joint AJoinedAccountMemberLooksAtTransactionHistoryAndSummary
 *     BOTH joint AJoinedAccountMemberUnjoinsTheAccount
 *     TEST membership AMemberSignsInForTheFirstTime
 *     MAKE statement Setup
 *     MAKE summary Setup
 *     MAKE summary MembersAccountIsNotActive
 *     MAKE transactions AMemberLooksAtTransactionsForThePastYear
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * we redirect to (ARG)
 *
 * in: TEST bank AMemberDrawsCreditFromTheBankThenCancels
 *     TEST scancard SomeoneScansAMemberCard
 *     TEST signout AMemberSignsOut
 *     TEST signout AMemberTimesOutAndSignsOutAutomatically
 */
function weRedirectTo($page) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $lastGo;
  $lastGo = preg_replace('/&tm=[0-9]+/', '', $lastGo); // ignore time, when redirecting to promo site
  if (!$res = ($lastGo == $page)) t\output('redirect mismatch: ' . pr(compact('lastGo', 'page')));
  return $res;
}

/**
 * member (ARG) is on step (ARG) within (ARG) seconds
 *
 * in: 
 */
function memberIsOnStepWithinSeconds($id, $step, $secs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $us = new r\usd(r\acct(t\uid($id)));
  for ($i = 0; $i < $secs; $i++) {
    sleep(1);
    if ($us->step() == $step) return TRUE;
  }
  return FALSE;
}

/**
 * account (ARG) was set up by member (ARG)
 *
 * in: 
 */
function accountWasSetUpByMember($coId, $id) {
  global $testOnly; if ($testOnly) return FALSE;
  $by = t\uid($id);
  $co = r\acct(t\uid($coId));
  return $co->update(compact('by'));
}

/**
 * next DO code is (ARG)
 *
 * in: MAKE gift AMemberDonates
 *     MAKE transact AMemberConfirmsRequestToPayAMemberCompany
 */
function nextDOCodeIs($code) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testDoCode;
  return $testDoCode = $code;
}

/**
 * invitation (ARG) was sent on (ARG)
 *
 * in: MAKE signup ANewbieVisitsTheRegistrationPageWithExpiredInvite
 */
function invitationWasSentOn($code, $dt) {
  global $testOnly; if ($testOnly) return FALSE;
  return db\q("UPDATE r_invites SET invited='$dt' WHERE code='$code'");
}

/**
 * devices: (ARG)
 *
 * in: 
 */
function devices($list) {return t\devices($list);}

/**
 * invoices: (ARG)
 *
 * in: MAKE balancesheet Setup
 *     MAKE custstatement Setup
 *     MAKE download Setup
 *     TEST gift AMemberDonatesWithInsufficientFunds
 *     TEST invest TheClubSellsShares
 *     TEST invest TheClubSellsItsRemainingSharesInAnInvestment
 *     TEST invoice AMemberConfirmsRequestToChargeAnotherMember
 *     TEST invoice AMemberConfirmsRequestToChargeAnotherMemberWhoHasABankAccount
 *     TEST invoice AMemberConfirmsRequestToChargeANotyetMember
 *     TEST invoice AMemberDeniesAnInvoice
 *     TEST invoice AMemberApprovesAnInvoiceWithInsufficientFunds
 *     TEST invoice AMemberApprovesInvoicesForevermore
 *     TEST invoice AMemberApprovesAnInvoiceToATrustingCustomer
 *     TEST paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     TEST transact AMemberConfirmsRequestToChargeAnotherMember
 */
function invoices($list) {return t\invoices($list);}

/**
 * signup company info is remembered
 *
 * in: 
 */
function signupCompanyInfoIsRemembered() {
  global $testOnly; if (!$testOnly) return FALSE;
}

/**
 * signup company info for account (ARG) is remembered
 *
 * in: TEST signup AMemberRegistersWithAnUnknownCompany
 */
function signupCompanyInfoForAccountIsRemembered($id) {
  global $testOnly; if (!$testOnly) return FALSE;
  return (bool) ($a = r\acct(t\uid($id)) and $a->signupCo);
}

/**
 * that (ARG) has link results: (ARG)
 *
 * in: TEST gift AMemberDonates
 *     TEST transact AMemberConfirmsRequestToPayAMemberCompany
 */
function thatHasLinkResults($thing, $info) {return t\hasLinkResults($thing, $info);}

/**
 * member (ARG) edits transaction (ARG) with values: (ARG)
 *
 * in: 
 */
function memberEditsTransactionWithValues($id, $xid, $values) {
  return memberConfirmsFormWithValues($id, "history/transactions/xid=$xid&do=edit", $values);
}

/**
 * a member posts to (ARG) with values: (ARG)
 *
 * in: 
 */
function aMemberPostsToWithValues($page, $values) {return memberConfirmsFormWithValues('?', $page, $values);}

/**
 * member (ARG) is logged in
 *
 * in: TEST membership AMemberSignsInForTheFirstTime
 *     TEST paybutton AMemberSignsInWithUsernameOnTheMemberSite
 *     TEST paybutton AMemberSignsInWithAccountIDOnTheMemberSite
 *     TEST paybutton AMemberSignsInWithEmailOnTheMemberSite
 *     TEST paybutton AMemberClicksALinkToResetPassword
 *     TEST signin AMemberSignsInWithUsernameOnTheMemberSite
 *     TEST signin AMemberSignsInWithAccountIDOnTheMemberSite
 *     TEST signin AMemberSignsInWithEmailOnTheMemberSite
 *     TEST signin AMemberClicksALinkToResetPassword
 */
function memberIsLoggedIn($id) {
  global $testOnly, $mya;
  return $testOnly ? ($mya and $mya = r\acct() and t\uid($id) == $mya->id) : t\login($id);
}

/**
 * next random code is (ARG)
 *
 * in: MAKE membership AMemberSignsInForTheFirstTime
 *     MAKE partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     MAKE paybutton AMemberAsksForANewPasswordForUsername
 *     MAKE paybutton AMemberAsksForANewPasswordForAccountID
 *     MAKE paybutton AMemberAsksForANewPasswordForEmail
 *     MAKE paybutton AMemberClicksALinkToResetPassword
 *     MAKE paybutton AMemberClicksALinkToResetPasswordWithWrongCode
 *     MAKE paybutton AMemberClicksALinkToResetPasswordForUnknownAccount
 *     MAKE signin AMemberAsksForANewPasswordForUsername
 *     MAKE signin AMemberAsksForANewPasswordForAccountID
 *     MAKE signin AMemberAsksForANewPasswordForEmail
 *     MAKE signin AMemberClicksALinkToResetPassword
 *     MAKE signin AMemberClicksALinkToResetPasswordWithWrongCode
 *     MAKE signin AMemberClicksALinkToResetPasswordForUnknownAccount
 *     MAKE signup ANewbieRegistersInWesternMassachusetts
 *     MAKE signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     MAKE signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     MAKE signup ANewbieRegistersFromElsewhere
 */
function nextRandomCodeIs($code) {global $nextCode; return $nextCode = $code;}

/**
 * we say error in field (ARG): (ARG)
 *
 * in: TEST company AMemberGivesABadEmployeeCount
 *     TEST company AMemberGivesABadGross
 */
function weSayErrorInField($field, $index) {
  return weSayWithSubs('error', strtoupper($field) . ':|' . $index, []);
}

/**
 * member (ARG) completes relations form with values: (ARG)
 *
 * in: MAKE joint AMemberRequestsAJointAccount
 *     MAKE joint AJoinedAccountMemberUnjoinsTheAccount
 *     MAKE joint AMemberRequestsTwoJoinsAtOnce
 *     MAKE relations AMemberAddsARelation
 *     MAKE relations AMemberTriesToAddARelationWithSelf
 *     MAKE relations AMemberTriesToAddARelationAgain
 */
function memberCompletesRelationsFormWithValues($id1, $list) {
  foreach ($list as $i => $rec) {
    if (isset($rec['other'])) {
      $reid = r\relation('reid', t\uid($id1), t\uid($rec['other'])); // compound qid
      u\EXPECT($reid, "missing relation record for $id1,".$rec['other']);
      unset($list[$i]['other']);
      foreach (ray('draw permission employee owner customer') as $k) if (isset($rec[$k])) {
        $list[$i]["$k-$i-$reid"] = $k == 'permission' ? u\consta('b', $rec[$k]) - B_RELATED : $rec[$k];
        unset($list[$i][$k]);
      }
    }
  }
  return t\completeForm($id1, "settings/relations", $list, TRUE);
}

/**
 * member (ARG) cache is ok
 *
 * in: 
 */
function memberCacheIsOk($id) {return r\acct(t\uid($id))->cacheOk();}

/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE backing AMemberChangesBackingAmount
 *     MAKE preferences AMemberChangesPreferences
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}

/**
 * signup args: (ARG)
 *
 * in: TEST signupco AMemberRegistersACompany
 *     TEST signupco AMemberRegistersACompanyWhileManagingAnotherAccount
 *     TEST signupco AMemberRegistersACompanyHavingGivenCompanyInfo
 */
function signupArgs($args) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $signupArgs;
  foreach ($args[0] as $k => $v) if (@$signupArgs[$k] != $v) {
    t\output(compact('args', 'signupArgs'));
    return FALSE;
  }
  return TRUE;
}

/**
 * member (ARG) has company info: (ARG)
 *
 * in: MAKE signupco AMemberRegistersACompanyHavingGivenCompanyInfo
 */
function memberHasCompanyInfo($id, $info) {
  global $testOnly;
  $a = r\acct(t\uid($id));
  if (!$testOnly) return $a->update('signupCo', $info[0]);
  extract($signupCo = $a->signupCo ?: []);
  foreach ($info[0] as $k => $v) if ($$k != $v) {t\output(compact('id', 'signupCo', 'info')); return FALSE;}
  return TRUE;
}

/**
 * member (ARG) clicks (ARG) on transaction (ARG)
 *
 * in: MAKE transactions AdminReversesABankTransfer
 */
function memberClicksOnTransaction($id, $do, $xid) {
  global $testPeriod;
  if ($do == 'X') $do = 'no';
  return t\memberVisitsPage($id, "history/transactions/period=$testPeriod&do=$do&xid=$xid");
}

/**
 * member (ARG) confirms (ARG) on transaction (ARG)
 *
 * in: 
 */
function memberConfirmsOnTransaction($id, $do, $xid) {
  global $testPeriod;
  if ($do == 'X') $do = 'no';
  return t\completeForm($id, "history/transactions/period=$testPeriod&do=$do&xid=$xid", '', TRUE);
}

/**
 * we message (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST invoice AMemberConfirmsRequestToChargeAnotherMember
 *     TEST invoice AMemberConfirmsRequestToChargeAnotherMemberWhoHasABankAccount
 *     TEST invoice AMemberConfirmsRequestToChargeANotyetMember
 *     TEST paybutton AMemberSubmitsAPayWithCommonGoodButtonPaymentWithAccountID
 *     TEST signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     TEST signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 *     TEST transact AMemberConfirmsRequestToChargeAnotherMember
 */
function weMessageToMemberWithSubs($index, $id, $subs) {return t\weMessage($index, $id, $subs);}

/**
 * member (ARG) email invitation code is (ARG)
 *
 * in: MAKE signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 */
function memberEmailInvitationCodeIs($id, $code) {
  global $testOnly; // for now, choose the test code according to the creation date (in the tests)
  $code0 = r\acct(t\uid($id))->iCardCode(IBY_SELF);
  return ($code0 == $code or $code0 == $code . 'A');
}

/**
 * we show checked: (ARG)
 *
 * in: 
 */
function weShowChecked($what, $wantSet = TRUE) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $tChecked;

  $checks = join('|', @$tChecked ?: []);
  $checked = $wantSet ? 'checked' : 'unchecked';
  
  foreach ($what as $one) {
    list ($k, $v) = $one;
    if (!weShow($k)) {t\output("Missing \"$k\"."); return FALSE;}
    $set = (strpos($checks, $v) !== FALSE);
    if ($set != $wantSet) {t\output("Missing $checked \"$v\"."); return FALSE;}
  }
  return TRUE;
}

/**
 * we show unchecked: (ARG)
 *
 * in: 
 */
function weShowUnchecked($what) {return weShowChecked($what, FALSE);}

/**
 * radio (ARG) is (ARG)
 *
 * in: TEST preferences AMemberVisitsThePreferencesPage
 *     TEST preferences ACompanyAgentVisitsThePreferencesPage
 */
function radioIs($k, $v) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $tRadios;

  return (strpos(@$tRadios[$k], $v) !== FALSE);  
}

/**
 * reward step is (ARG)
 *
 * in: 
 */
function rewardStepIs($step) {
  global $testOnly, $testRewardStep;
  return $testOnly ? FALSE : ($testRewardStep = $step);
}

/**
 * member (ARG) one-time password is set to (ARG)
 *
 * in: TEST membership AMemberSignsInForTheFirstTime
 *     TEST partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     TEST signup ANewbieRegistersInWesternMassachusetts
 *     TEST signup ANewbieRegistersWithAnUnconfirmedIcardInvitation
 *     TEST signup ANewbieRegistersWithAnUnconfirmedSelfinvitation
 */
function memberOnetimePasswordIsSetTo($id, $pass) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (!$a = r\acct(t\uid($id))) return FALSE;
  return (@$a->oneTimePass['pass'] == $pass and @$a->oneTimePass['expires'] > REQUEST_TIME);
}
/**
 * member (ARG) completes form (ARG) with name (ARG) and all checkboxes
 *
 * in: MAKE membership AMemberSignsInForTheFirstTime
 */
function memberCompletesFormWithNameAndAllCheckboxes($id, $page, $signedBy) {
  global $testOnly; if ($testOnly) return FALSE;
  $values = compact('signedBy');
  for ($i = R_AGREE_0; $i <= R_AGREE_9; $i++) $values["check$i"] = TRUE;
  return t\completeForm($id, $page, [$values]);
}

/**
 * proxies: (ARG)
 *
 * in: MAKE demographics Setup
 *     MAKE membership AMemberSignsInForTheFirstTime
 */
function proxies($list) {return t\proxies($list);}

/**
 * member (ARG) views statement for (ARG)
 *
 * in: MAKE statement AMemberLooksAtAStatementForPreviousMonth
 */
function memberViewsStatementFor($id, $month) {
  include_once R_ROOT . '/forms/statement.inc';
  global $testOnly; if ($testOnly) return FALSE;

  t\logIn($id);
  w\statement($month);
  return TRUE;
}

/**
 * we tell (ARG) CO (ARG) with subs: (ARG)
 *
 * in: TEST gift AMemberDonatesWithInsufficientFunds
 *     TEST membership AMemberSignsInForTheFirstTime
 */
function weTellCOWithSubs($id, $topic, $subs) {return t\weTellAdmin($topic, $subs, t\uid($id));}

/**
 * community (ARG) is (ARG)
 *
 * in: 
 */
function communityIs($bit, $setting) {
  global $testOnly;
  $ctty = ctty('aab');
  $bit = u\consta('b', $bit);
  $setting = ($setting == 'on');
  return $testOnly ? ($ctty->can($bit) == $setting) : $ctty->setBit($bit, $setting);
}

/**
 * we tell (ARG) CO (ARG)
 *
 * in: 
 */
function weTellCO($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * someone posts to page (ARG) with: (ARG)
 *
 * in: MAKE partnersignup ANewbieVisitsTheRegistrationPageSentByAPartner
 *     MAKE partnersignup AMemberVisitsTheRegistrationPageSentByAPartner
 */
function someonePostsToPageWith($page, $args) {return t\postToPage($page, $args);}

/**
 * coupons: (ARG)
 *
 * in: TEST coupons AMemberCompanyCreatesAGiftCoupon
 *     MAKE coupons AMemberRedeemsAGiftCoupon
 *     TEST coupons AMemberCompanyCreatesADollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsAPercentageDiscountCoupon
 *     TEST coupons AMemberCompanyCreatesARestrictedDollarAmountDiscountCoupon
 *     MAKE coupons AMemberRedeemsARestrictedDiscountCoupon
 *     MAKE coupons AMemberRedeemsADiscountCouponInDribsAndDrabs
 *     MAKE coupons AMemberWithNothingRedeemsAZeroMinimumDiscountCoupon
 *     MAKE coupons AMemberRedeemsADiscountCouponSponsoredByAThirdParty
 */
function coupons($list) {return t\coupons($list);}

/**
 * we scrip (ARG) with subs: (ARG)
 *
 * in: TEST transact AMemberAsksToChargeAnotherMemberForGoods
 *     TEST transact AMemberAsksToPayAnotherMemberForGoods
 *     TEST transact AMemberAsksToPayAnotherMemberForLoanreimbursement
 */
function weScripWithSubs($script, $args = []) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $scriptScraps;
  if (!isset($scriptScraps[$script])) return FALSE;
  $args = $args[0];
  $got = just(array_keys($args), $scriptScraps[$script]);
  foreach ($args as $k => $v) if (!t\eq(@$got[$k], $v)) return FALSE;
  return TRUE;
}

/**
 * these (ARG): (ARG)
 *
 * in: MAKE balancesheet Setup
 *     TEST community CronCalculatesTheStatistics
 *     TEST coupons AMemberRedeemsADollarAmountDiscountCoupon
 *     TEST coupons AMemberCompanyCreatesARestrictedDollarAmountDiscountCoupon
 *     BOTH coupons AMemberRedeemsARestrictedDiscountCoupon
 *     MAKE custstatement AStatementGoesOntoMultiplePages
 *     MAKE demographics Setup
 *     TEST food AMemberMakesAFoodDonation
 *     TEST food AMemberMakesAFoodDonationWithoutAdequateFunds
 *     TEST gift AMemberDonates
 *     TEST gift AMemberMakesARecurringDonation
 *     BOTH gift AMemberMakesANewRecurringDonation
 *     TEST gift AMemberDonatesWithInsufficientFunds
 *     TEST invest AMemberJoinsTheInvestmentClub
 *     BOTH invest AMemberBuysAStakeInTheClub
 *     TEST invest TheClubAddsAProposedInvestment
 *     BOTH invest MembersRateAProposedInvestment
 *     BOTH invest TheClubBuysShares
 *     BOTH invest TheClubSellsShares
 *     BOTH invest TheClubSellsItsRemainingSharesInAnInvestment
 *     BOTH invest MembersIncreaseAndDecreaseTheirStakes
 *     BOTH invest AMemberTriesToDecreaseStakeBelowZero
 *     BOTH invest AClubAdministratorHandlesRequestsToCashOut
 *     BOTH invest TheInvestmentClubIssuesDividends
 *     BOTH invest MembersRateAProposedLoan
 *     BOTH invest TheClubMakesALoan
 *     MAKE preferences Setup
 *     MAKE showrecurs Setup
 *     TEST showrecurs AMemberStopsAnAutopayment
 *     TEST signup ANewbieRegistersInWesternMassachusetts
 *     TEST transact AMemberPaysAnotherMemberRepeatedly
 *     TEST transactions AdminReversesABankTransfer
 */
function these($thing, $list) {return t\these($thing, $list);}

/**
 * agent (ARG) views (ARG) statement for member (ARG)
 *
 * in: MAKE custstatement ACompanyLooksAtACustomerStatement
 */
function agentViewsStatementForMember($biz, $type, $cust) {
  include_once R_ROOT . '/forms/custstatement.inc';
  global $testOnly; if ($testOnly) return FALSE;

  t\logIn($biz);
  $way = $type == 'customer' ? 'IN' : 'OUT';
  $cust = t\fullQid2($cust);
  w\custStatement("cust=$cust&way=$way");
  return TRUE;
}

/**
 * with choices: (ARG)
 *
 * in: TEST gift AMemberDonates
 */
function withChoices($choices) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $formOut;
  foreach ($choices as list ($k, $v)) $ch[] = "$k=>$v";
  $res = @$ch ? (strpos($formOut['options'], join(PHP_EOL, $ch)) !== FALSE) : FALSE;
  if (!$res) {
    t\output(@$ch);
    t\output($formOut['options']);
  }
  return $res;
}

/**
 * recurs: (ARG)
 *
 * in: MAKE community Setup
 *     MAKE showrecurs Setup
 */
function recurs($list) {return t\recurs($list);}

/**
 * tx headers: (ARG)
 *
 * in: 
 */
function txHeaders($list) {
  return t\txHdrs($list);
}

/**
 * tx entries: (ARG)
 *
 * in: TEST flow AMemberDraws
 *     TEST flow AMemberDrawsAgain
 */
function txEntries($list) {
  return t\txEntries($list);
}

/**
 * variable (ARG) is (ARG)
 *
 * in: MAKE balancesheet AMemberLooksAtTheBalanceSheet
 *     MAKE balancesheet ANonmemberLooksAtTheBalanceSheet
 */
function variableIs($k, $v) {return t\varIs($k, $v);}

/**
 * field (ARG) is (ARG) field (ARG)
 *
 * in: TEST transact AMemberPaysAnotherMemberRepeatedly
 */
function fieldIsField($fld1, $op, $fld2) {
  global $testOnly; if (!$testOnly) return FALSE;
  foreach ([1,2] as $i) {
    $fi = $f[$i] = explode('/', ${'fld' . $i}); // tnm/idFnm/id/fldNm
    $tbl = strStarts($fi[0], 'tx_') ? $fi[0] : 'r_' . $fi[0];
    $v[$i] = db\get($fi[3], $tbl, [$fi[1] => $fi[2]]);
  }
  switch ($op) {
  case "<": return ($v[1] < $v[2]);
  case "<=": return ($v[1] <= $v[2]);
  case "=": return ($v[1] == $v[2]);
  case ">=": return ($v[1] >= $v[2]);
  case ">": return ($v[1] > $v[2]);
  default: return FALSE;
  }
}

/**
 * date field (ARG) rounded (ARG) in (ARG) record (ARG) (id field (ARG))
 *
 * in: TEST transact AMemberPaysAnotherMemberRepeatedly
 */
function dateFieldRoundedInRecordidField($dateFnm, $round, $tnm, $id, $idFnm) {
  global $testOnly; if (!$testOnly) return FALSE;
  if (!strStarts($tnm, 'tx_')) $tnm = 'r_' . $tnm;
  $date = db\get($dateFnm, $tnm, [$idFnm => $id]);
  $rounded = (strtotime('today', $date) == $date);
  return ($round == 'yes' xor !$rounded);
}

function strStarts($haystack, $needle) {
  return strpos($haystack, $needle) === 0;
}

/**
 * member (ARG) is unconfirmed
 *
 * in: MAKE transact ANewMemberAsksToPayAnotherMemberBeforeMakingACommonGoodCardPurchase
 */
function memberIsUnconfirmed($id) {
  global $testOnly;
  $a = r\acct(t\uid($id));
  return $testOnly ? !$a->confirmed : $a->setBit('confirmed', FALSE);
}

/**
 * count (ARG) is (ARG)
 *
 * in: TEST bank Setup
 *     TEST bank AMemberDrawsCreditFromTheBankThenCancels
 */
function countIs($what, $count) {return t\count($what, $count);}

/**
 * member (ARG) runs query (ARG)
 *
 * in: MAKE queries AnAdminRunsAQueryAboutFoodFund
 *     MAKE queries AnAdminRunsAQueryAboutTrustedMembers
 *     MAKE queries AMemberRunsAQueryAboutEmployees
 *     MAKE queries AMemberRunsAQueryAboutTransactionTotals
 *     MAKE queries AMemberRunsAQueryAboutBusinessIncome
 *     MAKE queries AMemberRunsAQueryAboutPositiveAndNegative
 *     MAKE queries AMemberRunsAQueryAboutBalances
 *     MAKE queries AMemberRunsAQueryAboutActualDonations
 *     MAKE queries AMemberRunsAQueryAboutExpectedMemberDonations
 *     MAKE queries AMemberRunsAQueryAboutExpectedCompanyDonations
 *     MAKE queries AMemberRunsAQueryAboutWhence
 */
function memberRunsQuery($id, $query) {
  global $testOnly; if ($testOnly) return FALSE;
  require R_ROOT . '/rweb/queries.inc';
  foreach ($queries as $k => $zot) if (substr($k, 1) == $query) $query = $k; // get leading digit
  return t\memberVisitsPage($id, "community/data/qName=$query");
}
