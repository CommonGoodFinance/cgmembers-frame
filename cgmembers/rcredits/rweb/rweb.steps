<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  global $channel; 
  $channel = TX_WEB;

  global $sms_devel; $sms_devel = TRUE;
  r\dbQ('DELETE FROM users WHERE uid>1000');
  r\dbQ('TRUNCATE r_sms');
  r\dbQ('TRUNCATE r_txs');
  r\dbQ('DELETE FROM r_smarts WHERE owner>1000');
  r\dbQ('DELETE FROM file_managed WHERE uid>1000');
  r\dbQ('TRUNCATE r_relations');
  r\dbQ('TRUNCATE r_log'); // so we don't find results from the wrong test
  r\dbQ('TRUNCATE sequences');
  r\dbQ('TRUNCATE r_invites');
  r\dbQ('ALTER TABLE sequences AUTO_INCREMENT=' . u\a2n('ZZA'));

  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}

  r\acct::_clear(); // empty the acct cache
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

function tlog($msg, $type = 'test', $info = array()) {return u\log($msg, $type, $info);}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: Transact AMemberAsksToChargeAnotherMember MAKE
 *     Transact AMemberAsksToPayAnotherMember MAKE
 */
function memberCompletesFormWithValues($id, $formName, $values, $confirmed = FALSE) {
  global $testOnly; //debug(compact(u\ray('id formName values confirmed testOnly')));
//  global $testOnly; if ($testOnly) return FALSE;
  global $testConfirmation; // confirmation message output, if any

  if (r\dbExists('users', "name='abeone'")) die('1 ' . print_r(debug_backtrace(), 1));
  $values = $values[0];
  t\fixCountryAndState($values);
  if (@$values['email']) $values = u\changeKey('email', 'mail', $values);
  
  t\logIn($id);

  $form = t\pageForm($formName, FALSE);
  if ($formName == 'pay' or $formName == 'charge') {
    $formName = 'Tx';
  } else $confirmed = TRUE;

  $errorsBefore = t\getErrors();
  
  $dfts = array();
  foreach ($form as $key => $field) if (substr($key, 0, 1) != '#') {
//    u\setDft($dft, @$field['#default_value']);
    if ($field['#type'] == 'hidden') $dfts[$key] = $field['#value'];
  }
  $sta['values'] = $sta['input'] = $values + $dfts;
  if (!$confirmed) foreach (t\postProcess($form, $formName, 'validate') as $one) $one($form, $sta);

  if (count($errors = t\getErrors()) > count($errorsBefore)) {
    // NO! if (!empty($errors)) return FALSE;
    debug(compact(u\ray('id formName values confirmed one errors')));
  } else {
    $testConfirmation = @$sta['confirm'];
    $lastIdentifierTag = '</div identifiers>';
    if ($i = strpos($testConfirmation, $lastIdentifierTag)) $testConfirmation = substr($testConfirmation, $i + strlen($lastIdentifierTag));
    foreach (t\postProcess($form, $formName, 'submit') as $one) {
      $one($form, $sta);
    }
  }
  return TRUE;
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: Signup ANewbieRegisters MAKE
 *     Transact AMemberConfirmsRequestToChargeAnotherMember MAKE
 *     Transact AMemberConfirmsRequestToPayAnotherMember MAKE
 */
function memberConfirmsFormWithValues($id, $formName, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  return memberCompletesFormWithValues($id, $formName, $values, TRUE);
}

/**
 * a member confirms form (ARG) (which logs out) with values: (ARG)
 *
 * in: 
 */
function aMemberConfirmsFormwhichLogsOutWithValues($formName, $values) {
  global $testOnly; if ($testOnly) return FALSE;
  global $skipToStep;
//  $result = t\postLogout(__FUNCTION__) ?: 
  return MemberConfirmsFormWithValues('?', $formName, $values);
//  $skipToStep = NULL;
  return $result;
}

/*
  $sta = array();
 * $sta['values']['mail'] = 'robouser@example.com';
 * $sta['values']['pass']['pass1'] = 'password';
 * $sta['values']['pass']['pass2'] = 'password';
 * $sta['values']['op'] = t('Create new account');
 * drupal_form_submit('user_register_form', $sta);
 * @endcode
 
 function drupal_get_form($form_id) {
  $sta = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $sta['build_info']['args'] = $args;

  return drupal_build_form($form_id, $sta);
}
 */

/**
 * members: (ARG)
 *
 * in: Relations Setup MAKE
 *     Signup ANewbieRegisters TEST
 *     Summary Setup MAKE
 *     Transact Setup MAKE
 *     Transactions Setup MAKE
 */
function members($list) {
  global $testOnly;
  foreach ($list as $one) if (!t\makeAccount($one, $testOnly)) return FALSE;
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: Relations Setup MAKE
 *     Summary Setup MAKE
 *     Transact Setup MAKE
 *     Transact AMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact AMemberConfirmsRequestToPayAnotherMember TEST
 *     Transactions Setup MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly MAKE
 */
function transactions($list) {
  global $testOnly; 

  $function = $testOnly ? 'rCredits\\Testing\\verifyTx' : 'rCredits\\Testing\\makeTransaction';
  foreach ($list as $one) if (!$function($one)) return FALSE;
  return TRUE;
}

/**
 * we say (ARG): (ARG) with subs: (ARG)
 *
 * in: Signup ANewbieRegisters TEST
 *     Transact AMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weSayWithSubs($type, $index, $subs) {
  global $testOnly;

  $subs = @$subs[0] ?: array();
  if (isset($subs['email'])) {
    $subs['email'] = str_replace("'", '&#039;', htmlspecialchars($subs['email'])); // Drupal does this in user_register()
  }
  $msg = u\tt($index, $subs);
  $msgs = \drupal_get_messages($type ?: NULL, FALSE);
  $result = (@$msgs[$type] and array_search($msg, $msgs[$type]) !== FALSE);
  if (!$result) debug(compact('msg','msgs'));
  t\testOutput("EXPECT: $msg", 'output'); // this must come after array_search!
  return $result;
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Signup ANewbieRegisters TEST
 *     Transact AMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {
  global $testOnly;
  $subs = @$subs[0] ?: array();
  return t\findEmail($key, $email, $subs);
}

/**
 * we show (ARG) with subs: (ARG)
 *
 * in: Transact AMemberAsksToChargeAnotherMember TEST
 *     Transact AMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact AMemberAsksToPayAnotherMember TEST
 *     Transact AMemberConfirmsRequestToPayAnotherMember TEST
 */
function weShowWithSubs($page, $subs) {
  global $testOnly;
  global $testConfirmation; // confirmation message output, if any
  global $formOutput; // for testing
  
  $subs = @$subs[0] ?: array(); // comes in as "" if no subs
  if (u\abbreviates('confirm', $page)) {
    $wanted = u\tt($page, $subs);
    t\testOutput("<b>WANTED: </b>$wanted", 'screen');
    return ($wanted == $testConfirmation);
  }
  $form = strtr(t\strip(r\Web\showForm($page, @$subs['arg1'], @$subs['arg2'])), $subs);
  t\testOutput("<b>WANTED: </b>$form", 'screen');
  if ($form != $formOutput) return FALSE;
  unset($subs['arg1']);
  unset($subs['arg2']);
  foreach ($subs as $one) if (strpos($form, $one) === FALSE) return FALSE; // sometimes we dunno what to sub for
  return TRUE;
}


/**
 * we show page (ARG) with: (ARG)
 *
 * in: Relations MemberHasAnEmployeeConfirmed TEST
 *     Relations MemberHasAnEmployeeUnconfirmed TEST
 *     Relations MemberHasARelationWithAContractor TEST
 *     Relations MemberHasAnEmployeeClaimed TEST
 *     Relations EmployeeCanOnlyRead TEST
 *     Relations MemberHasAnEmployer TEST
 *     Relations MemberHasAccessToEmployeeAccount TEST
 *     Relations MemberCompanyHasRelations TEST
 *     Relations ItsComplicated TEST
 *     Signup ANewbieRegisters TEST
 *     Summary AMemberClicksOnTheSummaryTab TEST
 *     Summary AForeignRTraderClicksOnTheSummaryTab TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 */
function weShowPageWith($page, $content, $showDebugs = TRUE) {
  global $testOnly, $formOutput;
  $xi = $i = 0;
  foreach ($content as $fields) {
    foreach ($fields as $key => $one) if (strpos($one, '%') !== FALSE) t\lastMinuteSubs($fields[$key]);
    if ($showDebugs) debug($fields); // keep this
    foreach ($fields as $key => $one) {
      if ($one !== '') $i = strpos($formOutput, $one, $xi = $i);
      if ($showDebugs) t\testOutput(compact('xi','i','one'));
      if ($i === FALSE) {
        if ($showDebugs) t\testOutput(substr($formOutput, 0, $xi) . ' <b style="font-size:200%;">[OK until here]</b> ' . substr($formOutput, $xi));
        return FALSE;
      } else $i += strlen($one);
    }
  }
  return TRUE;
}

/**
 * we show page (ARG) without: (ARG)
 *
 * in: Relations MemberCompanyHasRelations TEST
 *     Relations ItsComplicated TEST
 *     Transactions AMemberLooksAtTransactionsForThePastYear TEST
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 */
function weShowPageWithout($page, $content) {
  global $testOnly;
  foreach ($content as $one) if (weShowPageWith($page, array($one), FALSE)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: Relations MemberHasAnEmployeeConfirmed MAKE
 *     Relations MemberHasAnEmployeeUnconfirmed MAKE
 *     Relations MemberHasARelationWithAContractor MAKE
 *     Relations MemberHasAnEmployeeClaimed MAKE
 *     Relations EmployeeCanOnlyRead MAKE
 *     Relations MemberHasAnEmployer MAKE
 *     Relations MemberHasAccessToEmployeeAccount MAKE
 *     Relations MemberCompanyHasRelations MAKE
 *     Relations ItsComplicated MAKE
 *     Summary Setup MAKE
 *     Transact Setup MAKE
 *     Transactions Setup MAKE
 */
function relations($relations) {
  global $testOnly; 
  foreach ($relations as $one) if (!t\makeRelation($one, $testOnly)) return FALSE;
  return TRUE;
}

/**
 * balances: (ARG)
 *
 * in: Relations Setup TEST
 *     Summary Setup TEST
 *     Transact Setup TEST
 *     Transact AMemberConfirmsRequestToChargeAnotherMember TEST
 *     Transact AMemberConfirmsRequestToPayAnotherMember TEST
 *     Transactions Setup TEST
 *     Transactions TransactionsWithOtherStatesShowUpProperly TEST
 */
function balances($list) {
  global $testOnly;
  foreach ($list as $one) if (!t\eq(t\uidCredit(t\uid($one['id']), TRUE)->balance, $one['balance'])) return FALSE;
  return TRUE;
}

/**
 * member (ARG) visits page (ARG)
 *
 * in: Relations MemberHasAnEmployeeConfirmed MAKE
 *     Relations MemberHasAnEmployeeUnconfirmed MAKE
 *     Relations MemberHasARelationWithAContractor MAKE
 *     Relations MemberHasAnEmployeeClaimed MAKE
 *     Relations EmployeeCanOnlyRead MAKE
 *     Relations MemberHasAnEmployer MAKE
 *     Relations MemberHasAccessToEmployeeAccount MAKE
 *     Relations MemberCompanyHasRelations MAKE
 *     Relations ItsComplicated MAKE
 */
function memberVisitsPage($id, $page) {
  global $testOnly; if ($testOnly) return FALSE;
  return memberVisitsPageWithOptions($id, $page, '');
}

/**
 * member (ARG) visits page (ARG) with options (ARG)
 *
 * in: Summary AMemberClicksOnTheSummaryTab MAKE
 *     Summary AForeignRTraderClicksOnTheSummaryTab MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastYear MAKE
 *     Transactions AMemberLooksAtTransactionsForThePastFewDays MAKE
 *     Transactions TransactionsWithOtherStatesShowUpProperly MAKE
 */
function memberVisitsPageWithOptions($id, $page, $options) {
  global $testOnly; if ($testOnly) return FALSE;

  $cacct = r\acct(); // save, so we can restore it
  if ($id != '?') r\acct::setDefault(r\acct(t\fullQid($id)));
  t\pageForm($page, FALSE);
//  r\Web\showForm($page, $options);
  r\acct::setDefault($cacct);
  return TRUE;
}

/**
 * member is logged out
 *
 * in: Signup Setup MAKE
 */
function memberIsLoggedOut() {
  global $testOnly;
  u\deb('memberIsLoggedOut top loggedin=' . \user_is_logged_in());
  if ($testOnly) return !\user_is_logged_in();
  
  return TRUE; // never actually log out
  if (t\postLogout(__FUNCTION__)) {
  u\deb('memberIsLoggedOut after postLogout (returning TRUE)');
    global $skipToStep; u\deb("in memberIsLoggedOut after postLogout before return TRUE skipToStep=$skipToStep");
    return TRUE;
  }
//  module_load_include('pages.inc', 'user');
//  if (\user_is_logged_in()) \user_logout(); else return TRUE;
  return FALSE; // should never get here
}

/**
 * invitation to email (ARG) is (ARG)
 *
 * in: Signup ANewbieRegisters MAKE
 */
function invitationToEmailIs($email, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  if ($code) r\invite($email, 1, $code); // invitation comes (arbitrarily) from uid 1
  t\SERVER('REQUEST_URI', "whatever/$code"); // fake the URI
  return TRUE;
}
