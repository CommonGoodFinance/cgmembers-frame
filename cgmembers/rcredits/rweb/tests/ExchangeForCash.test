<?php
//
// Feature: Exchange for cash
//   AS a player
//   I WANT to exchange rCredits for someone's cash or vice versa
//   SO I can buy the things I want, locally and elsewhere

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebExchangeForCash extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $currentTest;
  var $variant;
  const SHORT_NAME = 'ExchangeForCash';
  const FEATURE_NAME = 'rweb Test - ExchangeForCash';
  const DESCRIPTION = 'Exchange for cash';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->currentTest);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() { // especially, enable any modules required for the tests
    parent::setUp(self::MODULE);
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    sceneSetup($this, __FUNCTION__);

    switch ($this->variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id   | full_name  | phone  |'
    . '\\| .ZZA | Abe One    | +20001 |'
    . '\\| .ZZB | Bea Two    | +20002 |'
    . '\\| .ZZC | Corner Pub | +20003 |"');
    And__('transactions: "DATA'
    . '\\| created   | type       | amount | from      | to   | purpose |'
    . '\\| %today-1d | %TX_SIGNUP | 250    | community | .ZZA | signup  |'
    . '\\| %today-1d | %TX_SIGNUP | 250    | community | .ZZB | signup  |'
    . '\\| %today-1d | %TX_SIGNUP | 250    | community | .ZZC | signup  |"');
    break;


    }
  }

  // Scenario: The caller confirms a trade of rCredits for cash
  public function testTheCallerConfirmsATradeOfRCreditsForCash_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('phone +20001 confirms "100 to .ZZC for cash"');
    Then_('the community has r$-750');
    And__('phone +20003 has r$350');
    And__('phone +20001 has r$150');
    And__('we say to phone +20001 "report exchange" with subs: "DATA'
    . '\\| action | other_name | amount | balance | tid |'
    . '\\| gave   | Corner Pub | $100   | $150    | 2   |"');
  }

  // Scenario: The caller confirms an implicit trade of rCredits for cash
  public function testTheCallerConfirmsAnImplicitTradeOfRCreditsForCash_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('phone +20001 confirms "100 to .ZZC"');
    Then_('phone +20003 has r$350');
    And__('phone +20001 has r$150');
  }

  // Scenario: The caller confirms a request to trade cash for rCredits
  public function testTheCallerConfirmsARequestToTradeCashForRCredits_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('phone +20003 confirms "100 from .ZZA for cash"');
    Then_('phone +20003 has r$250');
    And__('phone +20001 has r$250');
    And__('we say to phone +20003 "report exchange request" with subs: "DATA'
    . '\\| action  | other_name | amount | tid |'
    . '\\| charged | Abe One    | $100   | 2   |"');
  }

  // Scenario: The caller confirms a unilateral trade of cash for rCredits
  public function testTheCallerConfirmsAUnilateralTradeOfCashForRCredits_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('phone +20003 can charge unilaterally');
    When_('phone +20003 confirms "100 from .ZZA for cash"');
    Then_('phone +20003 has r$350');
    And__('phone +20001 has r$150');
    And__('we say to phone +20003 "report exchange" with subs: "DATA'
    . '\\| action  | other_name | amount | balance | tid |'
    . '\\| charged | Abe One    | $100   | $350    | 2   |"');
  }

  // Scenario: The caller requests an implicit trade with insufficient balance
  public function testTheCallerRequestsAnImplicitTradeWithInsufficientBalance_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('phone +20001 says "300 to .ZZC"');
    Then_('we say to phone +20001 "short cash to" with subs: "DATA'
    . '\\| short |'
    . '\\| $50   |"');
  }

}