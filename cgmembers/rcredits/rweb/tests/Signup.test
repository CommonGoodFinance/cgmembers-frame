<?php
//
// Feature: A user signs up for rCredits
//   AS a newbie
//   I WANT to open an rCredits account
//   SO I can be part of the Common Good Economy

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebSignup extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Signup';
  const FEATURE_NAME = 'rweb Test - Signup';
  const DESCRIPTION = 'A user signs up for rCredits';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('member is logged out');
    break;


    }
  }

  // Scenario: A newbie visits the registration page with no invite
  public function testANewbieVisitsTheRegistrationPageWithNoInvite_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is ""');
    When_('member "?" visits page "signup"');
    Then_('we show "Sign up for rCredits" with: "DATA'
    . '\\|_errorPhrase         |'
    . '\\| you must be invited |"');
  }

  // Scenario: A newbie visits the registration page with bad invite
  public function testANewbieVisitsTheRegistrationPageWithBadInvite_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" visits page "signup/code=WhAtEvEr"');
    Then_('we show "Sign up for rCredits" with: "DATA'
    . '\\|_errorPhrase         |'
    . '\\| you must be invited |"');
  }

  // Scenario: A newbie visits the registration page with expired invite
  public function testANewbieVisitsTheRegistrationPageWithExpiredInvite_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    And__('invitation "c0D3" was sent on "%today-5w"');
    When_('member "?" visits page "signup/code=c0D3"');
    Then_('we show "Sign up for rCredits" with: "DATA'
    . '\\|_errorPhrase            |'
    . '\\| invitation has expired |"');
  }

  // Scenario: A newbie visits the registration page with a used invite
  public function testANewbieVisitsTheRegistrationPageWithAUsedInvite_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    And__('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone     | country | postalCode | federalId   | dob      | acctType     |'
    . '\\| Abe One  | a@ | 413-253-0000 | US      | 01001      | 111-22-3333 | 1/2/1990 | %R_PERSONAL  |"');
    When_('member "?" visits page "signup/code=c0D3"');
    Then_('we show "Sign up for rCredits" with: "DATA'
    . '\\|_errorPhrase                      |'
    . '\\| invitation has already been used |"');
  }

  // Scenario: An invited newbie visits the registration page
  public function testAnInvitedNewbieVisitsTheRegistrationPage_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" visits page "signup/code=c0D3"');
    Then_('we show "Welcome to rCredits!" with: "DATA'
    . '\\| Dwolla, Inc. is an agent of Veridian Credit Union |'
    . '\\| Terms of Service |'
    . '\\| Privacy Policy     |"');
    And__('without: "DATA'
    . '\\| Account type |'
    . '\\| Full name |"');
  }

  // Scenario: A newbie registers in Western Massachusetts
  public function testANewbieRegistersInWesternMassachusetts_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone     | country | postalCode | federalId   | dob      | acctType     |'
    . '\\| Abe One  | a@ | 413-253-0000 | US      | 01001      | 111-22-3333 | 1/2/1990 | %R_PERSONAL  |"');
    Then_('members: "DATA'
    . '\\| id   | fullName | email | phone     | postalCode | country | state | city   | flags         | floor |'
    . '\\| .AAC | Abe One  | a@ | +14132530000 | 01001      | US      | MA    | Agawam | dft,person,dw | 0     |"');
    And__('we say "status": "your account is ready"');
    And__('we email "welcome" to member "a@" with subs: "DATA'
    . '\\| fullName | name   | quid    | region | pass     | bonus           |'
    . '\\| Abe One  | abeone | NEW.AAC | new    | (varies) |  |"');
    And__('member ".AAC" one-time password is set');
    And__('we show "Welcome" with: "DATA'
    . '\\| Tmp password |'
    . '\\| New password |'
    . '\\| Confirm new password |"');
  }

  // Scenario: A newbie registers elsewhere
  public function testANewbieRegistersElsewhere_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone     | country | postalCode | federalId   | dob      | acctType     |'
    . '\\| Abe One  | a@ | 212-253-0000 | US      | 10001      | 111-22-3333 | 1/2/1990 | %R_PERSONAL  |"');
    Then_('members: "DATA'
    . '\\| id      | fullName | email | phone     | postalCode | country | state | city     | flags         |'
    . '\\| NYA.AAA | Abe One  | a@ | +12122530000 | 10001      | US      | NY    | New York | dft,person,dw |"');
    And__('we say "status": "your account is ready"');
    And__('we email "welcome" to member "a@" with subs: "DATA'
    . '\\| fullName | name   | quid    | region | pass     | bonus           |'
    . '\\| Abe One  | abeone | NYA.AAA | new    | (varies) |  |"');
    And__('member "NYA.AAA" one-time password is set');
  }

  // Scenario: A newbie registers with no case
  public function testANewbieRegistersWithNoCase_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone     | postalCode | federalId   | dob      | acctType     |'
    . '\\| abe one  | a@ | 413-253-0000 | 01002      | 111-22-3333 | 1/2/1990 | %R_PERSONAL  |"');
    Then_('members: "DATA'
    . '\\| id   | fullName | email | phone     | postalCode | state | city    | flags         | floor |'
    . '\\| .AAC | Abe One  | a@ | +14132530000 | 01002      | MA    | Amherst | dft,person,dw | 0     |"');
  }

  // Scenario: A member registers bad email
  public function testAMemberRegistersBadEmail_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName  | email     | postalCode | acctType    |'
    . '\\| Abe One   | %whatever | 01001      | %R_PERSONAL |"');
    Then_('we say "error": "bad email"');
  }

  // Scenario: A member registers bad name
  public function testAMemberRegistersBadName_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName  | email | phone     | postalCode | federalId   | dob      | acctType     |'
    . '\\| ™ %random | a@ | 413-253-0000 | 01001-3829 | 111-22-3333 | 1/2/1990 | %R_PERSONAL  |"');
    Then_('we say "error": "illegal char" with subs: "DATA'
    . '\\| field    |'
    . '\\| fullName |"');
  }

  // Scenario: A member registers bad zip
  public function testAMemberRegistersBadZip_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email     | phone | postalCode | federalId   | dob      | acctType    |'
    . '\\| Abe One  | a@ | 413-253-0001 | %random    | 111-22-3333 | 1/2/1990 | %R_PERSONAL |"');
    Then_('we say "error": "bad zip"');
  }

  // Scenario: A member registers again
  public function testAMemberRegistersAgain_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    Given('members: "DATA'
    . '\\| id   | fullName  | phone  | email | city  | state |'
    . '\\| .ZZA | Abe One    | +20001 | a@   | Atown | AK    |"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone      | postalCode | federalId   | dob      | acctType    |'
    . '\\| Bea Two   | a@ | 413-253-0002 | 01001      | 111-22-3333 | 1/2/1990 | %R_PERSONAL |"');
    Then_('we say "error": "duplicate email|forgot password" with subs: "DATA'
    . '\\| duplicateAccount | emailTagged            | passwordLink                       |'
    . '\\| Abe One          | a+whatever@example.com | %BASE_PATHpassword/a%40example.com |"');
  }

  // Scenario: A member registers with an existing company
  public function testAMemberRegistersWithAnExistingCompany_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('members: "DATA'
    . '\\| id   | fullName | email | postalCode | phone        | city     | flags          |'
    . '\\| .AAD | AAAme Co | myco@ | 01330      | +14136280000 | Ashfield | dft,company,dw |"');
    And__('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone   | postalCode | federalId   | dob      | acctType    | company  | companyPhon  | copts                    |'
    . '\\| Abe One  | a@    | 413-253-0002 | 01002 | 111-22-3333 | 1/2/1990 | %R_PERSONAL | AAAme Co | (413)628-0000 | isOwner=>1,contractor=>1 |"');
    Then_('members: "DATA'
    . '\\| id   | fullName | email | postalCode | state | city    | flags         |'
    . '\\| .AAC | Abe One  | a@    | 01002      | MA    | Amherst | dft,person,dw |"');
    And__('relations: "DATA'
    . '\\| id | main | agent | permission | employerOk | employeeOk | isOwner | amount | draw |'
    . '\\| 1  | .AAD | .AAC  |            |          0 |          1 |       1 |      0 |    0 |"');
  }

  // Scenario: A member registers with an unknown company
  public function testAMemberRegistersWithAnUnknownCompany_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone   | postalCode | federalId   | dob      | acctType    | company  | companyPhon  | copts          |'
    . '\\| Abe One  | a@    | 413-253-9876 | 01002 | 111-22-3333 | 1/2/1990 | %R_PERSONAL | AAAme Co | (413)628-0000 | employeeOk=>1  |"');
    Then_('members: "DATA'
    . '\\| id   | fullName | email | postalCode | phone        | city    | flags         |'
    . '\\| .AAC | Abe One  | a@    | 01002      | +14132539876 | Amherst | dft,person,dw |"');
    And__('no relation: "DATA'
    . '\\| main | agent |'
    . '\\| .AAD | .AAC  |"');
  }

  // Scenario: A member registers with a company with no relation
  public function testAMemberRegistersWithACompanyWithNoRelation_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone        | postalCode | federalId  | dob  | acctType    | company  | companyPhon  | companyOptions |'
    . '\\| Abe One  | a@    | 413-253-0002 | 01002 | 111-22-3333 | 1/2/1990 | %R_PERSONAL | AAAme Co | (413)628-0000 |               |"');
    Then_('we say "error": "what relation"');
  }

  // Scenario: A member registers with a bad company
  public function testAMemberRegistersWithABadCompany_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone     | postalCode | federalId   | dob      | acctType    | company  | companyPhon | companyOptions |'
    . '\\| Abe One  | a@ | 413-253-9876 | 01001      | 111-22-3333 | 1/2/1990 | %R_PERSONAL | 2sp  ces | (413)628-0000 | isOwner=>1    |"');
    Then_('we say "error": "multiple spaces" with subs: "DATA'
    . '\\| field   |'
    . '\\| Company |"');
  }

  // Scenario: A member registers with a bad company phone
  public function testAMemberRegistersWithABadCompanyPhone_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email  | phone    | postalCode | federalId   | dob      | acctType    | company  | companyPhon | companyOptions |'
    . '\\| Abe One  | a@ | 413-253-9876 | 01001      | 111-22-3333 | 1/2/1990 | %R_PERSONAL | AAAme Co | %random      | isOwner=>1     |"');
    Then_('we say "error": "bad company phone" with subs: ""');
  }

  // Scenario: A member registers a company
  public function testAMemberRegistersACompany_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('members: "DATA'
    . '\\| id   | fullName | email | postalCode | federalId   | phone        | flags         |'
    . '\\| .AAC | Abe One  | a@    | 01330      | 111-22-3333 | +14136280000 | dft,person,dw |"');
    And__('invitation to email "a@" is "c0D3"');
    When_('member "?" visits page "signup/code=c0D3&dwok=1&personal=&by=NEW.AAC&flow=from&isOwner=1&employeeOk=1"');
    Then_('we show "Sign up for rCredits" with: "DATA'
    . '\\|_nameDescription      |'
    . '\\| properly capitalized |"');
    And__('with options: "DATA'
    . '\\|_acctType            |'
    . '\\| private corporation |"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1&by=NEW.AAC&flow=from&isOwner=1&employeeOk=1" with values: "DATA'
    . '\\| fullName | email       | phone | postalCode | federalId   | acctType        | company  | companyPhon | companyOptions |'
    . '\\| AAcme Co | aco@ | 413-253-9876 | 01002      | 111-22-3333 | %CO_CORPORATION | | | |"');
    Then_('members: "DATA'
    . '\\| id   | fullName | email | postalCode | phone        | city    | flags          | floor |'
    . '\\| .AAD | AAcme Co | aco@  | 01002      | +14132539876 | Amherst | dft,company,dw |     0 |"');
    And__('relations: "DATA'
    . '\\| id | main | agent | permission | employerOk | employeeOk | isOwner | amount | draw |'
    . '\\| 1  | .AAD | .AAC  | manage     |          1 |          1 |       1 |      0 |    1 |"');
    And__('balances: "DATA'
    . '\\| id   | r | usd | rewards |'
    . '\\| .AAD | 0 |   0 |       0 |"');
    And__('we say "status": "company is ready"');
    And__('we show "Welcome" with: ""');
  }

  // Scenario: A newbie registers from elsewhere
  public function testANewbieRegistersFromElsewhere_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invitation to email "a@" is "c0D3"');
    When_('member "?" confirms form "signup/code=c0D3&dwok=1" with values: "DATA'
    . '\\| fullName | email | phone       | postalCode | federalId   | dob      | acctType    |'
    . '\\| Abe One  | a@ | (333) 253-0000 | 03768-2345 | 111-22-3333 | 1/2/1990 | %R_PERSONAL |"');
    Then_('members: "DATA'
    . '\\| id      | fullName | email | phone     | postalCode | state | city | flags         |'
    . '\\| NEN.AAA | Abe One  | a@ | +13332530000 | 03768-2345 | NH    | Lyme | dft,person,dw |"');
    And__('we say "status": "your account is ready"');
    And__('we email "welcome" to member "a@" with subs: "DATA'
    . '\\| fullName | name   | quid    | region | pass     |'
    . '\\| Abe One  | abeone | NEN.AAA | new    | (varies) |"');
    And__('we show "Welcome" with: ""');
  }

}