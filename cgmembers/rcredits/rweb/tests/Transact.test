<?php
//
// Feature: Transact
//   AS a member
//   I WANT to transfer rCredits to or from another member (acting on their own behalf)
//   SO I can buy and sell stuff.
//   We will eventually need variants or separate feature files for neighbor (member of different community within the region) to member, etc.
//   And foreigner (member on a different server) to member, etc.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebTransact extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Transact';
  const FEATURE_NAME = 'rweb Test - Transact';
  const DESCRIPTION = 'Transact';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName | address | city  | state  | postalCode | country | postalAddr | rebate | flags      |'
    . '\\| .ZZA | Abe One  | 1 A St. | Atown | Alaska | 01000      | US      | 1 A, A, AK |  5 | ok,confirmed,bona    |'
    . '\\| .ZZB | Bea Two  | 2 B St. | Btown | Utah   | 02000      | US      | 2 B, B, UT | 10 | ok,confirmed,bona    |'
    . '\\| .ZZC | Our Pub  | 3 C St. | Ctown | Cher   |            | France  | 3 C, C, FR | 10 | ok,confirmed,co,bona |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission |'
    . '\\| :ZZA | .ZZA | .ZZB  | buy        |'
    . '\\| :ZZB | .ZZB | .ZZA  | read       |'
    . '\\| :ZZC | .ZZC | .ZZB  | buy        |'
    . '\\| :ZZD | .ZZC | .ZZA  | sell       |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type   | amount | from | to   | purpose | taking |'
    . '\\|   1 | %today-6m | signup |    250 | ctty | .ZZA | signup  | 0      |'
    . '\\|   2 | %today-6m | signup |    250 | ctty | .ZZB | signup  | 0      |'
    . '\\|   3 | %today-6m | signup |    250 | ctty | .ZZC | signup  | 0      |"');
    Then_('balances: "ASSOC'
    . '\\| id   |    r |'
    . '\\| ctty | -750 |'
    . '\\| .ZZA |  250 |'
    . '\\| .ZZB |  250 |'
    . '\\| .ZZC |  250 |"');
    break;


    }
  }

  // Scenario: A member asks to charge another member for goods
  public function testAMemberAsksToChargeAnotherMemberForGoods_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "charge" with values: "ASSOC'
    . '\\| op     | who     | amount | goods | purpose |'
    . '\\| charge | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    Then_('we show "confirm charge" with subs: "ASSOC'
    . '\\| amount | otherName | why                |'
    . '\\| $100   | Bea Two   | goods and services |"');
  }

  // Scenario: A member confirms request to charge another member
  public function testAMemberConfirmsRequestToChargeAnotherMember_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" confirms form "charge" with values: "ASSOC'
    . '\\| op     | who     | amount | goods | purpose |'
    . '\\| charge | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    Then_('we say "status": "report tx|balance unchanged" with subs: "ASSOC'
    . '\\| did     | otherName | amount | why                |'
    . '\\| charged | Bea Two   | $100   | goods and services |"');
    And__('we message "new invoice" to member ".ZZB" with subs: "ASSOC'
    . '\\| otherName | amount | purpose |'
    . '\\| Abe One   | $100   | labor   |"');
    And__('invoices: "ASSOC'
    . '\\| nvid | created | status      | amount | from | to  | for   |'
    . '\\|    1 | %today  | %TX_PENDING |    100 | .ZZB  | .ZZA | labor |"');
    And__('balances: "ASSOC'
    . '\\| id   |    r |'
    . '\\| ctty | -750 |'
    . '\\| .ZZA |  250 |'
    . '\\| .ZZB |  250 |'
    . '\\| .ZZC |  250 |"');
  }

  // Scenario: A member asks to pay another member for goods
  public function testAMemberAsksToPayAnotherMemberForGoods_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    Then_('we show "confirm payment" with subs: "ASSOC'
    . '\\| amount | otherName | why                |'
    . '\\| $100   | Bea Two   | goods and services |"');
  }

  // Scenario: A member asks to pay another member for loan/reimbursement
  public function testAMemberAsksToPayAnotherMemberForLoanreimbursement_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Bea Two | 100    | %FOR_NONGOODS | loan    |"');
    Then_('we show "confirm payment" with subs: "ASSOC'
    . '\\| amount | otherName | why                     |'
    . '\\| $100   | Bea Two   | loan/reimbursement/etc. |"');
  }

  // Scenario: A member confirms request to pay another member
  public function testAMemberConfirmsRequestToPayAnotherMember_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    Then_('we say "status": "report tx|reward" with subs: "ASSOC'
    . '\\| did    | otherName | amount | why                | rewardAmount |'
    . '\\| paid   | Bea Two   | $100   | goods and services | $5           |"');
    And__('we notice "new payment|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName | amount | payeePurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Abe One   | $100   | labor        | reward          |               $10 |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created | type     | amount | from  | to   | purpose      | taking |'
    . '\\|   4 | %today  | transfer |    100 | .ZZA  | .ZZB | labor        | 0      |'
    . '\\|   5 | %today  | rebate   |      5 | ctty  | .ZZA | rebate on #2 | 0      |'
    . '\\|   6 | %today  | bonus    |     10 | ctty  | .ZZB | bonus on #2  | 0      |"');
    And__('balances: "ASSOC'
    . '\\| id   |    r |'
    . '\\| ctty | -765 |'
    . '\\| .ZZA |  155 |'
    . '\\| .ZZB |  360 |'
    . '\\| .ZZC |  250 |"');
  }

  // Scenario: A member confirms request to pay another member a lot
  public function testAMemberConfirmsRequestToPayAnotherMemberALot_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r             |'
    . '\\| .ZZB | %R_MAX_AMOUNT |"');
    When_('member ".ZZB" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount        | goods | purpose |'
    . '\\| pay | Our Pub | %R_MAX_AMOUNT | %FOR_GOODS     | food    |"');
    Then_('transactions: "ASSOC'
    . '\\| xid | created | type     | amount        | from  | to   | purpose      | taking |'
    . '\\|   4 | %today  | transfer | %R_MAX_AMOUNT | .ZZB  | .ZZC | food         | 0      |'
    . '\\|   5 | %today  | rebate   | %R_MAX_REBATE | ctty  | .ZZB | rebate on #2 | 0      |'
    . '\\|   6 | %today  | bonus    | %R_MAX_REBATE | ctty  | .ZZC | bonus on #2  | 0      |"');
  }

  // Scenario: A member confirms request to pay a member company
  public function testAMemberConfirmsRequestToPayAMemberCompany_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next DO code is "whatever"');
    When_('member ".ZZA" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Our Pub | 100    | %FOR_GOODS     | stuff   |"');
    Then_('we say "status": "report tx|reward" with subs: "ASSOC'
    . '\\| did    | otherName | amount | why                | rewardAmount |'
    . '\\| paid   | Our Pub   | $100   | goods and services | $5           |"');
    And__('we notice "new payment|reward other" to member ".ZZC" with subs: "ASSOC'
    . '\\| created | fullName | otherName | amount | payeePurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Our Pub  | Abe One   | $100 | stuff | reward | $10 |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created | type     | amount | from  | to   | purpose      | taking |'
    . '\\|   4 | %today  | transfer |    100 | .ZZA  | .ZZC | stuff        | 0      |'
    . '\\|   5 | %today  | rebate   |      5 | ctty  | .ZZA | rebate on #2 | 0      |'
    . '\\|   6 | %today  | bonus    |     10 | ctty  | .ZZC | bonus on #2  | 0      |"');
    And__('balances: "ASSOC'
    . '\\| id   |    r |'
    . '\\| ctty | -765 |'
    . '\\| .ZZA |  155 |'
    . '\\| .ZZB |  250 |'
    . '\\| .ZZC |  360 |"');
  }

  // Scenario: A member confirms request to pay the same member the same amount
  public function testAMemberConfirmsRequestToPayTheSameMemberTheSameAmount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZA" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    When_('member ".ZZA" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    Then_('we say "error": "duplicate transaction" with subs: "ASSOC'
    . '\\| op   |'
    . '\\| paid |"');
  }

  // Scenario: A member confirms request to charge the same member the same amount
  public function testAMemberConfirmsRequestToChargeTheSameMemberTheSameAmount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZA" confirms form "charge" with values: "ASSOC'
    . '\\| op     | who     | amount | goods | purpose |'
    . '\\| charge | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    When_('member ".ZZA" confirms form "charge" with values: "ASSOC'
    . '\\| op     | who     | amount | goods | purpose |'
    . '\\| charge | Bea Two | 100    | %FOR_GOODS     | labor   |"');
    Then_('we say "error": "duplicate transaction" with subs: "ASSOC'
    . '\\| op      |'
    . '\\| charged |"');
  }

  // Scenario: A member leaves goods blank
  public function testAMemberLeavesGoodsBlank_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZA" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods | purpose |'
    . '\\| pay | Bea Two | 100    |       | labor   |"');
    Then_('we say "error": "required field" with subs: "ASSOC'
    . '\\| field   |'
    . '\\| \'\'For\'\' |"');
  }

}