<?php
//
// Feature: Reimburse
//   AS a member
//   I WANT to repay another member with rCredits
//   SO I can be cool and save time by not having to find cash or write a check.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebReimburse extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Reimburse';
  const FEATURE_NAME = 'rweb Test - Reimburse';
  const DESCRIPTION = 'Reimburse';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName | address | city  | state  | postalCode | country | postalAddr | rebate | flags      |'
    . '\\| .ZZA | Abe One  | 1 A St. | Atown | Alaska | 01000      | US      | 1 A, A, AK |  5 | ok,confirmed,bona    |'
    . '\\| .ZZB | Bea Two  | 2 B St. | Btown | Utah   | 02000      | US      | 2 B, B, UT | 10 | ok,confirmed,bona    |'
    . '\\| .ZZC | Our Pub  | 3 C St. | Ctown | Cher   |            | France  | 3 C, C, FR | 10 | ok,confirmed,co,bona |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission | draw |'
    . '\\| :ZZA | .ZZA | .ZZB  | buy        |    1 |'
    . '\\| :ZZB | .ZZB | .ZZA  | read       |    0 |'
    . '\\| :ZZC | .ZZC | .ZZB  | buy        |    0 |'
    . '\\| :ZZD | .ZZC | .ZZA  | sell       |    0 |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type   | amount | from | to   | purpose | taking |'
    . '\\|   1 | %today-6m | signup |    250 | ctty | .ZZA | signup  | 0      |'
    . '\\|   2 | %today-6m | signup |    250 | ctty | .ZZB | signup  | 0      |'
    . '\\|   3 | %today-6m | signup |    250 | ctty | .ZZC | signup  | 0      |'
    . '\\|   4 | %today-6m | grant  |    200 | ctty | .ZZA | heroism | 0      |"');
    Then_('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty | -950 |'
    . '\\| .ZZA |  450 |'
    . '\\| .ZZB |  250 |'
    . '\\| .ZZC |  250 |"');
    break;


    }
  }

  // Scenario: A member asks to charge another member
  public function testAMemberAsksToChargeAnotherMember_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "charge" with values: "ASSOC'
    . '\\| op     | who     | amount | goods           | purpose |'
    . '\\| charge | Bea Two | 100    | %R_FOR_NONGOODS | payback |"');
    Then_('we show "confirm charge" with subs: "ASSOC'
    . '\\| amount | otherName | why         |'
    . '\\| $100   | Bea Two   | loan/reimbursement/etc. |"');
  }

  // Scenario: A member confirms request to charge another member
  public function testAMemberConfirmsRequestToChargeAnotherMember_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" confirms form "charge" with values: "ASSOC'
    . '\\| op     | who     | amount | goods      | purpose |'
    . '\\| charge | Bea Two | 100    | %R_FOR_NONGOODS | payback |"');
    Then_('we say "status": "report tx|balance unchanged" with subs: "ASSOC'
    . '\\| did     | otherName | amount | why         |'
    . '\\| charged | Bea Two   | $100   | loan/reimbursement/etc. |"');
    And__('we message "new invoice" to member ".ZZB" with subs: "ASSOC'
    . '\\| otherName | amount | purpose |'
    . '\\| Abe One   | $100   | payback |"');
    And__('invoices: "ASSOC'
    . '\\| nvid | created | status      | amount | goods      | from | to   | for   |'
    . '\\|    1 | %today  | %TX_PENDING |    100 | %R_FOR_NONGOODS | .ZZB | .ZZA | payback |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -950 |'
    . '\\| .ZZA |     450 |'
    . '\\| .ZZB |     250 |'
    . '\\| .ZZC |     250 |"');
  }

  // Scenario: A member asks to pay another member
  public function testAMemberAsksToPayAnotherMember_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods      | purpose |'
    . '\\| pay | Bea Two | 300    | %R_FOR_NONGOODS | payback |"');
    Then_('we show "confirm payment" with subs: "ASSOC'
    . '\\| amount | otherName | why         |'
    . '\\| $300   | Bea Two   | loan/reimbursement/etc. |"');
  }

  // Scenario: A member confirms request to pay another member
  public function testAMemberConfirmsRequestToPayAnotherMember_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods      | purpose |'
    . '\\| pay | Bea Two | 300    | %R_FOR_NONGOODS | payback |"');
    Then_('we say "status": "report tx" with subs: "ASSOC'
    . '\\| did    | otherName | amount | why         |'
    . '\\| paid   | Bea Two   | $300   | loan/reimbursement/etc. |"');
    And__('we notice "new payment" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName | amount | payeePurpose |'
    . '\\| %today  | Bea Two  | Abe One   | $300   | payback      |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created | type     | amount | from  | to   | goods           | purpose      | taking |'
    . '\\|   5 | %today  | transfer |    300 | .ZZA  | .ZZB | %R_FOR_NONGOODS | payback      | 0      |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -950 |'
    . '\\| .ZZA |     150 |'
    . '\\| .ZZB |     550 |'
    . '\\| .ZZC |     250 |"');
  }

  // Scenario: A member repays someone, drawing from another account
  public function testAMemberRepaysSomeoneDrawingFromAnotherAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZB" confirms form "pay" with values: "ASSOC'
    . '\\| op  | who     | amount | goods      | purpose |'
    . '\\| pay | Our Pub | 300    | %R_FOR_NONGOODS | payback |"');
    Then_('we say "status": "report tx" with subs: "ASSOC'
    . '\\| did    | otherName | amount | why         |'
    . '\\| paid   | Our Pub   | $300   | loan/reimbursement/etc. |"');
    And__('we notice "new payment" to member ".ZZC" with subs: "ASSOC'
    . '\\| created | fullName | otherName | amount | payeePurpose |'
    . '\\| %today  | Our Pub  | Bea Two   | $300   | payback      |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created | type     | amount | from  | to   | goods           | purpose |'
    . '\\|   5 | %today  | transfer |     50 | .ZZA  | .ZZB | %R_FOR_NONGOODS | automatic transfer to NEW.ZZB,automatic transfer from NEW.ZZA |'
    . '\\|   6 | %today  | transfer |    300 | .ZZB  | .ZZC | %R_FOR_NONGOODS | payback |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -950 |'
    . '\\| .ZZA |     400 |'
    . '\\| .ZZB |       0 |'
    . '\\| .ZZC |     550 |"');
  }

}