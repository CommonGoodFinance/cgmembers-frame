<?php
//
// Feature: A user signs in to their rCredits account
//   AS a member
//   I WANT to sign in to my rCredits account
//   SO I can view or change settings, view or handle past transactions, and/or pay or charge another account

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebSignin extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Signin';
  const FEATURE_NAME = 'rweb Test - Signin';
  const DESCRIPTION = 'A user signs in to their rCredits account';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName | pass | email |'
    . '\\| .ZZA | Abe One  | a1   | a@    |"');
    And__('member is logged out');
    break;


    }
  }

  // Scenario: A member visits the member site
  public function testAMemberVisitsTheMemberSite_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" visits page "signin"');
    Then_('we show "Welcome to rCredits" with: "ARRAY'
    . '\\| Username/ID | account ID, email, or username |'
    . '\\| Password    | Password problems? |'
    . '\\|_promo       | Not yet a member? |"');
  }

  // Scenario: A member signs in with username on the member site
  public function testAMemberSignsInWithUsernameOnTheMemberSite_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" confirms form "signin" with values: "ASSOC'
    . '\\| name   | pass |'
    . '\\| abeone | a1   |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
  }

  // Scenario: A member signs in with account ID on the member site
  public function testAMemberSignsInWithAccountIDOnTheMemberSite_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" confirms form "signin" with values: "ASSOC'
    . '\\| name    | pass |'
    . '\\| new.zza | a1   |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
  }

  // Scenario: A member signs in with email on the member site
  public function testAMemberSignsInWithEmailOnTheMemberSite_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" confirms form "signin" with values: "ASSOC'
    . '\\| name          | pass |'
    . '\\| a@example.com | a1   |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
  }

  // Scenario: A member types the wrong password
  public function testAMemberTypesTheWrongPassword_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" confirms form "signin" with values: "ASSOC'
    . '\\| name   | pass |'
    . '\\| abeone | a2   |"');
    Then_('we say "error": "bad login"');
  }

  // Scenario: A member types an unknown username/ID
  public function testAMemberTypesAnUnknownUsernameID_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" confirms form "signin" with values: "ASSOC'
    . '\\| name  | pass |'
    . '\\| bogus | a1   |"');
    Then_('we say "error": "bad login"');
  }

  // Scenario: A member signs in with username from rCredits.org
  public function testAMemberSignsInWithUsernameFromRCreditsorg_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('a member posts to "signinx" with values: "ASSOC'
    . '\\| id     | pw |'
    . '\\| abeone | a1 |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
  }

  // Scenario: A member signs in with account ID from rCredits.org
  public function testAMemberSignsInWithAccountIDFromRCreditsorg_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('a member posts to "signinx" with values: "ASSOC'
    . '\\| id      | pw |'
    . '\\| new.zza | a1 |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
  }

  // Scenario: A member signs in with email from rCredits.org
  public function testAMemberSignsInWithEmailFromRCreditsorg_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('a member posts to "signinx" with values: "ASSOC'
    . '\\| id            | pw |'
    . '\\| a@example.com | a1 |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
  }

  // Scenario: A member types the wrong password from rCredits.org
  public function testAMemberTypesTheWrongPasswordFromRCreditsorg_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('a member posts to "signinx" with values: "ASSOC'
    . '\\| id     | pw |'
    . '\\| abeone | a2 |"');
    Then_('we show "Welcome to rCredits"');
    And__('we say "error": "bad login"');
  }

  // Scenario: A member types an unknown username/ID from rCredits.org
  public function testAMemberTypesAnUnknownUsernameIDFromRCreditsorg_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('a member posts to "signinx" with values: "ASSOC'
    . '\\| id    | pw |'
    . '\\| bogus | a1 |"');
    Then_('we show "Welcome to rCredits"');
    And__('we say "error": "bad login"');
  }

  // Scenario: A member asks for a new password for username
  public function testAMemberAsksForANewPasswordForUsername_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next random code is "wHatEveR"');
    When_('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name   |'
    . '\\| abeone |"');
    Then_('we email "password-reset" to member "a@example.com" with subs: "ASSOC'
    . '\\| fullName | site        | name   | code     |'
    . '\\| Abe One  | %R_SITE_URL | abeone | wHatEveR |"');
  }

  // Scenario: A member asks for a new password for account ID
  public function testAMemberAsksForANewPasswordForAccountID_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next random code is "wHatEveR"');
    When_('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name    |'
    . '\\| new.zza |"');
    Then_('we email "password-reset" to member "a@example.com" with subs: "ASSOC'
    . '\\| fullName | site        | name   | code     |'
    . '\\| Abe One  | %R_SITE_URL | abeone | wHatEveR |"');
  }

  // Scenario: A member asks for a new password for email
  public function testAMemberAsksForANewPasswordForEmail_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next random code is "wHatEveR"');
    When_('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name          |'
    . '\\| a@example.com |"');
    Then_('we email "password-reset" to member "a@example.com" with subs: "ASSOC'
    . '\\| fullName | site        | name   | code     |'
    . '\\| Abe One  | %R_SITE_URL | abeone | wHatEveR |"');
  }

  // Scenario: A member asks for a new password for an unknown account
  public function testAMemberAsksForANewPasswordForAnUnknownAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name  |'
    . '\\| bogus |"');
    Then_('we say "error": "bad account id"');
  }

  // Scenario: A member asks for a new password for a company
  public function testAMemberAsksForANewPasswordForACompany_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('members: "ASSOC'
    . '\\| id   | fullName | pass | email | flags |'
    . '\\| .ZZC | Our Pub  | c1   | c@    | co    |"');
    When_('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name    |'
    . '\\| new.zzc |"');
    Then_('we say "error": "no co pass" with subs: "ASSOC'
    . '\\| company |'
    . '\\| Our Pub |"');
  }

  // Scenario: A member clicks a link to reset password
  public function testAMemberClicksALinkToResetPassword_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next random code is "wHatEveR"');
    When_('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name          |'
    . '\\| a@example.com |"');
    And__('member "?" visits page "reset/id=abeone&code=wHatEveR"');
    Then_('we show "Choose a New Password"');
    When_('member "?" confirms form "reset/id=abeone&code=wHatEveR" with values: "ASSOC'
    . '\\| newPass   | strong |'
    . '\\| %whatever | 1      |"');
    Then_('member ".ZZA" is logged in');
    And__('we show "Account Summary"');
    Given('member is logged out');
    When_('member "?" confirms form "signin" with values: "ASSOC'
    . '\\| name   | pass      |'
    . '\\| abeone | %whatever |"');
    Then_('we show "Account Summary"');
    And__('member ".ZZA" is logged in');
  }

  // Scenario: A member clicks a link to reset password with wrong code
  public function testAMemberClicksALinkToResetPasswordWithWrongCode_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next random code is "wHatEveR"');
    And__('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name          |'
    . '\\| a@example.com |"');
    When_('member "?" visits page "reset/id=abeone&code=NOTwHatEveR"');
    Then_('we say "error": "bad login"');
    And__('we show "Welcome to rCredits"');
  }

  // Scenario: A member clicks a link to reset password for unknown account
  public function testAMemberClicksALinkToResetPasswordForUnknownAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('next random code is "wHatEveR"');
    And__('member "?" completes form "account/password" with values: "ASSOC'
    . '\\| name          |'
    . '\\| a@example.com |"');
    When_('member "?" visits page "reset/id=abeone&code=NOTwHatEveR"');
    Then_('we say "error": "bad login"');
    And__('we show "Welcome to rCredits"');
  }

}