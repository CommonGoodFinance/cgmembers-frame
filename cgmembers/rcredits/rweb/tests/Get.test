<?php
//
// Feature: Get rCredits/USD
//   AS a member
//   I WANT to transfer credit to my bank account
//   SO I can pay it to non-members
//   OR
//   I WANT to transfer credit from my bank account
//   SO I can spend it through the rCredits system or hold it in the rCredits system as savings.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebGet extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Get';
  const FEATURE_NAME = 'rweb Test - Get';
  const DESCRIPTION = 'Get rCredits/USD';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id   | fullName | floor | minimum | flags                 |'
    . '\\| .ZZA | Abe One  |     0 |      10 | dft,person,ok,bank    |'
    . '\\| .ZZB | Bea Two  |     0 |      10 | dft,person,ok,bank    |'
    . '\\| .ZZC | Our Pub  |     0 |     100 | dft,person,company,ok |'
    . '\\| .ZZD | Dee Four |     0 |     100 | dft,person,ok,bank    |"');
    And__('balances: "DATA'
    . '\\| id   | r    | usd | rewards |'
    . '\\| ctty | -320 | 500 |       0 |'
    . '\\| .ZZA |    0 | 100 |      20 |'
    . '\\| .ZZB |  320 |   0 |      20 |'
    . '\\| .ZZC |    0 |  30 |      20 |'
    . '\\| .ZZD |    0 | 140 |      20 |"');
    And__('usd transfers: "DATA'
    . '\\| payer | payee | amount | tid | created   |'
    . '\\|  .ZZA |     0 |      1 |   0 | %today-5d |'
    . '\\|  .ZZA |  .ZZB |      2 |   0 | %today-3d |'
    . '\\|  .ZZA |     0 |      3 |   0 | %today-2d |'
    . '\\|  .ZZB |     0 |      4 |   5 | %today-2d |"');
    break;


    }
  }

  // Scenario: a member moves credit to the bank
  public function testAMemberMovesCreditToTheBank_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "get" with values: "DATA'
    . '\\| op  | amount |'
    . '\\| put |     12 |"');
    Then_('usd transfers: "DATA'
    . '\\| payer | payee | amount | tid | created   |'
    . '\\|  .ZZA |     0 |      1 |   1 | %today-5d |'
    . '\\|  .ZZA |  .ZZB |      2 |   0 | %today-3d |'
    . '\\|  .ZZA |     0 |      3 |   2 | %today-2d |'
    . '\\|  .ZZA |     0 |     12 |   3 | %today    |"');
    And__('we say "status": "banked" with subs: "DATA'
    . '\\| action     | amount |'
    . '\\| deposit to | $12    |"');
  }

  // Scenario: a member draws credit from the bank
  public function testAMemberDrawsCreditFromTheBank_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZB" completes form "get" with values: "DATA'
    . '\\| op  | amount      |'
    . '\\| get | %R_BANK_MIN |"');
    Then_('usd transfers: "DATA'
    . '\\| payer | payee | amount       | tid |'
    . '\\|  .ZZB |     0 | -%R_BANK_MIN |   6 |"');
    And__('we say "status": "banked" with subs: "DATA'
    . '\\| action     | amount       |'
    . '\\| draw from  | $%R_BANK_MIN |"');
  }

  // Scenario: a member moves too little to the bank
  public function testAMemberMovesTooLittleToTheBank_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "get" with values: "DATA'
    . '\\| op  | amount             |'
    . '\\| put | %(%R_BANK_MIN-.01) |"');
    Then_('we say "error": "bank too little"');
  }

  // Scenario: a member tries to cash out rewards
  public function testAMemberTriesToCashOutRewards_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes form "get" with values: "DATA'
    . '\\| op  | amount |'
    . '\\| put |     81 |"');
    Then_('we say "error": "short deposit" with subs: "DATA'
    . '\\| max |'
    . '\\| $80 |"');
  }

  // Scenario: a member moves inconveniently much to the bank
  public function testAMemberMovesInconvenientlyMuchToTheBank_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZB" completes form "get" with values: "DATA'
    . '\\| op  | amount |'
    . '\\| put |    200 |"');
    Then_('we say "error": "short deposit" with subs: "DATA'
    . '\\| max                     |'
    . '\\| $%(4*%DW_FEE_THRESHOLD) |"');
  }

  // Scenario: a member tries to go below their minimum
  public function testAMemberTriesToGoBelowTheirMinimum_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZD" completes form "get" with values: "DATA'
    . '\\| op  | amount |'
    . '\\| put |     50 |"');
    Then_('we say "error": "change min first"');
  }

  // Scenario: a member asks to do two transfers out in one day
  public function testAMemberAsksToDoTwoTransfersOutInOneDay_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('usd transfers: "DATA'
    . '\\| payer | payee | amount | tid | created   |'
    . '\\|  .ZZD |     0 |      6 |   0 | %today    |"');
    When_('member ".ZZD" completes form "get" with values: "DATA'
    . '\\| op  | amount |'
    . '\\| put |     10 |"');
    Then_('we show "Bank Transfer" with: "DATA'
    . '\\| Pending: |'
    . '\\| You have total pending transfer requests of $6 to your bank account. |"');
    And__('we say "error": "short deposit" with subs: "DATA'
    . '\\| max |'
    . '\\| $0  |"');
  }

}