<?php
//
// Feature: Relations
//   AS a member
//   I WANT to manage my account's relations with other rCredits accounts
//   SO I can buy and sell stuff on behalf of other accounts, and they on mine.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rweb.steps';

class rwebRelations extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Relations';
  const FEATURE_NAME = 'rweb Test - Relations';
  const DESCRIPTION = 'Relations';
  const MODULE = 'rweb';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rweb.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | acctType    | flags      |'
    . '\\| .ZZA | Abe One    | personal    | ok,bona    |'
    . '\\| .ZZB | Bea Two    | personal    | ok,bona    |'
    . '\\| .ZZC | Corner Pub | corporation | ok,co,bona |'
    . '\\| .ZZD | Dee Four   | personal    | ok,bona    |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type       | amount | from      | to   | purpose | taking |'
    . '\\|   1 | %today-6m | %TX_SIGNUP |    250 | community | .ZZA | signup  | 0      |'
    . '\\|   2 | %today-6m | %TX_SIGNUP |    250 | community | .ZZB | signup  | 0      |'
    . '\\|   3 | %today-6m | %TX_SIGNUP |    250 | community | .ZZC | signup  | 0      |"');
    Then_('balances: "ASSOC'
    . '\\| id        | balance |'
    . '\\| community |    -750 |'
    . '\\| .ZZA      |     250 |'
    . '\\| .ZZB      |     250 |'
    . '\\| .ZZC      |     250 |"');
    break;


    }
  }

  // Scenario: Member has an employee, confirmed
  public function testMemberHasAnEmployeeConfirmed_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission   | employee | isOwner | draw |'
    . '\\| 1  | .ZZA | .ZZD  | scan         | 1          | 1       | 0    |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | Draw | My employee? | Family? | Permission |_requests      |'
    . '\\| Dee Four   | No   | Yes          | Yes     | %can_scan  | -- |"');
  }

  // Scenario: Member has an employee, unconfirmed
  public function testMemberHasAnEmployeeUnconfirmed_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission | employee | isOwner |'
    . '\\| 1  | .ZZA | .ZZD  | refund     | 1          | 0       |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission  |_requests      |'
    . '\\| Dee Four   | Yes          | No      | %can_refund | --       |"');
  }

  // Scenario: Member has a relation with a contractor
  public function testMemberHasARelationWithAContractor_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission | employee | isOwner |'
    . '\\| 1  | .ZZA | .ZZB  | buy        | 0          | 0        |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission |_requests      |'
    . '\\| Bea Two    | No           | No      | %can_buy   | --            |"');
  }

  // Scenario: Member has an employee, claimed
  public function testMemberHasAnEmployeeClaimed_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission   | employee | isOwner |'
    . '\\| 1  | .ZZA | .ZZD  | sell         | 0          | 0       |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission |_requests      |'
    . '\\| Dee Four   | No           | No      | %can_sell  | -- |"');
  }

  // Scenario: Employee can only read
  public function testEmployeeCanOnlyRead_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission | employee | isOwner |'
    . '\\| 1  | .ZZA | .ZZD  | read       | 1          | 1       |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission |_requests      |'
    . '\\| Dee Four   | Yes          | Yes     | %can_read  | --       |"');
  }

  // Scenario: Member has an employer
  public function testMemberHasAnEmployer_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission   | employee | isOwner |'
    . '\\| 1  | .ZZB | .ZZA  | sell         | 1          | 1        |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission |_requests      |"');
    And__('without: "ARRAY'
    . '\\| Bea Two |"');
  }

  // Scenario: Member has access to employee account
  public function testMemberHasAccessToEmployeeAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission | employee | isOwner |'
    . '\\| 1  | .ZZA | .ZZD  |            | 1          | 1        |'
    . '\\| 2  | .ZZD | .ZZA  | sell       | 0          | 0        |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission |_requests      |'
    . '\\| Dee Four   | Yes          | Yes     | %can_none  | --            |"');
    When_('member ".ZZD" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission |_requests      |'
    . '\\| Abe One    | No           | No      | %can_sell  | -- |"');
  }

  // Scenario: Member company has relations
  public function testMemberCompanyHasRelations_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id   | main | agent | permission | employee | isOwner |'
    . '\\| :ZZA | .ZZC | .ZZA  | manage     | 1          | 1        |"');
    When_('member ":ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other   | My employee? | Owns | Permission     |_requests      |'
    . '\\| Abe One | Yes          | Yes  | manage account | request rCard |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission   |_requests      |"');
    And__('without: "ARRAY'
    . '\\| Corner Pub |"');
  }

  // Scenario: It's complicated
  public function testItsComplicated_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id   | main | agent | permission | employee | isOwner |'
    . '\\| .ZZA | .ZZA | .ZZD  | manage     | 1        | 1       |'
    . '\\| .ZZB | .ZZD | .ZZA  |            | 0        | 0       |'
    . '\\| .ZZC | .ZZA | .ZZC  | buy        | 0        | 0       |'
    . '\\| .ZZD | .ZZC | .ZZA  | scan       | 1        | 0       |'
    . '\\| .ZZE | .ZZA | .ZZB  | sell       | 1        | 1       |'
    . '\\| .ZZF | .ZZB | .ZZA  |            | 1        | 0       |"');
    When_('member ".ZZA" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other      | My employee? | Family? | Permission  |_requests      |'
    . '\\| Bea Two    | Yes          | Yes     | %can_sell   | -- |'
    . '\\| Corner Pub | --           | No      | --          | --       |'
    . '\\| Dee Four   | Yes          | Yes     | %can_manage | -- |"');
    When_('member ".ZZB" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other   | My employee? | Family? | Permission |_requests      |'
    . '\\| Abe One | Yes          | No      | %can_none  | --            |"');
    When_('member ".ZZD" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other   | My employee? | Family? | Permission |_requests      |'
    . '\\| Abe One | No           | No      | %can_none  | --            |"');
    And__('with: "ARRAY'
    . '\\|_Header  |'
    . '\\| Family? |"');
    When_('member ":ZZD" visits page "account/relations"');
    Then_('we show "Relations" with: "ARRAY'
    . '\\| Other   | My employee? | Owns | Permission  |_requests      |'
    . '\\| Abe One | Yes          | No   | %can_scan | request Cashier Card |"');
  }

  // Scenario: A member adds a relation
  public function testAMemberAddsARelation_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes relations form with values: "ASSOC'
    . '\\| newPerson |'
    . '\\| beatwo    |"');
    Then_('we say "status": "report new relation" with subs: "ASSOC'
    . '\\| who     |'
    . '\\| Bea Two |"');
    And__('we show "Relations" with: "ARRAY'
    . '\\| Other      | Draw | My employee? | Family? | Permission |_requests      |'
    . '\\| Bea Two    | No   | No           | No      | %can_none  | --            |"');
  }

  // Scenario: A member tries to add a relation with self
  public function testAMemberTriesToAddARelationWithSelf_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member ".ZZA" completes relations form with values: "ASSOC'
    . '\\| newPerson |'
    . '\\| abeone    |"');
    Then_('we say "error": "no self-relation"');
  }

  // Scenario: A member tries to add a relation again
  public function testAMemberTriesToAddARelationAgain_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('relations: "ASSOC'
    . '\\| id | main | agent | permission | employee | isOwner |'
    . '\\| 1  | .ZZA | .ZZB  | scan       | 1        | 1       |"');
    When_('member ".ZZA" completes relations form with values: "ASSOC'
    . '\\| newPerson |'
    . '\\| beatwo    |"');
    Then_('we say "error": "already related"');
  }

}