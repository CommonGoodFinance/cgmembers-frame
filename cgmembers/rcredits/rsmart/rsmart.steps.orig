<?php
/**
 * @file
 * rPos Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */

use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;

require_once __DIR__ . '/../defs.inc';

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
  require_once __DIR__ . '/../rsmart/rsmart.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup() {
  t\clear(TX_POS);
}

/**
 * members: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE coupons Setup
 *     MAKE exchange Setup
 *     MAKE identify Setup
 *     MAKE joint Setup
 *     MAKE offline Setup
 *     MAKE startup Setup
 *     MAKE time Setup
 *     MAKE transact Setup
 *     MAKE undo Setup
=======
 * in: MAKE Joint Setup
 *     MAKE Exchange Setup
 *     MAKE Temp Setup
 *     MAKE Coupons Setup
 *     MAKE Undo Setup
 *     MAKE Time Setup
 *     MAKE Identify Setup
 *     MAKE Offline Setup
 *     MAKE Startup Setup
 *     MAKE Transact Setup
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function members($list) {return t\members($list);}

/**
 * relations: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE coupons Setup
 *     MAKE exchange Setup
 *     MAKE identify Setup
 *     MAKE joint Setup
 *     MAKE offline Setup
 *     MAKE startup Setup
 *     MAKE time Setup
 *     MAKE transact Setup
 *     MAKE undo Setup
=======
 * in: MAKE Joint Setup
 *     MAKE Exchange Setup
 *     MAKE Temp Setup
 *     MAKE Coupons Setup
 *     MAKE Undo Setup
 *     MAKE Time Setup
 *     MAKE Identify Setup
 *     MAKE Offline Setup
 *     MAKE Startup Setup
 *     MAKE Transact Setup
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function relations($relations) {return t\relations($relations);}

/**
 * transactions: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST coupons AMemberRedeemsAGiftCoupon
 *     MAKE exchange Setup
 *     MAKE identify Setup
 *     MAKE joint Setup
 *     MAKE offline Setup
 *     MAKE offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE transact Setup
 *     MAKE undo Setup
 *     MAKE undo AnAgentAsksToUndoACharge
 *     MAKE undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE undo AnAgentAsksToUndoARefund
 *     MAKE undo AnAgentAsksToUndoACashoutCharge
 *     MAKE undo AnAgentAsksToUndoACashinPayment
 *     MAKE undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE undo AnAgentAsksToUndoARefundWithoutPermission
 *     BOTH undo ACashierReversesATransactionWithInsufficientFunds
=======
 * in: MAKE Joint Setup
 *     MAKE Exchange Setup
 *     MAKE Temp Setup
 *     TEST Coupons AMemberRedeemsAGiftCoupon
 *     MAKE Undo Setup
 *     MAKE Undo AnAgentAsksToUndoACharge
 *     MAKE Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE Undo AnAgentAsksToUndoARefund
 *     MAKE Undo AnAgentAsksToUndoACashoutCharge
 *     MAKE Undo AnAgentAsksToUndoACashinPayment
 *     MAKE Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE Undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE Undo AnAgentAsksToUndoARefundWithoutPermission
 *     BOTH Undo ACashierReversesATransactionWithInsufficientFunds
 *     MAKE Identify Setup
 *     MAKE Offline Setup
 *     MAKE Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE Transact Setup
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function transactions($list) {return t\transactions($list);}

/**
 * agent (ARG) asks device (ARG) to identify (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE identify ACashierSignsIn
 *     MAKE identify DeviceHasNoIdentifierYet
 *     MAKE identify DeviceShouldHaveAnIdentifier
 *     MAKE identify ACashierSignsInSigningAnotherCashierOut
 *     MAKE identify AManagerSignsIn
 *     MAKE identify ACashierScansACustomerCard
 *     MAKE identify TheDefaultCashierScansACustomerCard
 *     MAKE identify TheDefaultCashierScansADeactivatedCard
 *     MAKE identify AnUnauthorizedCashierScansIn
 *     MAKE identify ACashierScansACustomerCardBeforeSigningIn
 *     MAKE identify ACashierAsksUsToIdentifyTheCashiersOwnCard
 *     MAKE identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     MAKE identify ACashierScansACompanyCustomerCard
 *     MAKE identify ANonyetactiveMemberCardIsScanned
 *     MAKE identify AMemberMakesAPurchaseForTheFirstTime
 *     MAKE time ACashierSignsIn
=======
 * in: MAKE Time ACashierSignsIn
 *     MAKE Identify ACashierSignsIn
 *     MAKE Identify DeviceHasNoIdentifierYet
 *     MAKE Identify DeviceShouldHaveAnIdentifier
 *     MAKE Identify ACashierSignsInSigningAnotherCashierOut
 *     MAKE Identify AManagerSignsIn
 *     MAKE Identify ACashierScansACustomerCard
 *     MAKE Identify TheDefaultCashierScansACustomerCard
 *     MAKE Identify TheDefaultCashierScansADeactivatedCard
 *     MAKE Identify AnUnauthorizedCashierScansIn
 *     MAKE Identify ACashierScansACustomerCardBeforeSigningIn
 *     MAKE Identify ACashierAsksUsToIdentifyTheCashiersOwnCard
 *     MAKE Identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     MAKE Identify ACashierScansACompanyCustomerCard
 *     MAKE Identify ANonyetactiveMemberCardIsScanned
 *     MAKE Identify AMemberMakesAPurchaseForTheFirstTime
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function agentAsksDeviceToIdentify($agent, $device, $qr) {
  return agentAsksDeviceToIdentifyWithPIN($agent, $device, $qr);
}

/**
 * we respond with: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST identify ACashierSignsIn
 *     TEST identify DeviceHasNoIdentifierYet
 *     TEST identify ACashierSignsInSigningAnotherCashierOut
 *     TEST identify AManagerSignsIn
 *     TEST identify ACashierScansACustomerCard
 *     TEST identify TheDefaultCashierScansACustomerCard
 *     TEST identify ACustomerScansTheirOwnCardForSelfservice
 *     TEST identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     TEST identify ACashierScansACompanyCustomerCard
 *     TEST identify AMemberMakesAPurchaseForTheFirstTime
 *     TEST time TheDeviceAsksForTheTime
 *     TEST time ACashierSignsIn
=======
 * in: TEST Time TheDeviceAsksForTheTime
 *     TEST Time ACashierSignsIn
 *     TEST Identify ACashierSignsIn
 *     TEST Identify DeviceHasNoIdentifierYet
 *     TEST Identify ACashierSignsInSigningAnotherCashierOut
 *     TEST Identify AManagerSignsIn
 *     TEST Identify ACashierScansACustomerCard
 *     TEST Identify TheDefaultCashierScansACustomerCard
 *     TEST Identify ACustomerScansTheirOwnCardForSelfservice
 *     TEST Identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     TEST Identify ACashierScansACompanyCustomerCard
 *     TEST Identify AMemberMakesAPurchaseForTheFirstTime
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function weRespondWith($args) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;

/**/ t\output('expecting: ' . print_r($args[0], 1));
  foreach ($args[0] as $k => $v) {
    if ($k == 'descriptions' or $k == 'bad') $v = empty($v) ? [] : ray($v);
    if ($k == 'can') { // currently tests only signed-out permissions
      $flags = 0;
      if ($v) foreach (ray($v) as $one) $flags |= u\bit(u\consta('co', $one));
      $v = $flags & APP_CAN_MASK;
      if (@$rposResult[$k] & (u\bit(CO_MANAGE) << (APP_CAN_BITS + 1))) $v |= (u\bit(CO_MANAGE) << (APP_CAN_BITS + 1)); // make manage bit go away, since it applies to agent
    }
    if ($k == 'device' and $v == '?' and $rposResult[$k]) continue; // any value will do for new dev
    if ($k == 'time' and t\approxTime($v, $rposResult["time"])) continue; // %now time is approximate
    
    if ($v != @$rposResult[$k]) {
/**/  $v = print_r(@$v, 1);
/**/  t\output("Expected $k=$v, got:" . print_r(@$rposResult[$k], 1));
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * agent (ARG) asks device (ARG) for a picture of member (ARG) with card code (ARG)
 *
 * in: MAKE identify DeviceAsksForAPictureToGoWithTheQR
 *     MAKE identify DeviceAsksForAPictureButThereIsntOne
 *     MAKE identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function agentAsksDeviceForAPictureOfMemberWithCardCode($agent, $device, $member, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('photo', compact(ray('member code')), $agent, $device);
}

/**
 * member (ARG) has picture (ARG)
 *
 * in: MAKE identify DeviceAsksForAPictureToGoWithTheQR
 *     MAKE identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function memberHasPicture($id, $picture) {
  global $testOnly; if ($testOnly) return FALSE;
  if (!$a = r\acct(t\uid($id))) return t\output("Not an account: $id");
  return t\makePicture($picture, $a);
}

/**
 * we respond with picture (ARG)
 *
 * in: TEST identify DeviceAsksForAPictureToGoWithTheQR
 *     TEST identify DeviceAsksForAPictureButThereIsntOne
 *     TEST identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function weRespondWithPicture($picture) {
  global $testOnly;
  global $rposResult;
  return ($rposResult == $picture);
}

/**
 * member (ARG) has no picture
 *
 * in: MAKE identify DeviceAsksForAPictureButThereIsntOne
 */
function memberHasNoPicture($id) {
  global $testOnly; if ($testOnly) return FALSE;
  if (!$a = r\acct(t\uid($id))) return FALSE;
  $a->update('photo', '');
  @unlink(DRUPAL_ROOT . $a->photoFilename(TRUE));
  return !$a->hasPhoto;
}

/**
 * devices: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE coupons Setup
 *     MAKE exchange Setup
 *     MAKE identify Setup
 *     MAKE joint Setup
 *     MAKE offline Setup
 *     MAKE startup Setup
 *     MAKE time Setup
 *     MAKE transact Setup
 *     MAKE undo Setup
=======
 * in: MAKE Joint Setup
 *     MAKE Exchange Setup
 *     MAKE Temp Setup
 *     MAKE Coupons Setup
 *     MAKE Undo Setup
 *     MAKE Time Setup
 *     MAKE Identify Setup
 *     MAKE Offline Setup
 *     MAKE Startup Setup
 *     MAKE Transact Setup
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function devices($list) {return t\devices($list);}

/**
 * balances: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST exchange Setup
 *     TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST joint Setup
 *     TEST joint ACashierAsksToChargeSomeone
 *     TEST offline Setup
 *     TEST offline ACashierChargedSomeoneOffline
 *     TEST offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST transact Setup
 *     TEST transact ACashierAsksToChargeSomeone
 *     TEST transact ACashierAsksToRefundSomeone
 *     TEST undo Setup
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
=======
 * in: TEST Joint Setup
 *     TEST Joint ACashierAsksToChargeSomeone
 *     TEST Exchange Setup
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 *     TEST Temp Setup
 *     TEST Undo Setup
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Offline Setup
 *     TEST Offline ACashierChargedSomeoneOffline
 *     TEST Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST Offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Transact Setup
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function balances($list) {return t\balances($list);}

/**
 * agent (ARG) asks device (ARG) to undo transaction (ARG) code (ARG)
 *
 * in: MAKE undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE undo AnAgentAsksToUndoARefund
 *     MAKE undo AnAgentAsksToUndoACashoutCharge
 *     MAKE undo AnAgentAsksToUndoACashinPayment
 *     MAKE undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE undo AnAgentAsksToUndoARefundWithoutPermission
 */
function agentAsksDeviceToUndoTransactionCode($agent, $device, $txid, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  
  $fields = 'member amount goods description created force code proof';
  if ($q = db\get('payer, payerAgent, amount, goods, payeeFor AS description, created', 'r_txs', 'xid=:txid', compact('txid'))) {
    extract($q);
    $member = r\qid($payer, $payerAgent);
    list ($goods, $force, $proof) = [(int) ($goods == FOR_GOODS), -1, 'calc'];
    $args = compact(ray($fields));
  } else {
    $args = ray($fields, R_SERVER_ID . '.ZZA', round(rand()/100, 2), rand(0, 1), 'whatever', rand(), -1, $code, '');
  }
  return t\hitServer('charge', $args, $agent, $device);
}

/**
 * agent (ARG) asks device (ARG) to undo transaction with subs: (ARG)
 *
 * in: MAKE coupons AMemberRedeemsAGiftCoupon
 *     MAKE undo AnAgentAsksToUndoACharge
 *     MAKE undo AnAgentAsksToUndoANonexistentTransaction
 */
function agentAsksDeviceToUndoTransactionWithSubs($agent, $device, $subs) {
  global $testOnly; if ($testOnly) return FALSE;
  $subs = $subs[0] + ray('force proof', -1, 'calc');;
  return t\hitServer('charge', $subs, $agent, $device);
}

/**
 * with balance (ARG)
 *
 * in: 
 */
function withBalance($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  if (!$got = @$rposResult['balance']) return !$subs; else $subs = $subs[0];
  $balance = t('customer balance', $subs);
  if (@$subs['did']) {
    if (@$subs['forCash']) u\prefix(' ', $subs['forCash']);
    $balance .= t('just did', $subs);
  }
/**/  t\output('Expecting ' . print_r(compact('balance'), 1), 'expect');
  return ($got == $balance);
}

/**
 * with undo (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST joint ACashierAsksToChargeSomeone
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST transact ACashierAsksToChargeSomeone
 *     TEST transact ACashierAsksToRefundSomeone
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefund
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
=======
 * in: TEST Joint ACashierAsksToChargeSomeone
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function withUndo($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;

  $got = @$rposResult['undo'];
  
  if (is_array($subs)) {
    if ($got) $subs = $subs[0]; else return !$subs;
//    $subs['created'] = t\lastMinuteSubs($subs['created']);
    $undo = t('confirm undo', $subs);
  } else $undo = $subs;
/**/  t\output("Expecting undo: $undo\nGot: $got");
  return ($got == $undo);
}

/**
 * we return error (ARG) with subs: (ARG)
 *
 * in: TEST exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     TEST exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     TEST exchange DeviceGivesTooBigAnAmount
 *     TEST exchange SellerAgentLacksPermissionToBuy
 *     TEST exchange SellerAgentLacksPermissionToScanAndSell
 *     TEST exchange BuyerAgentLacksPermissionToBuy
 *     TEST identify ANonyetactiveMemberCardIsScanned
 *     TEST transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     TEST transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     TEST transact DeviceGivesTooBigAnAmount
 *     TEST transact SellerAgentLacksPermissionToBuy
 *     TEST transact SellerAgentLacksPermissionToScanAndSell
 *     TEST transact BuyerAgentLacksPermissionToBuy
 *     TEST transact SellerTriesToChargeTheCustomerTwice
 */
function weReturnErrorWithSubs($msg, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  $msg = strip_tags(t($msg, @$subs[0]));
  if ($rposResult['ok'] == '0' and $rposResult['message'] == $msg) return TRUE;
/**/ t\output(ray('wanted,actually sent', $msg, print_r($rposResult, 1)));
  return FALSE;
}

/**
 * we return error (ARG)
 *
 * in: TEST exchange ACashierAsksToPaySelf
 *     TEST exchange DeviceGivesNoMemberId
 *     TEST exchange DeviceGivesBadAccountId
 *     TEST exchange DeviceGivesNoAmount
 *     TEST exchange DeviceGivesBadAmount
 *     TEST exchange DeviceGivesNoPurposeForGoodsAndServices
 *     TEST exchange DeviceSendsWrongProof
 *     TEST identify DeviceShouldHaveAnIdentifier
 *     TEST identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 *     TEST identify TheDefaultCashierScansADeactivatedCard
 *     TEST identify AnUnauthorizedCashierScansIn
 *     TEST identify ACashierScansACustomerCardBeforeSigningIn
 *     TEST identify ACashierAsksUsToIdentifyTheCashiersOwnCard
 *     TEST offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     TEST offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 *     TEST startup DeviceRequestsABadOp
 *     TEST startup DeviceShouldHaveAnIdentifier
 *     TEST startup DeviceGivesABadCode
 *     TEST startup AnAgentForAnInactiveCompanyTriesAnOp
 *     TEST transact ACashierAsksToPaySelf
 *     TEST transact DeviceGivesNoMemberId
 *     TEST transact DeviceGivesBadAccountId
 *     TEST transact DeviceGivesNoAmount
 *     TEST transact DeviceGivesBadAmount
 *     TEST transact DeviceGivesNoPurposeForGoodsAndServices
 *     TEST transact DeviceSendsWrongProof
 */
function weReturnError($msg) {return weReturnErrorWithSubs($msg, array());}

/**
 * selling: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE coupons Setup
 *     MAKE exchange Setup
 *     MAKE identify Setup
 *     MAKE joint Setup
 *     MAKE offline Setup
 *     MAKE time Setup
 *     MAKE transact Setup
 *     MAKE undo Setup
=======
 * in: MAKE Joint Setup
 *     MAKE Exchange Setup
 *     MAKE Temp Setup
 *     MAKE Coupons Setup
 *     MAKE Undo Setup
 *     MAKE Time Setup
 *     MAKE Identify Setup
 *     MAKE Offline Setup
 *     MAKE Transact Setup
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function selling($selling) {return t\selling($selling);}

/**
 * company flags: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE coupons Setup
 *     MAKE exchange Setup
 *     MAKE identify Setup
 *     MAKE joint Setup
 *     MAKE offline Setup
 *     MAKE time Setup
 *     MAKE transact Setup
 *     MAKE undo Setup
=======
 * in: MAKE Joint Setup
 *     MAKE Exchange Setup
 *     MAKE Temp Setup
 *     MAKE Coupons Setup
 *     MAKE Undo Setup
 *     MAKE Time Setup
 *     MAKE Identify Setup
 *     MAKE Offline Setup
 *     MAKE Transact Setup
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function companyFlags($flags) {return t\companyFlags($flags);}

/**
 * agent (ARG) asks device (ARG) for op (ARG) with: (ARG)
 *
 * in: MAKE startup DeviceRequestsABadOp
 *     MAKE startup DeviceShouldHaveAnIdentifier
 *     MAKE startup DeviceGivesABadCode
 *     MAKE startup AnAgentForAnInactiveCompanyTriesAnOp
 */
function agentAsksDeviceForOpWith($agent, $device, $op, $extra) {
  global $testOnly; if ($testOnly) return FALSE;
  $extra = @$extra[0] ?: array();
  return t\hitServer($op, $extra, $agent, $device);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST joint ACashierAsksToChargeSomeone
 *     TEST offline ACashierChargedSomeoneOffline
 *     TEST offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST transact ACashierAsksToChargeSomeone
 *     TEST transact ACashierAsksToRefundSomeone
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefund
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
=======
 * in: TEST Joint ACashierAsksToChargeSomeone
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Offline ACashierChargedSomeoneOffline
 *     TEST Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG) at (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE coupons AMemberRedeemsAGiftCoupon
 *     MAKE exchange ACashierAsksToChargeSomeoneForCash
 *     MAKE exchange ACashierAsksToRefundSomeone
 *     MAKE exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE exchange ACashierAsksToPaySelf
 *     MAKE exchange DeviceGivesNoMemberId
 *     MAKE exchange DeviceGivesBadAccountId
 *     MAKE exchange DeviceGivesNoAmount
 *     MAKE exchange DeviceGivesBadAmount
 *     MAKE exchange DeviceGivesTooBigAnAmount
 *     MAKE exchange DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE exchange SellerAgentLacksPermissionToBuy
 *     MAKE exchange SellerAgentLacksPermissionToScanAndSell
 *     MAKE exchange BuyerAgentLacksPermissionToBuy
 *     MAKE exchange DeviceSendsWrongProof
 *     MAKE joint ACashierAsksToChargeSomeone
 *     MAKE offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE transact ACashierAsksToChargeSomeone
 *     MAKE transact ACashierAsksToRefundSomeone
 *     MAKE transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE transact ACashierAsksToPaySelf
 *     MAKE transact DeviceGivesNoMemberId
 *     MAKE transact DeviceGivesBadAccountId
 *     MAKE transact DeviceGivesNoAmount
 *     MAKE transact DeviceGivesBadAmount
 *     MAKE transact DeviceGivesTooBigAnAmount
 *     MAKE transact DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE transact SellerAgentLacksPermissionToBuy
 *     MAKE transact SellerAgentLacksPermissionToScanAndSell
 *     MAKE transact BuyerAgentLacksPermissionToBuy
 *     MAKE transact SellerTriesToChargeTheCustomerTwice
 *     MAKE transact DeviceSendsWrongProof
 *     MAKE transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
=======
 * in: MAKE Joint ACashierAsksToChargeSomeone
 *     MAKE Exchange ACashierAsksToChargeSomeoneForCash
 *     MAKE Exchange ACashierAsksToRefundSomeone
 *     MAKE Exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE Exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE Exchange ACashierAsksToPaySelf
 *     MAKE Exchange DeviceGivesNoMemberId
 *     MAKE Exchange DeviceGivesBadAccountId
 *     MAKE Exchange DeviceGivesNoAmount
 *     MAKE Exchange DeviceGivesBadAmount
 *     MAKE Exchange DeviceGivesTooBigAnAmount
 *     MAKE Exchange DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE Exchange SellerAgentLacksPermissionToBuy
 *     MAKE Exchange SellerAgentLacksPermissionToScanAndSell
 *     MAKE Exchange BuyerAgentLacksPermissionToBuy
 *     MAKE Exchange DeviceSendsWrongProof
 *     MAKE Coupons AMemberRedeemsAGiftCoupon
 *     MAKE Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE Transact ACashierAsksToChargeSomeone
 *     MAKE Transact ACashierAsksToRefundSomeone
 *     MAKE Transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE Transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE Transact ACashierAsksToPaySelf
 *     MAKE Transact DeviceGivesNoMemberId
 *     MAKE Transact DeviceGivesBadAccountId
 *     MAKE Transact DeviceGivesNoAmount
 *     MAKE Transact DeviceGivesBadAmount
 *     MAKE Transact DeviceGivesTooBigAnAmount
 *     MAKE Transact DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE Transact SellerAgentLacksPermissionToBuy
 *     MAKE Transact SellerAgentLacksPermissionToScanAndSell
 *     MAKE Transact BuyerAgentLacksPermissionToBuy
 *     MAKE Transact SellerTriesToChargeTheCustomerTwice
 *     MAKE Transact DeviceSendsWrongProof
 *     MAKE Transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function agentAsksDeviceToChargeForAt($agent, $device, $member, $amount, $goods, $description, $created) {
  return reconcilingOnChargingForAtForce($agent, $device, $member, $amount, $goods, $description, $created, 0);
}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG) at (ARG) force (ARG)
 *
 * in: MAKE undo ACashierReversesATransactionWithInsufficientFunds
 */
function agentAsksDeviceToChargeForAtForce($agent, $device, $member, $amount, $goods, $desc, $created, $force) {
  return reconcilingOnChargingForAtForce($agent, $device, $member, $amount, $goods, $desc, $created, $force);
}

/**
 * reconciling (ARG) on (ARG) charging (ARG) $(ARG) for (ARG): (ARG) at (ARG) force (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE offline ACashierChargedSomeoneOffline
 *     MAKE offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
=======
 * in: MAKE Temp DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE Offline ACashierChargedSomeoneOffline
 *     MAKE Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE Offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function reconcilingOnChargingForAtForce($agent, $device, $member, $amount, $goods, $description, $created, $force) {
  global $testOnly; if ($testOnly) return FALSE;
  
  list ($member, $code) = t\parseQr($member); // ignore code, if any
  $proof = 'calc'; // tell hitServer() to send correct proof param
  return t\hitServer('charge', compact(ray('member code proof amount goods description created force')), $agent, $device);
}

/**
 * with did (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST joint ACashierAsksToChargeSomeone
 *     TEST transact ACashierAsksToChargeSomeone
 *     TEST transact ACashierAsksToRefundSomeone
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefund
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoANonexistentTransaction
=======
 * in: TEST Joint ACashierAsksToChargeSomeone
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function withDid($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  $expect = $subs ? t('just did', $subs[0]) : '';
  return (@$rposResult['did'] == $expect) ?: t\output("Expected: $expect\n Got: " . @$rposResult['did']);
}

/**
 * we respond ok txid (ARG) created (ARG) balance (ARG) rewards (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
=======
 * in: TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 *     TEST Undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST Offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function weRespondOkTxidCreatedBalanceRewards($txid, $created, $balance, $rewards) {
  return weRespondOkTxidCreatedBalanceRewardsSaying($txid, $created, $balance, $rewards);
}

/**
 * with message (ARG) with subs: (ARG)
 *
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 */
function withMessageWithSubs($msg, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  $expect = $subs ? t($msg, $subs[0]) : '';
  return (@$rposResult['message'] == $expect) ?: t\output("Expected: $expect\n Got: " . @$rposResult['message']);
}

/**
 * agent (ARG) on device (ARG) asks for the time
 *
 * in: MAKE time TheDeviceAsksForTheTime
 */
function agentOnDeviceAsksForTheTime($agent, $device) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('time', array(), $agent, $device);
}


/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE identify AMemberMakesAPurchaseForTheFirstTime
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}

/**
 * members have: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: MAKE identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
=======
 * in: MAKE Temp DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE Identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE Identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * agent (ARG) asks device (ARG) to identify (ARG) with PIN (ARG)
 *
 * in: MAKE identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 */
function agentAsksDeviceToIdentifyWithPIN($agent, $device, $qr, $pin = NULL) {
  global $testOnly; if ($testOnly) return FALSE;
  list ($member, $code) = t\parseQr($qr);
  return t\hitServer('identify', compact(ray('member code pin')), $agent, $device);
}

/**
 * bad codes (ARG)
 *
 * in: TEST identify TheDefaultCashierScansADeactivatedCard
 */
function badCodes($bad) {
  global $testOnly; 
  
  list ($qid, $code) = explode(',', $bad);
  $qid = a(t\uid($qid))->qid;

  return $testOnly
  ? db\exists('r_bad', 'qid=:qid AND code=:code', compact('qid', 'code'))
  : db\insert('r_bad', ray('qid code created', $qid, $code, time()));
}

/**
 * with proof of agent (ARG) amount (ARG) created (ARG) member (ARG) code (ARG)
 *
 * in: 
 */
function withProofOfAgentAmountCreatedMemberCode($agent, $amount, $created, $member, $code) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  
  foreach (['agent', 'member'] as $k) $$k = t\fullQid2($$k);
  $amount = number_format($amount, 2);
  $proof = "$agent$amount$member$code$created";
//  $hash = \_password_crypt('sha512', $proof, @$rposResult['proof']);
  return (@$rposResult['proof'] == u\hash($proof));
}
/**
 * we respond ok txid (ARG) created (ARG) balance (ARG) rewards (ARG) saying: (ARG)
 *
<<<<<<< HEAD:rsmart/rSmart.steps
 * in: TEST joint ACashierAsksToChargeSomeone
 *     TEST offline ACashierChargedSomeoneOffline
 *     TEST offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     TEST transact ACashierAsksToChargeSomeone
 *     TEST transact ACashierAsksToRefundSomeone
 *     TEST transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefund
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoAChargeWithoutPermission
 *     TEST undo AnAgentAsksToUndoARefundWithoutPermission
=======
 * in: TEST Joint ACashierAsksToChargeSomeone
 *     TEST Temp DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoAChargeWithoutPermission
 *     TEST Undo AnAgentAsksToUndoARefundWithoutPermission
 *     TEST Offline ACashierChargedSomeoneOffline
 *     TEST Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
 *     TEST Transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
>>>>>>> feature/attribute-member-record-changes:rsmart/rsmart.steps
 */
function weRespondOkTxidCreatedBalanceRewardsSaying($txid, $created, $balance, $rewards, $msg = NULL) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  
  extract($rposResult, EXTR_PREFIX_ALL, 'a'); // actual results
  $ok = '1';
  // NOTE: rewards are now IGNORED
  foreach (ray('ok txid balance') as $k) if (@$rposResult[$k] != $$k) $error = 1;
  if (!t\approxTime(@$a_created, $created)) $error = 2;
  
  if (@$msg) {
    $msg = $msg[0];
    $index = (@$msg['solution'] ? 'report undo|' : '') . 'report tx'; // |for why
/*
    if (t\rewarding()) {
      $index .= '|for why';
      $msg['otherRewardAmount'] = @$msg['reward']; unset($msg['reward']);
      if ($msg['why'] == 'goods') $index .= '|reward customer';
      $whys = ray(R_WHYS); 
      $msg['why'] = $whys[constant('FOR_' . strtoupper($msg['why']))];
    }
    */
    $wantMsg = t($index, $msg);
    if ($a_message != $wantMsg) $error = 3;
///    debug(compact('a_message','wantMsg','error'));
  }
///  debug(compact(ray('rposResult msg')));

  if (@$error) {
    if (@$msg) u\preray(compact('wantMsg'), $msg);
/**/ t\output('Expecting (but did not get): ' . print_r(compact(ray('ok txid created balance rewards msg')), 1), 'expect');
/**/ t\output('Got: ' . print_r($rposResult + compact('error'), 1));
    return FALSE;
  } else return TRUE;
}

/**
 * we change member (ARG) cardCode
 *
 * in: MAKE identify TheDefaultCashierScansADeactivatedCard
 */
function weChangeMemberCardCode($id) {
  global $testOnly; if ($testOnly) return FALSE;
  a(t\uid($id))->makeCardCode();
  return TRUE;
}

/**
 * coupons: (ARG)
 *
 * in: MAKE coupons AMemberRedeemsAGiftCoupon
 */
function coupons($list) {return t\coupons($list);}
/**
 * transaction count is (ARG)
 *
 * in: TEST coupons AMemberRedeemsAGiftCoupon
 */
function transactionCountIs($n) {return t\txCountIs($n);}
