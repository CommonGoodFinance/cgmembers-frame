<?php
//
// Feature: Transact
//   AS a member
//   I WANT to transfer rCredits to or from another member (acting on their own behalf)
//   SO I can buy and sell stuff.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartTransact extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $currentTest;
  var $variant;
  const SHORT_NAME = 'Transact';
  const FEATURE_NAME = 'rsmart Test - Transact';
  const DESCRIPTION = 'Transact';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->currentTest);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() { // especially, enable any modules required for the tests
    parent::setUp(self::MODULE);
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    sceneSetup($this, __FUNCTION__);

    switch ($this->variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id      | full_name  | phone  | email         | city  | state  | country       |'
    . '\\| NEW.ZZA | Abe One    | +20001 | a@example.com | Atown | Alaska | United States |'
    . '\\| NEW.ZZB | Bea Two    | +20002 | b@example.com | Btown | Utah   | United States |'
    . '\\| NEW.ZZC | Corner Pub | +20003 | c@example.com | Ctown | Corse  | France        |"');
    And__('devices: "DATA'
    . '\\| id      | code  |'
    . '\\| NEW.ZZA | codeA |'
    . '\\| NEW.ZZB | codeB |'
    . '\\| NEW.ZZC | codeC |"');
    And__('relations: "DATA'
    . '\\| id      | main    | agent   | permission        |'
    . '\\| NEW:ZZA | NEW.ZZA | NEW.ZZB | buy and sell      |'
    . '\\| NEW:ZZB | NEW.ZZB | NEW.ZZA | read transactions |'
    . '\\| NEW:ZZC | NEW.ZZC | NEW.ZZB | buy and sell      |'
    . '\\| NEW:ZZD | NEW.ZZC | NEW.ZZA | sell              |"');
    And__('transactions: "DATA'
    . '\\| tx_id    | created   | type       | amount | from      | to      | purpose | taking |'
    . '\\| NEW.AAAB | %today-6m | %TX_SIGNUP |    250 | community | NEW.ZZA | signup  | 0      |'
    . '\\| NEW.AAAC | %today-6m | %TX_SIGNUP |    250 | community | NEW.ZZB | signup  | 0      |'
    . '\\| NEW.AAAD | %today-6m | %TX_SIGNUP |    250 | community | NEW.ZZC | signup  | 0      |"');
    Then_('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -750 |'
    . '\\| NEW.ZZA   |     250 |'
    . '\\| NEW.ZZB   |     250 |'
    . '\\| NEW.ZZC   |     250 |"');
    break;


    }
  }

  // Scenario: A member asks to charge another member
  public function testAMemberAsksToChargeAnotherMember_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "charge" "NEW.ZZC" $100 ("goods": "labor")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 250 other_balance "" and message "report invoice" with subs: "DATA'
    . '\\| action  | other_name | amount | tid |'
    . '\\| charged | Corner Pub | $100   | 2   |"');
    And__('we email "new-invoice" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payer_purpose |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | labor         |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -750 |'
    . '\\| NEW.ZZA   |     250 |'
    . '\\| NEW.ZZC   |     250 |"');
  }

  // Scenario: A member asks to pay another member
  public function testAMemberAsksToPayAnotherMember_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 155 other_balance "" and message "report transaction" with subs: "DATA'
    . '\\| action | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| paid   | Corner Pub | $100   | rebate      | $5            | $155    | 2   |"');
    And__('we email "new-payment" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payee_purpose   |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally
  public function testAMemberAsksToChargeAnotherMemberUnilaterally_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZC" asks device "codeC" to do this: "charge" "NEW.ZZA" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 360 other_balance 155 and message "report transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| charged | Abe One    | $100   | bonus       | $10           | $360    | 2   |"');
    And__('we email "new-charge" to member "a@example.com" with subs: "DATA'
    . '\\| created | full_name | other_name | amount | payer_purpose   |'
    . '\\| %today  | Abe One   | Corner Pub | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally, with insufficient balance
  public function testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZC" asks device "codeC" to do this: "charge" "NEW.ZZA" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 525 other_balance 12.5 and message "report short transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | short | balance | tid |'
    . '\\| charged | Abe One    | $250   | $50   | $525    | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay another member, with insufficient balance
  public function testAMemberAsksToPayAnotherMemberWithInsufficientBalance_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 12.5 other_balance "" and message "report short transaction" with subs: "DATA'
    . '\\| action | other_name | amount | short | balance | tid |'
    . '\\| paid   | Corner Pub | $250   | $50   | $12.50  | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay self
  public function testAMemberAsksToPaySelf_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZA" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no self-trading |"');
  }

  // Scenario: Device gives no account id
  public function testDeviceGivesNoAccountId_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | missing account id |"');
  }

  // Scenario: Device gives bad account id
  public function testDeviceGivesBadAccountId_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" %whatever $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | bad account id |"');
  }

  // Scenario: Device gives no amount
  public function testDeviceGivesNoAmount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $"" ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | missing amount |"');
  }

  // Scenario: Device gives bad amount
  public function testDeviceGivesBadAmount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $%whatever ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | bad amount |"');
  }

  // Scenario: Device gives nonpositive amount
  public function testDeviceGivesNonpositiveAmount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $-100 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | nonpositive transfer |"');
  }

  // Scenario: Device gives too big an amount
  public function testDeviceGivesTooBigAnAmount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $10,000,000 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | amount too big |"');
  }

  // Scenario: Device gives no type
  public function testDeviceGivesNoType_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "" "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message                  |'
    . '\\| 0       | missing transaction type |"');
  }

  // Scenario: Device gives bad type
  public function testDeviceGivesBadType_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: %whatever "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | bad transaction type |"');
  }

  // Scenario: Device gives no purpose for goods and services
  public function testDeviceGivesNoPurposeForGoodsAndServices_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW.ZZC" $300 ("goods": "")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | missing purpose |"');
  }

  // Scenario: Buyer agent lacks permission to buy
  public function testBuyerAgentLacksPermissionToBuy_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member " NEW.ZZA " asks device "codeC" to do this: "pay" "NEW.ZZB" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy and sell |"');
  }

  // Scenario: Seller agent lacks permission to sell
  public function testSellerAgentLacksPermissionToSell_0() {
    sceneSetup($this, __FUNCTION__, 0);
    When_('member " NEW.ZZA " asks device "codeB" to do this: "charge" "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

  // Scenario: A member asks to charge another member
  public function testAMemberAsksToChargeAnotherMember_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "charge" "NEW.ZZC" $100 ("goods": "labor")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 250 other_balance "" and message "report invoice" with subs: "DATA'
    . '\\| action  | other_name | amount | tid |'
    . '\\| charged | Corner Pub | $100   | 2   |"');
    And__('we email "new-invoice" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payer_purpose |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | labor         |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -750 |'
    . '\\| NEW.ZZA   |     250 |'
    . '\\| NEW.ZZC   |     250 |"');
  }

  // Scenario: A member asks to pay another member
  public function testAMemberAsksToPayAnotherMember_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 155 other_balance "" and message "report transaction" with subs: "DATA'
    . '\\| action | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| paid   | Corner Pub | $100   | rebate      | $5            | $155    | 2   |"');
    And__('we email "new-payment" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payee_purpose   |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally
  public function testAMemberAsksToChargeAnotherMemberUnilaterally_1() {
    sceneSetup($this, __FUNCTION__, 1);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZB" asks device "codeC" to do this: "charge" "NEW.ZZA" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 360 other_balance 155 and message "report transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| charged | Abe One    | $100   | bonus       | $10           | $360    | 2   |"');
    And__('we email "new-charge" to member "a@example.com" with subs: "DATA'
    . '\\| created | full_name | other_name | amount | payer_purpose   |'
    . '\\| %today  | Abe One   | Corner Pub | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally, with insufficient balance
  public function testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance_1() {
    sceneSetup($this, __FUNCTION__, 1);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZB" asks device "codeC" to do this: "charge" "NEW.ZZA" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 525 other_balance 12.5 and message "report short transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | short | balance | tid |'
    . '\\| charged | Abe One    | $250   | $50   | $525    | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay another member, with insufficient balance
  public function testAMemberAsksToPayAnotherMemberWithInsufficientBalance_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 12.5 other_balance "" and message "report short transaction" with subs: "DATA'
    . '\\| action | other_name | amount | short | balance | tid |'
    . '\\| paid   | Corner Pub | $250   | $50   | $12.50  | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay self
  public function testAMemberAsksToPaySelf_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZA" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no self-trading |"');
  }

  // Scenario: Device gives no account id
  public function testDeviceGivesNoAccountId_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | missing account id |"');
  }

  // Scenario: Device gives bad account id
  public function testDeviceGivesBadAccountId_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" %whatever $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | bad account id |"');
  }

  // Scenario: Device gives no amount
  public function testDeviceGivesNoAmount_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $"" ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | missing amount |"');
  }

  // Scenario: Device gives bad amount
  public function testDeviceGivesBadAmount_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $%whatever ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | bad amount |"');
  }

  // Scenario: Device gives nonpositive amount
  public function testDeviceGivesNonpositiveAmount_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $-100 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | nonpositive transfer |"');
  }

  // Scenario: Device gives too big an amount
  public function testDeviceGivesTooBigAnAmount_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $10,000,000 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | amount too big |"');
  }

  // Scenario: Device gives no type
  public function testDeviceGivesNoType_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "" "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message                  |'
    . '\\| 0       | missing transaction type |"');
  }

  // Scenario: Device gives bad type
  public function testDeviceGivesBadType_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: %whatever "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | bad transaction type |"');
  }

  // Scenario: Device gives no purpose for goods and services
  public function testDeviceGivesNoPurposeForGoodsAndServices_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW.ZZC" $300 ("goods": "")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | missing purpose |"');
  }

  // Scenario: Buyer agent lacks permission to buy
  public function testBuyerAgentLacksPermissionToBuy_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member " NEW.ZZA " asks device "codeC" to do this: "pay" "NEW.ZZB" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy and sell |"');
  }

  // Scenario: Seller agent lacks permission to sell
  public function testSellerAgentLacksPermissionToSell_1() {
    sceneSetup($this, __FUNCTION__, 1);
    When_('member " NEW.ZZA " asks device "codeB" to do this: "charge" "NEW.ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

  // Scenario: A member asks to charge another member
  public function testAMemberAsksToChargeAnotherMember_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "charge" "NEW:ZZC" $100 ("goods": "labor")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 250 other_balance "" and message "report invoice" with subs: "DATA'
    . '\\| action  | other_name | amount | tid |'
    . '\\| charged | Corner Pub | $100   | 2   |"');
    And__('we email "new-invoice" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payer_purpose |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | labor         |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -750 |'
    . '\\| NEW.ZZA   |     250 |'
    . '\\| NEW.ZZC   |     250 |"');
  }

  // Scenario: A member asks to pay another member
  public function testAMemberAsksToPayAnotherMember_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 155 other_balance "" and message "report transaction" with subs: "DATA'
    . '\\| action | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| paid   | Corner Pub | $100   | rebate      | $5            | $155    | 2   |"');
    And__('we email "new-payment" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payee_purpose   |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally
  public function testAMemberAsksToChargeAnotherMemberUnilaterally_2() {
    sceneSetup($this, __FUNCTION__, 2);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZC" asks device "codeC" to do this: "charge" "NEW:ZZA" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 360 other_balance 155 and message "report transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| charged | Abe One    | $100   | bonus       | $10           | $360    | 2   |"');
    And__('we email "new-charge" to member "a@example.com" with subs: "DATA'
    . '\\| created | full_name | other_name | amount | payer_purpose   |'
    . '\\| %today  | Abe One   | Corner Pub | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally, with insufficient balance
  public function testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance_2() {
    sceneSetup($this, __FUNCTION__, 2);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZC" asks device "codeC" to do this: "charge" "NEW:ZZA" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 525 other_balance 12.5 and message "report short transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | short | balance | tid |'
    . '\\| charged | Abe One    | $250   | $50   | $525    | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay another member, with insufficient balance
  public function testAMemberAsksToPayAnotherMemberWithInsufficientBalance_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 12.5 other_balance "" and message "report short transaction" with subs: "DATA'
    . '\\| action | other_name | amount | short | balance | tid |'
    . '\\| paid   | Corner Pub | $250   | $50   | $12.50  | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay self
  public function testAMemberAsksToPaySelf_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZA" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no self-trading |"');
  }

  // Scenario: Device gives no account id
  public function testDeviceGivesNoAccountId_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | missing account id |"');
  }

  // Scenario: Device gives bad account id
  public function testDeviceGivesBadAccountId_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" %whatever $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | bad account id |"');
  }

  // Scenario: Device gives no amount
  public function testDeviceGivesNoAmount_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $"" ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | missing amount |"');
  }

  // Scenario: Device gives bad amount
  public function testDeviceGivesBadAmount_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $%whatever ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | bad amount |"');
  }

  // Scenario: Device gives nonpositive amount
  public function testDeviceGivesNonpositiveAmount_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $-100 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | nonpositive transfer |"');
  }

  // Scenario: Device gives too big an amount
  public function testDeviceGivesTooBigAnAmount_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $10,000,000 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | amount too big |"');
  }

  // Scenario: Device gives no type
  public function testDeviceGivesNoType_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "" "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message                  |'
    . '\\| 0       | missing transaction type |"');
  }

  // Scenario: Device gives bad type
  public function testDeviceGivesBadType_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: %whatever "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | bad transaction type |"');
  }

  // Scenario: Device gives no purpose for goods and services
  public function testDeviceGivesNoPurposeForGoodsAndServices_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member "NEW.ZZA" asks device "codeA" to do this: "pay" "NEW:ZZC" $300 ("goods": "")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | missing purpose |"');
  }

  // Scenario: Buyer agent lacks permission to buy
  public function testBuyerAgentLacksPermissionToBuy_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member " NEW.ZZA " asks device "codeC" to do this: "pay" "NEW.ZZB" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy and sell |"');
  }

  // Scenario: Seller agent lacks permission to sell
  public function testSellerAgentLacksPermissionToSell_2() {
    sceneSetup($this, __FUNCTION__, 2);
    When_('member " NEW.ZZA " asks device "codeB" to do this: "charge" "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

  // Scenario: A member asks to charge another member
  public function testAMemberAsksToChargeAnotherMember_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "charge" "NEW:ZZC" $100 ("goods": "labor")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 250 other_balance "" and message "report invoice" with subs: "DATA'
    . '\\| action  | other_name | amount | tid |'
    . '\\| charged | Corner Pub | $100   | 2   |"');
    And__('we email "new-invoice" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payer_purpose |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | labor         |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -750 |'
    . '\\| NEW.ZZA   |     250 |'
    . '\\| NEW.ZZC   |     250 |"');
  }

  // Scenario: A member asks to pay another member
  public function testAMemberAsksToPayAnotherMember_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 155 other_balance "" and message "report transaction" with subs: "DATA'
    . '\\| action | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| paid   | Corner Pub | $100   | rebate      | $5            | $155    | 2   |"');
    And__('we email "new-payment" to member "c@example.com" with subs: "DATA'
    . '\\| created | full_name  | other_name | amount | payee_purpose   |'
    . '\\| %today  | Corner Pub | Abe One    | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally
  public function testAMemberAsksToChargeAnotherMemberUnilaterally_3() {
    sceneSetup($this, __FUNCTION__, 3);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZB" asks device "codeC" to do this: "charge" "NEW:ZZA" $100 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 360 other_balance 155 and message "report transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | reward_type | reward_amount | balance | tid |'
    . '\\| charged | Abe One    | $100   | bonus       | $10           | $360    | 2   |"');
    And__('we email "new-charge" to member "a@example.com" with subs: "DATA'
    . '\\| created | full_name | other_name | amount | payer_purpose   |'
    . '\\| %today  | Abe One   | Corner Pub | $100   | groceries       |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -765 |'
    . '\\| NEW.ZZA   |     155 |'
    . '\\| NEW.ZZC   |     360 |"');
  }

  // Scenario: A member asks to charge another member unilaterally, with insufficient balance
  public function testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance_3() {
    sceneSetup($this, __FUNCTION__, 3);
    Given('member "NEW.ZZC" can charge unilaterally');
    When_('member "NEW.ZZB" asks device "codeC" to do this: "charge" "NEW:ZZA" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 525 other_balance 12.5 and message "report short transaction" with subs: "DATA'
    . '\\| action  | other_name | amount | short | balance | tid |'
    . '\\| charged | Abe One    | $250   | $50   | $525    | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay another member, with insufficient balance
  public function testAMemberAsksToPayAnotherMemberWithInsufficientBalance_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond success 1 tx_id "NEW.AAAE" my_balance 12.5 other_balance "" and message "report short transaction" with subs: "DATA'
    . '\\| action | other_name | amount | short | balance | tid |'
    . '\\| paid   | Corner Pub | $250   | $50   | $12.50  | 2   |"');
    And__('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community | -787.50 |'
    . '\\| NEW.ZZA   |   12.50 |'
    . '\\| NEW.ZZC   |  525.00 |"');
  }

  // Scenario: A member asks to pay self
  public function testAMemberAsksToPaySelf_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZA" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no self-trading |"');
  }

  // Scenario: Device gives no account id
  public function testDeviceGivesNoAccountId_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | missing account id |"');
  }

  // Scenario: Device gives bad account id
  public function testDeviceGivesBadAccountId_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" %whatever $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | bad account id |"');
  }

  // Scenario: Device gives no amount
  public function testDeviceGivesNoAmount_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $"" ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | missing amount |"');
  }

  // Scenario: Device gives bad amount
  public function testDeviceGivesBadAmount_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $%whatever ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | bad amount |"');
  }

  // Scenario: Device gives nonpositive amount
  public function testDeviceGivesNonpositiveAmount_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $-100 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | nonpositive transfer |"');
  }

  // Scenario: Device gives too big an amount
  public function testDeviceGivesTooBigAnAmount_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $10,000,000 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | amount too big |"');
  }

  // Scenario: Device gives no type
  public function testDeviceGivesNoType_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "" "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message                  |'
    . '\\| 0       | missing transaction type |"');
  }

  // Scenario: Device gives bad type
  public function testDeviceGivesBadType_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: %whatever "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | bad transaction type |"');
  }

  // Scenario: Device gives no purpose for goods and services
  public function testDeviceGivesNoPurposeForGoodsAndServices_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to do this: "pay" "NEW:ZZC" $300 ("goods": "")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | missing purpose |"');
  }

  // Scenario: Buyer agent lacks permission to buy
  public function testBuyerAgentLacksPermissionToBuy_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member " NEW.ZZA " asks device "codeC" to do this: "pay" "NEW.ZZB" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy and sell |"');
  }

  // Scenario: Seller agent lacks permission to sell
  public function testSellerAgentLacksPermissionToSell_3() {
    sceneSetup($this, __FUNCTION__, 3);
    When_('member " NEW.ZZA " asks device "codeB" to do this: "charge" "NEW:ZZC" $300 ("goods": "groceries")');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

}