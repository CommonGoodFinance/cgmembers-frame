<?php
//
// Feature: Transact
//   AS a company agent
//   I WANT to transfer rCredits to or from another member
//   SO my company can sell stuff and give refunds.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartTransact extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Transact';
  const FEATURE_NAME = 'rsmart Test - Transact';
  const DESCRIPTION = 'Transact';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | email | city  | state | cc  | cc2  | rebate | flags      |'
    . '\\| .ZZA | Abe One    | a@    | Atown | AK    | ccA | ccA2 |     10 | ok,bona    |'
    . '\\| .ZZB | Bea Two    | b@    | Btown | UT    | ccB | ccB2 |     10 | ok,bona    |'
    . '\\| .ZZC | Corner Pub | c@    | Ctown | CA    | ccC |      |      5 | ok,co,bona |'
    . '\\| .ZZD | Dee Four   | d@    | Dtown | DE    | ccD | ccD2 |     10 | ok,bona    |'
    . '\\| .ZZE | Eve Five   | e@    | Etown | IL    | ccE | ccE2 |     10 | ok,bona,secret_bal |'
    . '\\| .ZZF | Far Co     | f@    | Ftown | FL    | ccF |      |      5 | ok,co,bona |"');
    And__('devices: "ASSOC'
    . '\\| id   | code |'
    . '\\| .ZZC | devC |"');
    And__('selling: "ASSOC'
    . '\\| id   | selling         |'
    . '\\| .ZZC | this,that,other |"');
    And__('company flags: "ASSOC'
    . '\\| id   | flags        |'
    . '\\| .ZZC | refund,r4usd |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission |'
    . '\\| :ZZA | .ZZC | .ZZA  | buy        |'
    . '\\| :ZZB | .ZZC | .ZZB  | scan       |'
    . '\\| :ZZD | .ZZC | .ZZD  | read       |'
    . '\\| :ZZE | .ZZF | .ZZE  | sell       |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type   | amount | from | to   | purpose |'
    . '\\| 1   | %today-6m | signup |    250 | ctty | .ZZA | signup  |'
    . '\\| 2   | %today-6m | signup |    250 | ctty | .ZZB | signup  |'
    . '\\| 3   | %today-6m | signup |    250 | ctty | .ZZC | signup  |'
    . '\\| 4   | %today-6m | grant  |    250 | ctty | .ZZF | stuff   |"');
    Then_('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |   -1000 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     250 |'
    . '\\| .ZZC |     250 |'
    . '\\| .ZZF |     250 |"');
    break;


    }
  }

  // Scenario: A cashier asks to charge someone
  public function testACashierAsksToChargeSomeone_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $100 for "goods": "food" at %now');
    Then_('we respond ok txid 5 created %now balance 160 rewards 260');
    And__('with message "report transaction" with subs: "ASSOC'
    . '\\| did     | otherName | amount | rewardType | rewardAmount |'
    . '\\| charged | Bea Two   | $100   | reward     | $10          |"');
    And__('with did "ASSOC'
    . '\\| did     | amount | forCash |'
    . '\\| charged | $100   |         |"');
    And__('with undo "ASSOC'
    . '\\| created | amount | tofrom | otherName |'
    . '\\| %dmy    | $100   | from   | Bea Two   |"');
    And__('we notice "new charge|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | food         | reward          | $10               |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -770 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     160 |'
    . '\\| .ZZC |     360 |"');
  }

  // Scenario: A cashier asks to refund someone
  public function testACashierAsksToRefundSomeone_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $-100 for "goods": "food" at %now');
    Then_('we respond ok txid 5 created %now balance 340 rewards 240');
    And__('with message "report transaction" with subs: "ASSOC'
    . '\\| did      | otherName | amount | rewardType | rewardAmount |'
    . '\\| refunded | Bea Two   | $100   | reward     | $-10         |"');
    And__('with did "ASSOC'
    . '\\| did      | amount | forCash |'
    . '\\| refunded | $100   |         |"');
    And__('with undo "ASSOC'
    . '\\| created | amount | tofrom | otherName |'
    . '\\| %dmy    | $100   | to     | Bea Two   |"');
    And__('we notice "new refund|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | food         | reward          | $-10              |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -730 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     340 |'
    . '\\| .ZZC |     140 |"');
  }

  // Scenario: A cashier asks to charge another member, with insufficient balance
  public function testACashierAsksToChargeAnotherMemberWithInsufficientBalance_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $300 for "goods": "food" at %now');
    Then_('we return error "short from" with subs: "ASSOC'
    . '\\| otherName | short |'
    . '\\| Bea Two   | $50   |"');
  }

  // Scenario: A cashier asks to refund another member, with insufficient balance
  public function testACashierAsksToRefundAnotherMemberWithInsufficientBalance_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $-300 for "goods": "food" at %now');
    Then_('we return error "short to" with subs: "ASSOC'
    . '\\| short |'
    . '\\| $50   |"');
  }

  // Scenario: A cashier asks to pay self
  public function testACashierAsksToPaySelf_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZC" $300 for "goods": "food" at %now');
    Then_('we return error "shoulda been login"');
  }

  // Scenario: Device gives no member id
  public function testDeviceGivesNoMemberId_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge "" $300 for "goods": "food" at %now');
    Then_('we return error "missing member"');
  }

  // Scenario: Device gives bad account id
  public function testDeviceGivesBadAccountId_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge %whatever $300 for "goods": "food" at %now');
    Then_('we return error "bad customer"');
  }

  // Scenario: Device gives no amount
  public function testDeviceGivesNoAmount_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $"" for "goods": "food" at %now');
    Then_('we return error "bad amount"');
  }

  // Scenario: Device gives bad amount
  public function testDeviceGivesBadAmount_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $%whatever for "goods": "food" at %now');
    Then_('we return error "bad amount"');
  }

  // Scenario: Device gives too big an amount
  public function testDeviceGivesTooBigAnAmount_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $10,000,000 for "goods": "food" at %now');
    Then_('we return error "amount too big"');
  }

  // Scenario: Device gives no purpose for goods and services
  public function testDeviceGivesNoPurposeForGoodsAndServices_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $100 for "goods": "" at %now');
    Then_('we return error "missing description"');
  }

  // Scenario: Seller agent lacks permission to buy
  public function testSellerAgentLacksPermissionToBuy_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZB" asks device "devC" to charge ".ZZB" $-100 for "goods": "refund" at %now');
    Then_('we return error "no perm" with subs: "ASSOC'
    . '\\| what    |'
    . '\\| refunds |"');
  }

  // Scenario: Seller agent lacks permission to scan and sell
  public function testSellerAgentLacksPermissionToScanAndSell_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZD" asks device "devC" to charge ".ZZA" $100 for "goods": "food" at %now');
    Then_('we return error "no perm" with subs: "ASSOC'
    . '\\| what  |'
    . '\\| sales |"');
  }

  // Scenario: Buyer agent lacks permission to buy
  public function testBuyerAgentLacksPermissionToBuy_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to charge ":ZZE" $100 for "goods": "food" at %now');
    Then_('we return error "other no perm" with subs: "ASSOC'
    . '\\| otherName | what      |'
    . '\\| Eve Five  | purchases |"');
  }

  // Scenario: Seller tries to charge the customer twice
  public function testSellerTriesToChargeTheCustomerTwice_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('agent ":ZZA" asks device "devC" to charge ".ZZB" $100 for "goods": "food" at "%now-1min"');
    When_('agent ":ZZA" asks device "devC" to charge ".ZZB" $100 for "goods": "food" at %now');
    Then_('we return error "duplicate transaction" with subs: "ASSOC'
    . '\\| op      |'
    . '\\| charged |"');
  }

}