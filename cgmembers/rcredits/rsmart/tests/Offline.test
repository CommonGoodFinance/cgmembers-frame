<?php
//
// Feature: Offline
//   AS a company agent
//   I WANT to accept transactions offline
//   SO my company can sell stuff, give refunds, and trade USD for rCredits even when no internet is available
//   and I WANT those transactions to be reconciled when an internet connection becomes available again
//   So my company's online account records are not incorrect for long.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartOffline extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Offline';
  const FEATURE_NAME = 'rsmart Test - Offline';
  const DESCRIPTION = 'Offline';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | email | city  | state | cc  | cc2  | rebate | flags      |'
    . '\\| .ZZA | Abe One    | a@    | Atown | AK    | ccA | ccA2 |     10 | ok,bona    |'
    . '\\| .ZZB | Bea Two    | b@    | Btown | UT    | ccB | ccB2 |     10 | ok,bona    |'
    . '\\| .ZZC | Corner Pub | c@    | Ctown | CA    | ccC |      |      5 | ok,co,bona |'
    . '\\| .ZZD | Dee Four   | d@    | Dtown | DE    | ccD | ccD2 |     10 | ok,bona    |'
    . '\\| .ZZE | Eve Five   | e@    | Etown | IL    | ccE | ccE2 |     10 | ok,bona,secret_bal |'
    . '\\| .ZZF | Far Co     | f@    | Ftown | FL    | ccF |      |      5 | ok,co,bona |"');
    And__('devices: "ASSOC'
    . '\\| id   | code |'
    . '\\| .ZZC | devC |"');
    And__('selling: "ASSOC'
    . '\\| id   | selling         |'
    . '\\| .ZZC | this,that,other |"');
    And__('company flags: "ASSOC'
    . '\\| id   | flags        |'
    . '\\| .ZZC | refund,r4usd |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission |'
    . '\\| :ZZA | .ZZC | .ZZA  | buy        |'
    . '\\| :ZZB | .ZZC | .ZZB  | scan       |'
    . '\\| :ZZD | .ZZC | .ZZD  | read       |'
    . '\\| :ZZE | .ZZF | .ZZE  | sell       |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type   | amount | from | to   | purpose |'
    . '\\| 1   | %today-6m | signup |    250 | ctty | .ZZA | signup  |'
    . '\\| 2   | %today-6m | signup |    250 | ctty | .ZZB | signup  |'
    . '\\| 3   | %today-6m | signup |    250 | ctty | .ZZC | signup  |'
    . '\\| 4   | %today-6m | grant  |    250 | ctty | .ZZF | stuff   |"');
    Then_('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |   -1000 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     250 |'
    . '\\| .ZZC |     250 |'
    . '\\| .ZZF |     250 |"');
    break;


    }
  }

  // Scenario: A cashier charged someone offline
  public function testACashierChargedSomeoneOffline_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('reconciling ":ZZA" on "devC" charging ".ZZB" $100 for "goods": "food" at "%now-1hour" force 1');
    Then_('we respond ok txid 5 created "%now-1hour" balance 160 rewards 260');
    And__('we notice "new charge|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | food         | reward          | $10               |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -770 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     160 |'
    . '\\| .ZZC |     360 |"');
  }

  // Scenario: A cashier charged someone offline and they have insufficient balance
  public function testACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created | type     | amount | from | to   | purpose |'
    . '\\| 5   | %today  | transfer |    200 | .ZZB | .ZZA | cash    |"');
    When_('reconciling ":ZZA" on "devC" charging ".ZZB" $100 for "goods": "food" at "%now-1hour" force 1');
    Then_('we respond ok txid 6 created "%now-1hour" balance -40 rewards 260');
    And__('we notice "new charge|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | food         | reward          | $10               |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -770 |'
    . '\\| .ZZA |     450 |'
    . '\\| .ZZB |     -40 |'
    . '\\| .ZZC |     360 |"');
  }

  // Scenario: A cashier charged someone offline but it actually went through
  public function testACashierChargedSomeoneOfflineButItActuallyWentThrough_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('agent ":ZZA" asks device "devC" to charge ".ZZB" $100 for "goods": "food" at "%now-1hour"');
    When_('reconciling ":ZZA" on "devC" charging ".ZZB" $100 for "goods": "food" at "%now-1hour" force 1');
    Then_('we respond ok txid 5 created "%now-1hour" balance 160 rewards 260');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |    -770 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     160 |'
    . '\\| .ZZC |     360 |"');
  }

  // Scenario: A cashier declined to charge someone offline and it didn't go through
  public function testACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('reconciling ":ZZA" on "devC" charging ".ZZB" $100 for "goods": "food" at "%now-1hour" force -1');
    Then_('we respond ok txid 0 created "" balance 250 rewards 250');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |   -1000 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     250 |'
    . '\\| .ZZC |     250 |"');
  }

  // Scenario: A cashier canceled offline a supposedly offline charge that actually went through
  public function testACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('agent ":ZZA" asks device "devC" to charge ".ZZB" $100 for "goods": "food" at "%now-1hour"');
    When_('reconciling ":ZZA" on "devC" charging ".ZZB" $100 for "goods": "food" at "%now-1hour" force -1');
    Then_('we respond ok txid 8 created %now balance 250 rewards 250');
    And__('with undo "5"');
    And__('we notice "new charge|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | food         | reward          | $10               |"');
    And__('we notice "new refund|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | reverses #2  | reward          | $-10              |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |   -1000 |'
    . '\\| .ZZA |     250 |'
    . '\\| .ZZB |     250 |'
    . '\\| .ZZC |     250 |"');
  }

  // Scenario: A cashier canceled offline a supposedly offline charge that actually went through, but customer is broke
  public function testACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('agent ":ZZA" asks device "devC" to charge ".ZZB" $-100 for "goods": "refund" at "%now-1hour"');
    And__('transactions: "ASSOC'
    . '\\| xid | created | type     | amount | from | to   | purpose |'
    . '\\| 8   | %today  | transfer |    300 | .ZZB | .ZZA | cash    |"');
    When_('reconciling ":ZZA" on "devC" charging ".ZZB" $-100 for "goods": "refund" at "%now-1hour" force -1');
    Then_('we respond ok txid 9 created %now balance -50 rewards 250');
    And__('with undo "5"');
    And__('we notice "new refund|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | refund       | reward          | $-10              |"');
    And__('we notice "new charge|reward other" to member ".ZZB" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Bea Two  | Corner Pub | $100   | reverses #2  | reward          | $10               |"');
    And__('balances: "ASSOC'
    . '\\| id   | balance |'
    . '\\| ctty |   -1000 |'
    . '\\| .ZZA |     550 |'
    . '\\| .ZZB |     -50 |'
    . '\\| .ZZC |     250 |"');
  }

}