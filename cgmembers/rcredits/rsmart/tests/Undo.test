<?php
//
// Feature: Undo Transaction
//   AS a managing agent for an rCredits member company
//   I WANT to undo the last transaction completed on the POS device I am using
//   SO I can easily correct a mistake made by another company agent or by me
//   Summary:
//   An agent asks to undo a charge
//   An agent asks to undo a refund
//   An agent asks to undo a cash in payment
//   An agent asks to undo a cash out charge
//   An agent asks to undo a charge, with insufficient balance
//   An agent asks to undo a refund, with insufficient balance

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartUndo extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Undo';
  const FEATURE_NAME = 'rsmart Test - Undo';
  const DESCRIPTION = 'Undo Transaction';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | email | city  | state | cc  | cc2  | rebate | flags      |'
    . '\\| .ZZA | Abe One    | a@    | Atown | AK    | ccA | ccA2 |      5 | ok,bona    |'
    . '\\| .ZZB | Bea Two    | b@    | Btown | UT    | ccB | ccB2 |      5 | ok,bona    |'
    . '\\| .ZZC | Corner Pub | c@    | Ctown | CA    | ccC |      |      5 | ok,co,bona |'
    . '\\| .ZZD | Dee Four   | d@    | Dtown | DE    | ccD | ccD2 |      5 | ok,bona    |'
    . '\\| .ZZE | Eve Five   | e@    | Etown | IL    | ccE | ccE2 |      5 | ok,bona,secret_bal |'
    . '\\| .ZZF | Far Co     | f@    | Ftown | FL    | ccF |      |      5 | ok,co,bona |"');
    And__('devices: "ASSOC'
    . '\\| id   | code |'
    . '\\| .ZZC | devC |"');
    And__('selling: "ASSOC'
    . '\\| id   | selling         |'
    . '\\| .ZZC | this,that,other |"');
    And__('company flags: "ASSOC'
    . '\\| id   | flags            |'
    . '\\| .ZZC | refund,sell cash |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission |'
    . '\\| :ZZA | .ZZC | .ZZA  | scan       |'
    . '\\| :ZZB | .ZZC | .ZZB  | refund     |'
    . '\\| :ZZD | .ZZC | .ZZD  | read       |'
    . '\\| :ZZE | .ZZF | .ZZE  | sell       |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | taking |'
    . '\\| 1   | %today-7m | signup   |    250 | ctty | .ZZA | signup       |      0 |'
    . '\\| 2   | %today-6m | signup   |    250 | ctty | .ZZB | signup       |      0 |'
    . '\\| 3   | %today-6m | signup   |    250 | ctty | .ZZC | signup       |      0 |"');
    break;


    }
  }

  // Scenario: An agent asks to undo a charge
  public function testAnAgentAsksToUndoACharge_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | taking |'
    . '\\| 4   | %today-1d | transfer |     80 | .ZZA | .ZZC | whatever     |      1 |'
    . '\\| 5   | %today-1d | rebate   |      4 | ctty | .ZZA | rebate on #2 |      0 |'
    . '\\| 6   | %today-1d | bonus    |      8 | ctty | .ZZC | bonus on #2  |      0 |"');
    When_('agent ":ZZB" asks device "devC" to undo transaction 4');
    Then_('we respond ok "report undo|report transaction" with subs: "ASSOC'
    . '\\| solution | did      | otherName | amount | rewardType | rewardAmount |'
    . '\\| reversed | refunded | Abe One   | $80    | reward     | $-8          |"');
    And__('with balance "ASSOC'
    . '\\| name    | balance | spendable | cashable | did     | amount | forCash |'
    . '\\| Abe One | $250    |           | $0       |         |        |         |"');
    And__('with undo ""');
    And__('we notice "new refund|reward other" to member ".ZZA" with subs: "ASSOC'
    . '\\| created | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Corner Pub | $80    | reverses #2  | reward          | $-4               |"');
  }

  // Scenario: An agent asks to undo a refund
  public function testAnAgentAsksToUndoARefund_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | taking |'
    . '\\| 4   | %today-1d | transfer |    -80 | .ZZA | .ZZC | refund       |      1 |'
    . '\\| 5   | %today-1d | rebate   |     -4 | ctty | .ZZA | rebate on #2 |      0 |'
    . '\\| 6   | %today-1d | bonus    |     -8 | ctty | .ZZC | bonus on #2  |      0 |"');
    When_('agent ":ZZB" asks device "devC" to undo transaction 4');
    Then_('we respond ok "report undo|report transaction" with subs: "ASSOC'
    . '\\| solution | did        | otherName | amount | rewardType | rewardAmount |'
    . '\\| reversed | re-charged | Abe One   | $80    | reward     | $8           |"');
    And__('with balance "ASSOC'
    . '\\| name    | balance | spendable | cashable | did     | amount | forCash |'
    . '\\| Abe One | $250    |           | $0       |         |        |         |"');
    And__('with undo ""');
    And__('we notice "new charge|reward other" to member ".ZZA" with subs: "ASSOC'
    . '\\| created | otherName  | amount | payerPurpose | otherRewardType | otherRewardAmount |'
    . '\\| %today  | Corner Pub | $80    | reverses #2  | reward          | $4                |"');
  }

  // Scenario: An agent asks to undo a cash-out charge
  public function testAnAgentAsksToUndoACashoutCharge_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose  | goods | taking |'
    . '\\| 4   | %today-1d | transfer |     80 | .ZZA | .ZZC | cash out |     0 |      1 |"');
    When_('agent ":ZZB" asks device "devC" to undo transaction 4');
    Then_('we respond ok "report undo|report exchange" with subs: "ASSOC'
    . '\\| solution | did      | otherName | amount |'
    . '\\| reversed | credited | Abe One   | $80    |"');
    And__('with balance "ASSOC'
    . '\\| name    | balance | spendable | cashable | did     | amount | forCash |'
    . '\\| Abe One | $250    |           | $0       |         |        |         |"');
    And__('with undo ""');
    And__('we notice "new payment" to member ".ZZA" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payeePurpose |'
    . '\\| %today  | Abe One  | Corner Pub | $80    | reverses #2  |"');
  }

  // Scenario: An agent asks to undo a cash-in payment
  public function testAnAgentAsksToUndoACashinPayment_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose | goods | taking |'
    . '\\| 4   | %today-1d | transfer |    -80 | .ZZA | .ZZC | cash in |     0 |      1 |"');
    When_('agent ":ZZB" asks device "devC" to undo transaction 4');
    Then_('we respond ok "report undo|report exchange" with subs: "ASSOC'
    . '\\| solution | did        | otherName | amount |'
    . '\\| reversed | re-charged | Abe One   | $80    |"');
    And__('with balance "ASSOC'
    . '\\| name    | balance | spendable | cashable | did     | amount | forCash |'
    . '\\| Abe One | $250    |           | $0       |         |        |         |"');
    And__('with undo ""');
    And__('we notice "new charge" to member ".ZZA" with subs: "ASSOC'
    . '\\| created | fullName | otherName  | amount | payerPurpose |'
    . '\\| %today  | Abe One  | Corner Pub | $80    | reverses #2  |"');
  }

  // Scenario: An agent asks to undo a charge, with insufficient balance
  public function testAnAgentAsksToUndoAChargeWithInsufficientBalance_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | goods | taking |'
    . '\\| 4   | %today-1d | transfer |     80 | .ZZA | .ZZC | whatever     |     1 |      1 |'
    . '\\| 5   | %today-1d | rebate   |      4 | ctty | .ZZA | rebate on #2 |     0 |      0 |'
    . '\\| 6   | %today-1d | bonus    |      8 | ctty | .ZZC | bonus on #2  |     0 |      0 |'
    . '\\| 7   | %today    | transfer |    300 | .ZZC | .ZZB | labor        |     0 |      0 |"');
    When_('agent ":ZZB" asks device "devC" to undo transaction 4');
    Then_('we return error "short to" with subs: "ASSOC'
    . '\\| short |'
    . '\\| $38   |"');
  }

  // Scenario: An agent asks to undo a refund, with insufficient balance
  public function testAnAgentAsksToUndoARefundWithInsufficientBalance_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | goods | taking |'
    . '\\| 4   | %today-1d | transfer |    -80 | .ZZA | .ZZC | refund       |     1 |      1 |'
    . '\\| 5   | %today-1d | rebate   |     -4 | ctty | .ZZA | rebate on #2 |     0 |      0 |'
    . '\\| 6   | %today-1d | bonus    |     -8 | ctty | .ZZC | bonus on #2  |     0 |      0 |'
    . '\\| 7   | %today    | transfer |    300 | .ZZA | .ZZB | labor        |     0 |      0 |"');
    When_('agent ":ZZB" asks device "devC" to undo transaction 4');
    Then_('we return error "short from" with subs: "ASSOC'
    . '\\| otherName |'
    . '\\| Abe One   |"');
  }

  // Scenario: An agent asks to undo a charge, without permission
  public function testAnAgentAsksToUndoAChargeWithoutPermission_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | goods | taking |'
    . '\\| 4   | %today-1d | transfer |     80 | .ZZB | .ZZC | whatever     |     1 |      1 |'
    . '\\| 5   | %today-1d | rebate   |      4 | ctty | .ZZB | rebate on #2 |     0 |      0 |'
    . '\\| 6   | %today-1d | bonus    |      8 | ctty | .ZZC | bonus on #2  |     0 |      0 |"');
    When_('agent ":ZZA" asks device "devC" to undo transaction 4');
    Then_('we return error "no perm" with subs: "ASSOC'
    . '\\| what    |'
    . '\\| refunds |"');
  }

  // Scenario: An agent asks to undo a refund, without permission
  public function testAnAgentAsksToUndoARefundWithoutPermission_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | goods | taking |'
    . '\\| 4   | %today-1d | transfer |    -80 | .ZZB | .ZZC | refund       |     1 |      1 |'
    . '\\| 5   | %today-1d | rebate   |     -4 | ctty | .ZZB | rebate on #2 |     0 |      0 |'
    . '\\| 6   | %today-1d | bonus    |     -8 | ctty | .ZZC | bonus on #2  |     0 |      0 |"');
    When_('agent ":ZZD" asks device "devC" to undo transaction 4');
    Then_('we return error "no perm" with subs: "ASSOC'
    . '\\| what  |'
    . '\\| sales |"');
  }

  // Scenario: An agent asks to undo someone else's transaction
  public function testAnAgentAsksToUndoSomeoneElsesTransaction_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('transactions: "ASSOC'
    . '\\| xid | created   | type     | amount | from | to   | purpose      | goods | taking |'
    . '\\| 4   | %today-1d | transfer |     80 | .ZZB | .ZZD | whatever     |     0 |      0 |"');
    When_('agent ":ZZA" asks device "devC" to undo transaction 4');
    Then_('we return error "undo no match"');
  }

  // Scenario: An agent asks to undo a non-existent transaction
  public function testAnAgentAsksToUndoANonexistentTransaction_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to undo transaction 99');
    Then_('we return error "undo no match"');
  }

}