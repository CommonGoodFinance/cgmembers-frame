<?php
//
// Feature: Change Account or Agent
//   As a member
//   I WANT to temporarily change the agent or account associated with a device
//   SO I can use it (or assign someone) to buy and sell with rCredits, on behalf of another member.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartChange extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $currentTest;
  var $variant;
  const SHORT_NAME = 'Change';
  const FEATURE_NAME = 'rsmart Test - Change';
  const DESCRIPTION = 'Change Account or Agent';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->currentTest);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() { // especially, enable any modules required for the tests
    parent::setUp(self::MODULE);
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    sceneSetup($this, __FUNCTION__);

    switch ($this->variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id      | full_name  | phone  | email         | city  | state  | country       |'
    . '\\| NEW.ZZA | Abe One    | +20001 | a@example.com | Atown | Alaska | United States |'
    . '\\| NEW.ZZB | Bea Two    | +20002 | b@example.com | Btown | Utah   | United States |'
    . '\\| NEW.ZZC | Corner Pub | +20003 | c@example.com | Ctown | Corse  | France        |"');
    And__('devices: "DATA'
    . '\\| id      | code  | default_agent |'
    . '\\| NEW.ZZA | codeA | NEW.ZZA       |'
    . '\\| NEW.ZZB | codeB | NEW.ZZB       |'
    . '\\| NEW.ZZC | codeC | NEW.ZZB       |"');
    And__('relations: "DATA'
    . '\\| id      | main    | agent   | permission        |'
    . '\\| NEW:ZZA | NEW.ZZA | NEW.ZZB | buy and sell      |'
    . '\\| NEW:ZZB | NEW.ZZB | NEW.ZZC | sell              |'
    . '\\| NEW:ZZC | NEW.ZZC | NEW.ZZA | read transactions |'
    . '\\| NEW:ZZD | NEW.ZZC | NEW.ZZB |                   |'
    . '\\| NEW:ZZE | NEW.ZZB | NEW.ZZA | read transactions |'
    . '\\| NEW:ZZF | NEW.ZZA | NEW.ZZC | sell              |"');
    break;


    }
  }

  // Scenario: A member changes agent
  public function testAMemberChangesAgent_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeB" account is "NEW.ZZB" and agent is "NEW.ZZB"');
    When_('a member asks device "codeB" to change "agent" to "NEW.ZZC"');
    Then_('we respond success 1, my_id "NEW:ZZB", account_name "Bea Two~Agent: Corner Pub", show_buttons 1, and message "changed agent", with subs: "DATA'
    . '\\| what  | agent_name |'
    . '\\| agent | Corner Pub |"');
  }

  // Scenario: A member changes account
  public function testAMemberChangesAccount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeA" account is "NEW.ZZA" and agent is "NEW.ZZA"');
    When_('a member asks device "codeA" to change "account" to "NEW.ZZC"');
    Then_('we respond success 1, my_id "NEW:ZZC", account_name "Corner Pub~Agent: Abe One", show_buttons 0, and message "changed account", with subs: "DATA'
    . '\\| what    | account_name |'
    . '\\| account | Corner Pub   |"');
  }

  // Scenario: A member changes to different account AND agent
  public function testAMemberChangesToDifferentAccountANDAgent_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZB" and agent is "NEW.ZZC"');
    When_('a member asks device "codeC" to change "agent" to "NEW.ZZA"');
    Then_('we respond success 1, my_id "NEW:ZZE", account_name "Bea Two~Agent: Abe One", show_buttons 0, and message "changed agent", with subs: "DATA'
    . '\\| what  | agent_name |'
    . '\\| agent | Abe One    |"');
  }

  // Scenario: A member changes agent back to default account
  public function testAMemberChangesAgentBackToDefaultAccount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZC" and agent is "NEW.ZZA"');
    When_('a member asks device "codeC" to change "agent" to "NEW.ZZC"');
    Then_('we respond success 1, my_id "NEW.ZZC", account_name "Corner Pub", show_buttons 3, and message "changed agent", with subs: "DATA'
    . '\\| what  | agent_name |'
    . '\\| agent | Corner Pub |"');
  }

  // Scenario: A member changes account back to the default account
  public function testAMemberChangesAccountBackToTheDefaultAccount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeA" account is "NEW.ZZC" and agent is "NEW.ZZA"');
    When_('a member asks device "codeA" to change "account" to "NEW.ZZA"');
    Then_('we respond success 1, my_id "NEW.ZZA", account_name "Abe One", show_buttons 3, and message "changed account", with subs: "DATA'
    . '\\| what    | account_name |'
    . '\\| account | Abe One      |"');
  }

  // Scenario: A member changes agent to same as current non-default account
  public function testAMemberChangesAgentToSameAsCurrentNondefaultAccount_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZA" and agent is "NEW.ZZB"');
    When_('a member asks device "codeC" to change "agent" to "NEW.ZZA"');
    Then_('we respond success 1, my_id "NEW.ZZA", account_name "Abe One", show_buttons 1, and message "changed agent", with subs: "DATA'
    . '\\| what  | agent_name |'
    . '\\| agent | Abe One    |"');
  }

  // Scenario: A member changes account to same as current non-default agent
  public function testAMemberChangesAccountToSameAsCurrentNondefaultAgent_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZA" and agent is "NEW.ZZB"');
    When_('a member asks device "codeC" to change "account" to "NEW.ZZB"');
    Then_('we respond success 1, my_id "NEW.ZZB", account_name "Bea Two", show_buttons 1, and message "changed account", with subs: "DATA'
    . '\\| what    | account_name |'
    . '\\| account | Bea Two      |"');
  }

  // Scenario: A member omits the account_id
  public function testAMemberOmitsTheAccountid_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZA" and agent is "NEW.ZZB"');
    When_('a member asks device "codeC" to change "account" to ""');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | missing account_id |"');
  }

  // Scenario: A member omits the type of change
  public function testAMemberOmitsTheTypeOfChange_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZA" and agent is "NEW.ZZB"');
    When_('a member asks device "codeC" to change "" to "NEW.ZZB"');
    Then_('we respond with: "DATA'
    . '\\| success | message  |'
    . '\\| 0       | bad what |"');
  }

  // Scenario: A member types a bad type of change
  public function testAMemberTypesABadTypeOfChange_0() {
    sceneSetup($this, __FUNCTION__, 0);
    Given('device "codeC" account is "NEW.ZZA" and agent is "NEW.ZZB"');
    When_('a member asks device "codeC" to change %random to "NEW.ZZB"');
    Then_('we respond with: "DATA'
    . '\\| success | message  |'
    . '\\| 0       | bad what |"');
  }

}