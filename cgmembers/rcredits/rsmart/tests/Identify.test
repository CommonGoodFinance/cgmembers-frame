<?php
//
// Feature: Identify
//   AS a cashier
//   I WANT to scan myself in or validate a customer's rCard
//   SO I can charge customers on behalf of my company.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartIdentify extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Identify';
  const FEATURE_NAME = 'rsmart Test - Identify';
  const DESCRIPTION = 'Identify';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | email | city  | state | cc  | cc2  | flags      |'
    . '\\| .ZZA | Abe One    | a@    | Atown | AK    | ccA | ccA2 | ok,bona    |'
    . '\\| .ZZB | Bea Two    | b@    | Btown | UT    | ccB | ccB2 | ok,bona    |'
    . '\\| .ZZC | Corner Pub | c@    | Ctown | CA    | ccC |      | ok,co,bona |'
    . '\\| .ZZD | Dee Four   | d@    | Dtown | DE    | ccD | ccD2 | ok,bona    |'
    . '\\| .ZZE | Eve Five   | e@    | Etown | IL    | ccE | ccE2 | ok,bona,secret |'
    . '\\| .ZZF | Far Co     | f@    | Ftown | FL    | ccF |      | ok,co,bona |'
    . '\\| .ZZG | Gil Seven  | g@    | Gtown | GA    | ccG |      |            |"');
    And__('devices: "ASSOC'
    . '\\| id   | code |'
    . '\\| .ZZC | devC |"');
    And__('selling: "ASSOC'
    . '\\| id   | selling         |'
    . '\\| .ZZC | this,that,other |"');
    And__('company flags: "ASSOC'
    . '\\| id   | flags        |'
    . '\\| .ZZC | refund,r4usd |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission | rCard |'
    . '\\| :ZZA | .ZZC | .ZZA  | buy        | yes   |'
    . '\\| :ZZB | .ZZC | .ZZB  | scan       | yes   |'
    . '\\| :ZZD | .ZZC | .ZZD  | read       |       |'
    . '\\| :ZZE | .ZZF | .ZZE  | buy        |       |"');
    And__('transactions: "ASSOC'
    . '\\| created   | type   | amount | from | to   | purpose |'
    . '\\| %today-6m | signup | 250    | ctty | .ZZA | signup  |'
    . '\\| %today-6m | signup | 250    | ctty | .ZZB | signup  |'
    . '\\| %today-6m | signup | 250    | ctty | .ZZC | signup  |'
    . '\\| %today-6m | signup | 250    | ctty | .ZZD | signup  |'
    . '\\| %today-6m | signup | 250    | ctty | .ZZE | signup  |"');
    break;


    }
  }

  // Scenario: a cashier signs in
  public function testACashierSignsIn_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent "" asks device "devC" to identify "ZZB-ccB2"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name    | logon | descriptions    | can | default | company    | time |'
    . '\\| 1  | Bea Two | 1     | this,that,other |     | NEW.ZZC | Corner Pub | %now |"');
  }

  // Scenario: Device has no identifier yet
  public function testDeviceHasNoIdentifierYet_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent "" asks device "" to identify "ZZB-ccB2"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name    | logon | descriptions    | can | device | default | company    | time |'
    . '\\| 1  | Bea Two | 1     | this,that,other |     | ?      | NEW.ZZC | Corner Pub | %now |"');
  }

  // Scenario: Device should have an identifier
  public function testDeviceShouldHaveAnIdentifier_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "" to identify "ZZB-ccB2"');
    Then_('we return error "missing device"');
  }

  // Scenario: a cashier signs in, signing another cashier out
  public function testACashierSignsInSigningAnotherCashierOut_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" to identify "ZZB-ccB2"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name    | logon | descriptions    | can | default | company    | time |'
    . '\\| 1  | Bea Two | 1     | this,that,other |     | NEW.ZZC | Corner Pub | %now |"');
  }

  // Scenario: a manager signs in
  public function testAManagerSignsIn_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent "" asks device "devC" to identify "ZZA-ccA2"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name    | logon | descriptions    | can          | default | company    | time |'
    . '\\| 1  | Abe One | 1     | this,that,other | refund,r4usd | NEW.ZZC | Corner Pub | %now |"');
  }

  // Scenario: a cashier scans a customer card
  public function testACashierScansACustomerCard_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZB" asks device "devC" to identify "ZZD.ccD"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name     | place     | company | logon | balance | rewards |'
    . '\\| 1  | Dee Four | Dtown, DE |         | 0     | 250     | 250     |"');
  }

  // Scenario: the default cashier scans a customer card
  public function testTheDefaultCashierScansACustomerCard_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ".ZZC" asks device "devC" to identify "ZZD.ccD"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name     | place     | company | logon | balance | rewards |'
    . '\\| 1  | Dee Four | Dtown, DE |         | 0     | 250     | 250     |"');
  }

  // Scenario: an unauthorized cashier scans in
  public function testAnUnauthorizedCashierScansIn_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent "" asks device "devC" to identify "ZZD-ccD2"');
    Then_('we return error "agent cannot scan"');
  }

  // Scenario: a cashier scans a customer card before signing in
  public function testACashierScansACustomerCardBeforeSigningIn_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent "" asks device "devC" to identify "ZZD.ccD"');
    Then_('we return error "scan in first"');
  }

  // Scenario: a cashier asks us to identify the cashier's own card
  public function testACashierAsksUsToIdentifyTheCashiersOwnCard_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZB" asks device "devC" to identify "ZZB-ccB2"');
    Then_('we return error "already scanned in"');
  }

  // Scenario: a cashier scans a customer card whose balance is secret
  public function testACashierScansACustomerCardWhoseBalanceIsSecret_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZB" asks device "devC" to identify "ZZE.ccE"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name     | place     | company | logon | balance | rewards |'
    . '\\| 1  | Eve Five | Etown, IL |         | 0     | *250    | 250     |"');
  }

  // Scenario: a cashier scans a company customer card
  public function testACashierScansACompanyCustomerCard_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZB" asks device "devC" to identify "ZZE-ccE2"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name     | place     | company | logon |'
    . '\\| 1  | Eve Five | Ftown, FL | Far Co  | 0     |"');
  }

  // Scenario: Device asks for a picture to go with the QR
  public function testDeviceAsksForAPictureToGoWithTheQR_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZB" has picture "picture1"');
    When_('agent ":ZZA" asks device "devC" for a picture of member ".ZZB" with card code "ccB"');
    Then_('we respond with picture "picture1"');
  }

  // Scenario: Device asks for a picture but there isn't one
  public function testDeviceAsksForAPictureButThereIsntOne_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZB" has no picture');
    When_('agent ":ZZA" asks device "devC" for a picture of member ".ZZB" with card code "ccB"');
    Then_('we respond with picture "no photo"');
  }

  // Scenario: Device asks for a picture with the wrong card code
  public function testDeviceAsksForAPictureWithTheWrongCardCode_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZB" has picture "picture1"');
    When_('agent ":ZZA" asks device "devC" for a picture of member ".ZZB" with card code %random');
    Then_('we respond with picture "bad customer"');
  }

  // Scenario: A non-yet-active member card is scanned
  public function testANonyetactiveMemberCardIsScanned_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZB" asks device "devC" to identify "ZZG.ccG"');
    Then_('we return error "member inactive" with subs: "ASSOC'
    . '\\| name      |'
    . '\\| Gil Seven |"');
  }

  // Scenario: A member makes a purchase for the first time
  public function testAMemberMakesAPurchaseForTheFirstTime_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZD" has no photo ID recorded');
    When_('agent ".ZZC" asks device "devC" to identify "ZZD.ccD"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name     | place     | company | logon | balance | rewards |'
    . '\\| 1  | Dee Four | Dtown, DE |         | -1    | 250     | 250     |"');
  }

}