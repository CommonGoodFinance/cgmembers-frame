<?php
//
// Feature: Set Device Time
//   AS an rPOS device
//   I WANT to synchronize my time with the server
//   SO I don't inadvertently record bogus data, potentially causing all manner of havoc.
//   Summary:
//   The device ask for the time and we give it.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartTime extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Time';
  const FEATURE_NAME = 'rsmart Test - Time';
  const DESCRIPTION = 'Set Device Time';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    global $testModule; $testModule = self::MODULE;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | email | city  | state | cc  | cc2  | rebate | flags      |'
    . '\\| .ZZA | Abe One    | a@    | Atown | AK    | ccA | ccA2 |      5 | ok,bona    |'
    . '\\| .ZZB | Bea Two    | b@    | Btown | UT    | ccB | ccB2 |      5 | ok,bona    |'
    . '\\| .ZZC | Corner Pub | c@    | Ctown | CA    | ccC |      |      5 | ok,co,bona |"');
    And__('devices: "ASSOC'
    . '\\| id   | code |'
    . '\\| .ZZC | devC |"');
    And__('selling: "ASSOC'
    . '\\| id   | selling         |'
    . '\\| .ZZC | this,that,other |"');
    And__('company flags: "ASSOC'
    . '\\| id   | flags        |'
    . '\\| .ZZC | refund,r4usd |"');
    And__('relations: "ASSOC'
    . '\\| main | agent | num | permission | rCard |'
    . '\\| .ZZC | .ZZA  |   1 | scan       |       |'
    . '\\| .ZZC | .ZZB  |   2 | scan       | yes   |"');
    break;


    }
  }

  // Scenario: The device asks for the time
  public function testTheDeviceAsksForTheTime_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ".ZZC" on device "devC" asks for the time');
    Then_('we respond with: "ASSOC'
    . '\\| ok | time |'
    . '\\| 1  | %now |"');
  }

  // Scenario: a cashier signs in
  public function testACashierSignsIn_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent "" asks device "devC" to identify "C:B,ccB2"');
    Then_('we respond with: "ASSOC'
    . '\\| ok | name    | logon | descriptions    | can          | default | company    | time |'
    . '\\| 1  | Bea Two | 1     | this,that,other | refund,r4usd | NEW.ZZC  | Corner Pub | %now |"');
  }

}