<?php
//
// Feature: Start up
//   AS a member
//   I WANT to run the rCredits POS app on my device
//   SO I can use it to charge customers through the rCredits system.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartStartup extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Startup';
  const FEATURE_NAME = 'rsmart Test - Startup';
  const DESCRIPTION = 'Start up';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    global $testModule; $testModule = self::MODULE;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | phone  | email | cc  | cc2  | flags      |'
    . '\\| .ZZA | Abe One    | +20001 | a@    | ccA | ccA2 | ok,bona    |'
    . '\\| .ZZB | Bea Two    | +20002 | b@    | ccB |      | ok,bona    |'
    . '\\| .ZZC | Corner Pub | +20003 | c@    | ccC |      | ok,co,bona |'
    . '\\| .ZZF | For Co     | +20006 | f@    | ccF |      | co         |"');
    And__('devices: "ASSOC'
    . '\\| id   | code |'
    . '\\| .ZZC | devC |"');
    And__('relations: "ASSOC'
    . '\\| id   | main | agent | permission |'
    . '\\| :ZZA | .ZZC | .ZZA  | buy        |'
    . '\\| :ZZB | .ZZC | .ZZB  | scan       |'
    . '\\| :ZZE | .ZZF | .ZZA  | scan       |"');
    break;


    }
  }

  // Scenario: Device requests a bad op
  public function testDeviceRequestsABadOp_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "devC" for op %random with: ""');
    Then_('we return error "bad op"');
  }

  // Scenario: Device should have an identifier
  public function testDeviceShouldHaveAnIdentifier_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device "" for op "charge" with: "ASSOC'
    . '\\| member | code |'
    . '\\| .ZZB   | ccB  |"');
    Then_('we return error "missing device"');
  }

  // Scenario: Device gives a bad code
  public function testDeviceGivesABadCode_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZA" asks device %random for op "time" with: ""');
    Then_('we return error "unknown device"');
  }

  // Scenario: An Agent for an inactive company tries an op
  public function testAnAgentForAnInactiveCompanyTriesAnOp_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('agent ":ZZE" asks device "devC" for op "charge" with: ""');
    Then_('we return error "company inactive"');
  }

}