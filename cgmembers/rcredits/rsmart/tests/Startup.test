<?php
//
// Feature: Start up
//   As a member
//   I WANT to run the rCredits mobile app on my device
//   SO I can use it to buy and sell with rCredits.
//   
//   

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rSmart.steps';

class rSmartStartup extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %number1 becomes some random number)
  var $currentTest;
  const FEATURE_NAME = 'rSmart Test - Startup';
  const DESCRIPTION = 'Start up';
  const MODULE = 'rSmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->currentTest);
  }
  
  public static function getInfo() {
    return array('name' => self::FEATURE_NAME, 'description' => self::DESCRIPTION, 'group' => ucwords(self::MODULE));
  }

  public function setUp() { // especially, enable any modules required for the tests
    parent::setUp(self::MODULE);
    $setup_filename = __DIR__ . '/../' . self::MODULE . '-testSetup.inc';
    if (file_exists($setup_filename)) include $setup_filename;

    sceneSetup($this, __FUNCTION__);
    Given('members: "DATA'
    . '\\| id      | full_name  | phone  | email         |'
    . '\\| NEW.ZZA | Abe One    | +20001 | a@example.com |"');

  }

  // Scenario: Member logs in successfully to initialize device
  public function testMemberLogsInSuccessfullyToInitializeDevice() {
    sceneSetup($this, __FUNCTION__);
    Given('member NEW.ZZA password is %whatever1');
    When_('member initializes the device as member "new.zza" with password %whatever1');
    Then_('we respond with: "DATA'
    . '\\| success | owner_id | message    | code     |'
    . '\\| 1       | NEW.ZZA  | first time | whatever |"');
  }

  // Scenario: Member initializes with an ill-formed id
  public function testMemberInitializesWithAnIllformedId() {
    sceneSetup($this, __FUNCTION__);
    When_('member initializes the device as member %random with password %whatever');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | bad id  |"');
  }

  // Scenario: Device owner is not a member
  public function testDeviceOwnerIsNotAMember() {
    sceneSetup($this, __FUNCTION__);
    When_('member initializes the device as member "new.zzz" with password %whatever1');
    Then_('we respond with: "DATA'
    . '\\| success | message      |'
    . '\\| 0       | unknown user |"');
  }

  // Scenario: Member types the wrong password
  public function testMemberTypesTheWrongPassword() {
    sceneSetup($this, __FUNCTION__);
    When_('member initializes the device as member "new.zza" with password %whatever');
    Then_('we respond with: "DATA'
    . '\\| success | message   |'
    . '\\| 0       | bad login |"');
  }

  // Scenario: Member reruns the app
  public function testMemberRerunsTheApp() {
    sceneSetup($this, __FUNCTION__);
    Given('member "NEW.ZZA" has initialized a device whose code is %whatever1');
    When_('the app starts up as member "NEW.ZZA" and code %whatever1');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| TRUE    |         |"');
  }

}