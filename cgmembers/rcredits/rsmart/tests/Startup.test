<?php
//
// Feature: Start up
//   As a member
//   I WANT to run the rCredits mobile app on my device
//   SO I can use it to buy and sell with rCredits.
//   
//   

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartStartup extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %number1 becomes some random number)
  var $currentTest;
  const FEATURE_NAME = 'rsmart Test - Startup';
  const DESCRIPTION = 'Start up';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->currentTest);
  }
  
  public static function getInfo() {
    return array('name' => self::FEATURE_NAME, 'description' => self::DESCRIPTION, 'group' => ucwords(self::MODULE));
  }

  public function setUp() { // especially, enable any modules required for the tests
    parent::setUp(self::MODULE);
    $setup_filename = __DIR__ . '/../' . self::MODULE . '-testSetup.inc';
    if (file_exists($setup_filename)) include $setup_filename;

    sceneSetup($this, __FUNCTION__);
    Given('members: "DATA'
    . '\\| id      | full_name  | phone  | email         |'
    . '\\| NEW.ZZA | Abe One    | +20001 | a@example.com |'
    . '\\| NEW.ZZB | Bea Two    | +20002 | b@example.com |'
    . '\\| NEW.ZZC | Corner Pub | +20003 | c@example.com |"');
    And__('devices: "DATA'
    . '\\| id      | code  |'
    . '\\| NEW.ZZA | codeA |"');
    And__('relations: "DATA'
    . '\\| id      | main    | agent   | permissions  |'
    . '\\| NEW:ZZA | NEW.ZZC | NEW.ZZB |              |"');

  }

  // Scenario: Member logs in successfully to initialize device
  public function testMemberLogsInSuccessfullyToInitializeDevice0() {
    sceneSetup($this, __FUNCTION__);
    Given('member "NEW.ZZA" password is %whatever1');
    When_('member initializes the device as member "NEW.ZZA" with password %whatever1');
    Then_('we respond with: "DATA'
    . '\\| success | owner_id | code       | message    |'
    . '\\| 1       | NEW.ZZA  | (the code) | first time |"');
  }

  // Scenario: Member initializes with an ill-formed id
  public function testMemberInitializesWithAnIllformedId0() {
    sceneSetup($this, __FUNCTION__);
    When_('member initializes the device as member %random with password %whatever');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | bad id  |"');
  }

  // Scenario: Device owner is not a member
  public function testDeviceOwnerIsNotAMember0() {
    sceneSetup($this, __FUNCTION__);
    When_('member initializes the device as member "NEW.ZZZ" with password %whatever1');
    Then_('we respond with: "DATA'
    . '\\| success | message      |'
    . '\\| 0       | unknown member |"');
  }

  // Scenario: Member types the wrong password
  public function testMemberTypesTheWrongPassword0() {
    sceneSetup($this, __FUNCTION__);
    When_('member initializes the device as member "NEW.ZZA" with password %random');
    Then_('we respond with: "DATA'
    . '\\| success | message   |'
    . '\\| 0       | bad login |"');
  }

  // Scenario: Member reruns the app
  public function testMemberRerunsTheApp0() {
    sceneSetup($this, __FUNCTION__);
    Given('member "NEW.ZZA" has initialized a device whose code is %whatever1');
    When_('the app starts up as member "NEW.ZZA" and code %whatever1');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 1       |         |"');
  }

  // Scenario: Device requests a bad op
  public function testDeviceRequestsABadOp0() {
    sceneSetup($this, __FUNCTION__);
    When_('the app requests op %random as member "NEW.ZZA" and code "codeA"');
    Then_('we respond with: "DATA'
    . '\\| success | message    |'
    . '\\| 0       | unknown op |"');
  }

  // Scenario: Device gives no member id
  public function testDeviceGivesNoMemberId0() {
    sceneSetup($this, __FUNCTION__);
    When_('the app starts up as member "" and code "codeA"');
    Then_('we respond with: "DATA'
    . '\\| success | message       |'
    . '\\| 0       | bad id format |"');
  }

  // Scenario: Device gives bad member id
  public function testDeviceGivesBadMemberId0() {
    sceneSetup($this, __FUNCTION__);
    When_('the app starts up as member %random and code "codeA"');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | not an account |"');
  }

  // Scenario: Device gives no code
  public function testDeviceGivesNoCode0() {
    sceneSetup($this, __FUNCTION__);
    When_('the app starts up as member "NEW.ZZA" and code ""');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no code |"');
  }

  // Scenario: Device gives a bad code
  public function testDeviceGivesABadCode0() {
    sceneSetup($this, __FUNCTION__);
    When_('the app starts up as member "NEW.ZZA" and code %random');
    Then_('we respond with: "DATA'
    . '\\| success | message        |'
    . '\\| 0       | unknown device |"');
  }

  // Scenario: Agent does not have permission
  public function testAgentDoesNotHavePermission0() {
    sceneSetup($this, __FUNCTION__);
    When_('the app starts up as member "NEW:ZZA" and code "codeA"');
    Then_('we respond with: "DATA'
    . '\\| success | message       |'
    . '\\| 0       | no permission |"');
  }

}