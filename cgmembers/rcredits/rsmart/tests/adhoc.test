<?php
//
// Feature: adhoc
//   As a member
//   I WANT to temporarily change the agent or account associated with a device
//   SO I can use it (or assign someone) to buy and sell with rCredits, on behalf of another member.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartadhoc extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'adhoc';
  const FEATURE_NAME = 'rsmart Test - adhoc';
  const DESCRIPTION = 'adhoc';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id      | fullName  | phone  | email         | city  | state  | country       |'
    . '\\| NEW.ZZA | Abe One    | +20001 | a@ | Atown | Alaska | United States |'
    . '\\| NEW.ZZB | Bea Two    | +20002 | b@ | Btown | Utah   | United States |'
    . '\\| NEW.ZZC | Corner Pub | +20003 | c@ | Ctown | Corse  | France        |"');
    And__('devices: "DATA'
    . '\\| id      | code  | default_agent |'
    . '\\| NEW.ZZA | codeA | NEW.ZZA       |'
    . '\\| NEW.ZZB | codeB | NEW.ZZB       |'
    . '\\| NEW.ZZC | codeC | NEW.ZZB       |"');
    And__('relations: "DATA'
    . '\\| id      | main    | agent   | permission        |'
    . '\\| NEW.ZZA | NEW.ZZA | NEW.ZZB | buy and sell      |'
    . '\\| NEW.ZZB | NEW.ZZB | NEW.ZZC | sell              |'
    . '\\| NEW.ZZC | NEW.ZZC | NEW.ZZA | read transactions |'
    . '\\| NEW.ZZD | NEW.ZZC | NEW.ZZB |                   |'
    . '\\| NEW.ZZE | NEW.ZZB | NEW.ZZA | read transactions |'
    . '\\| NEW.ZZF | NEW.ZZA | NEW.ZZC | sell              |"');
    break;


    }
  }

  // Scenario: A member changes account
  public function testAMemberChangesAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('device "codeA" account is "NEW.ZZB" and agent is "NEW.ZZA"');
    When_('a member asks device "codeA" to change "account" to "NEW.ZZC"');
    Then_('we respond success 1, my_id "NEW.ZZC", account_name "Corner Pub~Agent: Abe One", show_buttons 0, and message "changed account", with subs: "DATA'
    . '\\| what    | accountName |'
    . '\\| account | Corner Pub  |"');
  }

}