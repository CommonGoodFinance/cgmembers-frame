<?php
//
// Feature: Undo Attack
//   AS member
//   I WANT to be thoroughly protected from technological glitches and malicious attacks
//   SO I can have confidence in the security of my credit
//   Summary:
//   Post-setup variants for unconfirmed and confirmed)
//   Device gives no transaction id
//   Device gives bad transaction id
//   Device gives nonexistent transaction id
//   Device gives no confirmation status
//   Device gives bad confirmation status
//   Member asks to undo someone else's transaction
//   Buyer agent lacks permission to reverse sale
//   Seller agent lacks permission to reverse purchase

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rsmart.steps';

class rsmartUndoAttack extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'UndoAttack';
  const FEATURE_NAME = 'rsmart Test - UndoAttack';
  const DESCRIPTION = 'Undo Attack';
  const MODULE = 'rsmart';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rsmart.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id      | full_name  | phone  | email         | city  | state  | country       |'
    . '\\| NEW.ZZA | Abe One    | +20001 | a@example.com | Atown | Alaska | United States |'
    . '\\| NEW.ZZB | Bea Two    | +20002 | b@example.com | Btown | Utah   | United States |'
    . '\\| NEW.ZZC | Corner Pub | +20003 | c@example.com | Ctown | Corse  | France        |"');
    And__('devices: "DATA'
    . '\\| id      | code  |'
    . '\\| NEW.ZZA | codeA |'
    . '\\| NEW.ZZB | codeB |'
    . '\\| NEW.ZZC | codeC |"');
    And__('relations: "DATA'
    . '\\| id      | main    | agent   | permission        |'
    . '\\| NEW:ZZA | NEW.ZZA | NEW.ZZB | buy and sell      |'
    . '\\| NEW:ZZB | NEW.ZZB | NEW.ZZA | read transactions |'
    . '\\| NEW:ZZC | NEW.ZZC | NEW.ZZB | buy and sell      |'
    . '\\| NEW:ZZD | NEW.ZZC | NEW.ZZA | sell              |"');
    And__('transactions: "DATA'
    . '\\| tx_id    | created   | type         | state       | amount | from      | to      | purpose      | taking |'
    . '\\| NEW:AAAB | %today-7m | %TX_SIGNUP   | %TX_DONE    |    250 | community | NEW.ZZA | signup       | 0      |'
    . '\\| NEW:AAAC | %today-6m | %TX_SIGNUP   | %TX_DONE    |    250 | community | NEW.ZZB | signup       | 0      |'
    . '\\| NEW:AAAD | %today-2d | %TX_TRANSFER | %TX_DONE    |      5 | NEW.ZZB   | NEW.ZZC | cash given   | 0      |'
    . '\\| NEW:AAAE | %today-1d | %TX_TRANSFER | %TX_DONE    |     80 | NEW.ZZA   | NEW.ZZC | whatever54   | 1      |"');
    Then_('balances: "DATA'
    . '\\| id        | balance |'
    . '\\| community |    -500 |'
    . '\\| NEW.ZZA   |     170 |'
    . '\\| NEW.ZZB   |     245 |'
    . '\\| NEW.ZZC   |      85 |"');
    break;


    }
  }

  // Scenario: Device gives no transaction id
  public function testDeviceGivesNoTransactionId_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction "", with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message                |'
    . '\\| 0       | missing transaction id |"');
  }

  // Scenario: Device gives bad transaction id
  public function testDeviceGivesBadTransactionId_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction %random, with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | bad transaction id |"');
  }

  // Scenario: Device gives nonexistent transaction id
  public function testDeviceGivesNonexistentTransactionId_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member " NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAZ", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message       | my_balance |'
    . '\\| 0       | undo no match | $170       |"');
  }

  // Scenario: Device gives no confirmation status
  public function testDeviceGivesNoConfirmationStatus_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAB", with the request ""');
    Then_('we respond with: "DATA'
    . '\\| success | message                 |'
    . '\\| 0       | bad confirmation status |"');
  }

  // Scenario: Device gives bad confirmation status
  public function testDeviceGivesBadConfirmationStatus_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAB", with the request %random');
    Then_('we respond with: "DATA'
    . '\\| success | message                 |'
    . '\\| 0       | bad confirmation status |"');
  }

  // Scenario: Member asks to undo someone else's transaction
  public function testMemberAsksToUndoSomeoneElsesTransaction_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member " NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAC", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message       | my_balance |'
    . '\\| 0       | undo no match | $170       |"');
  }

  // Scenario: Buyer agent lacks permission to reverse sale
  public function testBuyerAgentLacksPermissionToReverseSale_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeC" to undo transaction "NEW:AAAE", with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy          |"');
  }

  // Scenario: Seller agent lacks permission to reverse purchase
  public function testSellerAgentLacksPermissionToReversePurchase_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('member "NEW.ZZA" asks device "codeB" to undo transaction "NEW:AAAD", with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

  // Scenario: Device gives no transaction id
  public function testDeviceGivesNoTransactionId_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction "", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message                |'
    . '\\| 0       | missing transaction id |"');
  }

  // Scenario: Device gives bad transaction id
  public function testDeviceGivesBadTransactionId_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction %random, with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | bad transaction id |"');
  }

  // Scenario: Device gives nonexistent transaction id
  public function testDeviceGivesNonexistentTransactionId_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member " NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAZ", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message       | my_balance |'
    . '\\| 0       | undo no match | $170       |"');
  }

  // Scenario: Device gives no confirmation status
  public function testDeviceGivesNoConfirmationStatus_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAB", with the request ""');
    Then_('we respond with: "DATA'
    . '\\| success | message                 |'
    . '\\| 0       | bad confirmation status |"');
  }

  // Scenario: Device gives bad confirmation status
  public function testDeviceGivesBadConfirmationStatus_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member "NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAB", with the request %random');
    Then_('we respond with: "DATA'
    . '\\| success | message                 |'
    . '\\| 0       | bad confirmation status |"');
  }

  // Scenario: Member asks to undo someone else's transaction
  public function testMemberAsksToUndoSomeoneElsesTransaction_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member " NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAC", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message       | my_balance |'
    . '\\| 0       | undo no match | $170       |"');
  }

  // Scenario: Buyer agent lacks permission to reverse sale
  public function testBuyerAgentLacksPermissionToReverseSale_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member "NEW.ZZA" asks device "codeC" to undo transaction "NEW:AAAE", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy          |"');
  }

  // Scenario: Seller agent lacks permission to reverse purchase
  public function testSellerAgentLacksPermissionToReversePurchase_1() {
    $this->setUp2(__FUNCTION__, 1);
    When_('member "NEW.ZZA" asks device "codeB" to undo transaction "NEW:AAAD", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

  // Scenario: Device gives no transaction id
  public function testDeviceGivesNoTransactionId_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to undo transaction "", with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message                |'
    . '\\| 0       | missing transaction id |"');
  }

  // Scenario: Device gives bad transaction id
  public function testDeviceGivesBadTransactionId_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to undo transaction %random, with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message            |'
    . '\\| 0       | bad transaction id |"');
  }

  // Scenario: Device gives nonexistent transaction id
  public function testDeviceGivesNonexistentTransactionId_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member " NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAZ", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message       | my_balance |'
    . '\\| 0       | undo no match | $170       |"');
  }

  // Scenario: Device gives no confirmation status
  public function testDeviceGivesNoConfirmationStatus_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to undo transaction "NEW:AAAB", with the request ""');
    Then_('we respond with: "DATA'
    . '\\| success | message                 |'
    . '\\| 0       | bad confirmation status |"');
  }

  // Scenario: Device gives bad confirmation status
  public function testDeviceGivesBadConfirmationStatus_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member "NEW.ZZB" asks device "codeA" to undo transaction "NEW:AAAB", with the request %random');
    Then_('we respond with: "DATA'
    . '\\| success | message                 |'
    . '\\| 0       | bad confirmation status |"');
  }

  // Scenario: Member asks to undo someone else's transaction
  public function testMemberAsksToUndoSomeoneElsesTransaction_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member " NEW.ZZA" asks device "codeA" to undo transaction "NEW:AAAC", with the request "confirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message       | my_balance |'
    . '\\| 0       | undo no match | $170       |"');
  }

  // Scenario: Buyer agent lacks permission to reverse sale
  public function testBuyerAgentLacksPermissionToReverseSale_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member "NEW.ZZA" asks device "codeC" to undo transaction "NEW:AAAE", with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message         |'
    . '\\| 0       | no buy          |"');
  }

  // Scenario: Seller agent lacks permission to reverse purchase
  public function testSellerAgentLacksPermissionToReversePurchase_3() {
    $this->setUp2(__FUNCTION__, 3);
    When_('member "NEW.ZZA" asks device "codeB" to undo transaction "NEW:AAAD", with the request "unconfirmed"');
    Then_('we respond with: "DATA'
    . '\\| success | message |'
    . '\\| 0       | no sell |"');
  }

}