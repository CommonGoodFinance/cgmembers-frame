<?php
/**
 * @file
 *  Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file header will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */

require_once __DIR__ . '/../defs.inc';

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  //  require_once __DIR__ . '/../whatever.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup() {}

/**
 * members: (ARG)
 *
 * in: MAKE Time Setup
 *     MAKE Offline Setup
 *     MAKE Startup Setup
 *     MAKE Joint Setup
 *     MAKE Undo Setup
 *     MAKE Transact Setup
 *     MAKE Exchange Setup
 *     MAKE Identify Setup
 *     MAKE Coupons Setup
 */
function members() {
  global $testOnly;
  todo;
}

/**
 * devices: (ARG)
 *
 * in: MAKE Time Setup
 *     MAKE Offline Setup
 *     MAKE Startup Setup
 *     MAKE Joint Setup
 *     MAKE Undo Setup
 *     MAKE Transact Setup
 *     MAKE Exchange Setup
 *     MAKE Identify Setup
 *     MAKE Coupons Setup
 */
function devices() {
  global $testOnly;
  todo;
}

/**
 * selling: (ARG)
 *
 * in: MAKE Time Setup
 *     MAKE Offline Setup
 *     MAKE Joint Setup
 *     MAKE Undo Setup
 *     MAKE Transact Setup
 *     MAKE Exchange Setup
 *     MAKE Identify Setup
 *     MAKE Coupons Setup
 */
function selling() {
  global $testOnly;
  todo;
}

/**
 * company flags: (ARG)
 *
 * in: MAKE Time Setup
 *     MAKE Offline Setup
 *     MAKE Joint Setup
 *     MAKE Undo Setup
 *     MAKE Transact Setup
 *     MAKE Exchange Setup
 *     MAKE Identify Setup
 *     MAKE Coupons Setup
 */
function companyFlags() {
  global $testOnly;
  todo;
}

/**
 * relations: (ARG)
 *
 * in: MAKE Time Setup
 *     MAKE Offline Setup
 *     MAKE Startup Setup
 *     MAKE Joint Setup
 *     MAKE Undo Setup
 *     MAKE Transact Setup
 *     MAKE Exchange Setup
 *     MAKE Identify Setup
 *     MAKE Coupons Setup
 */
function relations() {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) on device (ARG) asks for the time
 *
 * in: MAKE Time TheDeviceAsksForTheTime
 */
function agentOnDeviceAsksForTheTime($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * we respond with: (ARG)
 *
 * in: TEST Time TheDeviceAsksForTheTime
 *     TEST Time ACashierSignsIn
 *     TEST Identify ACashierSignsIn
 *     TEST Identify DeviceHasNoIdentifierYet
 *     TEST Identify ACashierSignsInSigningAnotherCashierOut
 *     TEST Identify AManagerSignsIn
 *     TEST Identify ACashierScansACustomerCard
 *     TEST Identify TheDefaultCashierScansACustomerCard
 *     TEST Identify ACustomerScansTheirOwnCardForSelfservice
 *     TEST Identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     TEST Identify ACashierScansACompanyCustomerCard
 *     TEST Identify AMemberMakesAPurchaseForTheFirstTime
 */
function weRespondWith() {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) to identify (ARG)
 *
 * in: MAKE Time ACashierSignsIn
 *     MAKE Identify ACashierSignsIn
 *     MAKE Identify DeviceHasNoIdentifierYet
 *     MAKE Identify DeviceShouldHaveAnIdentifier
 *     MAKE Identify ACashierSignsInSigningAnotherCashierOut
 *     MAKE Identify AManagerSignsIn
 *     MAKE Identify ACashierScansACustomerCard
 *     MAKE Identify TheDefaultCashierScansACustomerCard
 *     MAKE Identify TheDefaultCashierScansADeactivatedCard
 *     MAKE Identify AnUnauthorizedCashierScansIn
 *     MAKE Identify ACashierScansACustomerCardBeforeSigningIn
 *     MAKE Identify ACashierAsksUsToIdentifyTheCashiersOwnCard
 *     MAKE Identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     MAKE Identify ACashierScansACompanyCustomerCard
 *     MAKE Identify ANonyetactiveMemberCardIsScanned
 *     MAKE Identify AMemberMakesAPurchaseForTheFirstTime
 */
function agentAsksDeviceToIdentify($arg1, $arg2, $arg3) {
  global $testOnly;
  todo;
}

/**
 * transactions: (ARG)
 *
 * in: MAKE Offline Setup
 *     MAKE Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE Joint Setup
 *     MAKE Undo Setup
 *     MAKE Undo AnAgentAsksToUndoACharge
 *     MAKE Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE Undo AnAgentAsksToUndoARefund
 *     MAKE Undo AnAgentAsksToUndoACashoutCharge
 *     MAKE Undo AnAgentAsksToUndoACashinPayment
 *     MAKE Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE Undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE Undo AnAgentAsksToUndoARefundWithoutPermission
 *     BOTH Undo ACashierReversesATransactionWithInsufficientFunds
 *     MAKE Transact Setup
 *     MAKE Exchange Setup
 *     MAKE Identify Setup
 *     TEST Coupons AMemberRedeemsAGiftCoupon
 */
function transactions() {
  global $testOnly;
  todo;
}

/**
 * balances: (ARG)
 *
 * in: TEST Offline Setup
 *     TEST Offline ACashierChargedSomeoneOffline
 *     TEST Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST Offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Joint Setup
 *     TEST Joint ACashierAsksToChargeSomeone
 *     TEST Undo Setup
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Transact Setup
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
 *     TEST Exchange Setup
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 */
function balances() {
  global $testOnly;
  todo;
}

/**
 * reconciling (ARG) on (ARG) charging (ARG) $(ARG) for (ARG): (ARG) at (ARG) force (ARG)
 *
 * in: MAKE Offline ACashierChargedSomeoneOffline
 *     MAKE Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE Offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 */
function reconcilingOnChargingForAtForce($arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8) {
  global $testOnly;
  todo;
}

/**
 * we respond ok txid (ARG) created (ARG) balance (ARG) rewards (ARG) saying: (ARG)
 *
 * in: TEST Offline ACashierChargedSomeoneOffline
 *     TEST Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     TEST Joint ACashierAsksToChargeSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoAChargeWithoutPermission
 *     TEST Undo AnAgentAsksToUndoARefundWithoutPermission
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
 *     TEST Transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
 */
function weRespondOkTxidCreatedBalanceRewardsSaying($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Offline ACashierChargedSomeoneOffline
 *     TEST Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Joint ACashierAsksToChargeSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 */
function weNoticeToMemberWithSubs($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * we respond ok txid (ARG) created (ARG) balance (ARG) rewards (ARG)
 *
 * in: TEST Offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST Offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 */
function weRespondOkTxidCreatedBalanceRewards($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG) at (ARG)
 *
 * in: MAKE Offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE Joint ACashierAsksToChargeSomeone
 *     MAKE Transact ACashierAsksToChargeSomeone
 *     MAKE Transact ACashierAsksToRefundSomeone
 *     MAKE Transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE Transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE Transact ACashierAsksToPaySelf
 *     MAKE Transact DeviceGivesNoMemberId
 *     MAKE Transact DeviceGivesBadAccountId
 *     MAKE Transact DeviceGivesNoAmount
 *     MAKE Transact DeviceGivesBadAmount
 *     MAKE Transact DeviceGivesTooBigAnAmount
 *     MAKE Transact DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE Transact SellerAgentLacksPermissionToBuy
 *     MAKE Transact SellerAgentLacksPermissionToScanAndSell
 *     MAKE Transact BuyerAgentLacksPermissionToBuy
 *     MAKE Transact SellerTriesToChargeTheCustomerTwice
 *     MAKE Transact DeviceSendsWrongProof
 *     MAKE Transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
 *     MAKE Exchange ACashierAsksToChargeSomeoneForCash
 *     MAKE Exchange ACashierAsksToRefundSomeone
 *     MAKE Exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE Exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE Exchange ACashierAsksToPaySelf
 *     MAKE Exchange DeviceGivesNoMemberId
 *     MAKE Exchange DeviceGivesBadAccountId
 *     MAKE Exchange DeviceGivesNoAmount
 *     MAKE Exchange DeviceGivesBadAmount
 *     MAKE Exchange DeviceGivesTooBigAnAmount
 *     MAKE Exchange DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE Exchange SellerAgentLacksPermissionToBuy
 *     MAKE Exchange SellerAgentLacksPermissionToScanAndSell
 *     MAKE Exchange BuyerAgentLacksPermissionToBuy
 *     MAKE Exchange DeviceSendsWrongProof
 *     MAKE Coupons AMemberRedeemsAGiftCoupon
 */
function agentAsksDeviceToChargeForAt($arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7) {
  global $testOnly;
  todo;
}

/**
 * with undo (ARG)
 *
 * in: TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST Offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST Joint ACashierAsksToChargeSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST Undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 */
function withUndo($arg1) {
  global $testOnly;
  todo;
}

/**
 * members have: (ARG)
 *
 * in: MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 *     MAKE Identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE Identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 */
function membersHave() {
  global $testOnly;
  todo;
}

/**
 * we return error (ARG)
 *
 * in: TEST Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     TEST Offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 *     TEST Startup DeviceRequestsABadOp
 *     TEST Startup DeviceShouldHaveAnIdentifier
 *     TEST Startup DeviceGivesABadCode
 *     TEST Startup AnAgentForAnInactiveCompanyTriesAnOp
 *     TEST Transact ACashierAsksToPaySelf
 *     TEST Transact DeviceGivesNoMemberId
 *     TEST Transact DeviceGivesBadAccountId
 *     TEST Transact DeviceGivesNoAmount
 *     TEST Transact DeviceGivesBadAmount
 *     TEST Transact DeviceGivesNoPurposeForGoodsAndServices
 *     TEST Transact DeviceSendsWrongProof
 *     TEST Exchange ACashierAsksToPaySelf
 *     TEST Exchange DeviceGivesNoMemberId
 *     TEST Exchange DeviceGivesBadAccountId
 *     TEST Exchange DeviceGivesNoAmount
 *     TEST Exchange DeviceGivesBadAmount
 *     TEST Exchange DeviceGivesNoPurposeForGoodsAndServices
 *     TEST Exchange DeviceSendsWrongProof
 *     TEST Identify DeviceShouldHaveAnIdentifier
 *     TEST Identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 *     TEST Identify TheDefaultCashierScansADeactivatedCard
 *     TEST Identify AnUnauthorizedCashierScansIn
 *     TEST Identify ACashierScansACustomerCardBeforeSigningIn
 *     TEST Identify ACashierAsksUsToIdentifyTheCashiersOwnCard
 */
function weReturnError($arg1) {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) for op (ARG) with: (ARG)
 *
 * in: MAKE Startup DeviceRequestsABadOp
 *     MAKE Startup DeviceShouldHaveAnIdentifier
 *     MAKE Startup DeviceGivesABadCode
 *     MAKE Startup AnAgentForAnInactiveCompanyTriesAnOp
 */
function agentAsksDeviceForOpWith($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}

/**
 * with did (ARG)
 *
 * in: TEST Joint ACashierAsksToChargeSomeone
 *     TEST Undo AnAgentAsksToUndoACharge
 *     TEST Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST Undo AnAgentAsksToUndoARefund
 *     TEST Undo AnAgentAsksToUndoACashoutCharge
 *     TEST Undo AnAgentAsksToUndoACashinPayment
 *     TEST Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST Undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST Transact ACashierAsksToChargeSomeone
 *     TEST Transact ACashierAsksToRefundSomeone
 *     TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 */
function withDid() {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) to undo transaction with subs: (ARG)
 *
 * in: MAKE Undo AnAgentAsksToUndoACharge
 *     MAKE Undo AnAgentAsksToUndoANonexistentTransaction
 *     MAKE Coupons AMemberRedeemsAGiftCoupon
 */
function agentAsksDeviceToUndoTransactionWithSubs($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) to undo transaction (ARG) code (ARG)
 *
 * in: MAKE Undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE Undo AnAgentAsksToUndoARefund
 *     MAKE Undo AnAgentAsksToUndoACashoutCharge
 *     MAKE Undo AnAgentAsksToUndoACashinPayment
 *     MAKE Undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE Undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE Undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE Undo AnAgentAsksToUndoARefundWithoutPermission
 */
function agentAsksDeviceToUndoTransactionCode($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG) at (ARG) force (ARG)
 *
 * in: MAKE Undo ACashierReversesATransactionWithInsufficientFunds
 */
function agentAsksDeviceToChargeForAtForce($arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8) {
  global $testOnly;
  todo;
}

/**
 * we return error (ARG) with subs: (ARG)
 *
 * in: TEST Transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     TEST Transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     TEST Transact DeviceGivesTooBigAnAmount
 *     TEST Transact SellerAgentLacksPermissionToBuy
 *     TEST Transact SellerAgentLacksPermissionToScanAndSell
 *     TEST Transact BuyerAgentLacksPermissionToBuy
 *     TEST Transact SellerTriesToChargeTheCustomerTwice
 *     TEST Exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     TEST Exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     TEST Exchange DeviceGivesTooBigAnAmount
 *     TEST Exchange SellerAgentLacksPermissionToBuy
 *     TEST Exchange SellerAgentLacksPermissionToScanAndSell
 *     TEST Exchange BuyerAgentLacksPermissionToBuy
 *     TEST Identify ANonyetactiveMemberCardIsScanned
 */
function weReturnErrorWithSubs($arg1) {
  global $testOnly;
  todo;
}

/**
 * with message (ARG) with subs: (ARG)
 *
 * in: TEST Exchange ACashierAsksToChargeSomeoneForCash
 *     TEST Exchange ACashierAsksToRefundSomeone
 */
function withMessageWithSubs($arg1) {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) to identify (ARG) with PIN (ARG)
 *
 * in: MAKE Identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE Identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 */
function agentAsksDeviceToIdentifyWithPIN($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}

/**
 * we change member (ARG) cardCode
 *
 * in: MAKE Identify TheDefaultCashierScansADeactivatedCard
 */
function weChangeMemberCardCode($arg1) {
  global $testOnly;
  todo;
}

/**
 * bad codes (ARG)
 *
 * in: TEST Identify TheDefaultCashierScansADeactivatedCard
 */
function badCodes($arg1) {
  global $testOnly;
  todo;
}

/**
 * member (ARG) has picture (ARG)
 *
 * in: MAKE Identify DeviceAsksForAPictureToGoWithTheQR
 *     MAKE Identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function memberHasPicture($arg1, $arg2) {
  global $testOnly;
  todo;
}

/**
 * agent (ARG) asks device (ARG) for a picture of member (ARG) with card code (ARG)
 *
 * in: MAKE Identify DeviceAsksForAPictureToGoWithTheQR
 *     MAKE Identify DeviceAsksForAPictureButThereIsntOne
 *     MAKE Identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function agentAsksDeviceForAPictureOfMemberWithCardCode($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}

/**
 * we respond with picture (ARG)
 *
 * in: TEST Identify DeviceAsksForAPictureToGoWithTheQR
 *     TEST Identify DeviceAsksForAPictureButThereIsntOne
 *     TEST Identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function weRespondWithPicture($arg1) {
  global $testOnly;
  todo;
}

/**
 * member (ARG) has no picture
 *
 * in: MAKE Identify DeviceAsksForAPictureButThereIsntOne
 */
function memberHasNoPicture($arg1) {
  global $testOnly;
  todo;
}

/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE Identify AMemberMakesAPurchaseForTheFirstTime
 */
function memberHasNoPhotoIDRecorded($arg1) {
  global $testOnly;
  todo;
}

/**
 * coupons: (ARG)
 *
 * in: MAKE Coupons AMemberRedeemsAGiftCoupon
 */
function coupons() {
  global $testOnly;
  todo;
}

/**
 * transaction count is (ARG)
 *
 * in: TEST Coupons AMemberRedeemsAGiftCoupon
 */
function transactionCountIs($arg1) {
  global $testOnly;
  todo;
}
