<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */

use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';
require_once __DIR__ . '/../rsmart/rsmart.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  global $picturePath; 
  list ($picturePath) = explode('sites', __DIR__);
  $picturePath .= 'sites/default/files/pictures';

  global $sms_devel; $sms_devel = TRUE;
  r\dbQ('DELETE FROM users WHERE uid>1000');
  r\dbQ('TRUNCATE r_sms');
  r\dbQ('TRUNCATE r_asif');
  r\dbQ('TRUNCATE r_txs');
  r\dbQ('DELETE FROM r_smarts WHERE owner>1000');
  r\dbQ('DELETE FROM file_managed WHERE uid>1000');
  r\dbQ('TRUNCATE r_relations');
  r\dbQ('TRUNCATE r_log'); // so we don't find results from the wrong test

  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}

  r\acct::_clear(); // empty the acct cache
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * members: (ARG)
 *
 * in: adhoc Setup MAKE
 *     Change Setup MAKE
 *     IdentifyQR Setup MAKE
 *     Insufficient Setup MAKE
 *     Startup Setup MAKE
 *     Transact Setup MAKE
 *     UndoAttack Setup MAKE
 *     UndoCompleted Setup MAKE
 *     UndoPending Setup MAKE
 *     Unilateral Setup MAKE
 */
function members($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeAccount($one)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: adhoc Setup MAKE
 *     Change Setup MAKE
 *     IdentifyQR Setup MAKE
 *     Insufficient Setup MAKE
 *     Startup Setup MAKE
 *     Transact Setup MAKE
 *     UndoAttack Setup MAKE
 *     UndoCompleted Setup MAKE
 *     UndoPending Setup MAKE
 *     Unilateral Setup MAKE
 */
function relations($relations) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($relations as $one) if (!t\makeRelation($one)) return FALSE;
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: IdentifyQR Setup MAKE
 *     Insufficient Setup MAKE
 *     Transact Setup MAKE
 *     UndoAttack Setup MAKE
 *     UndoCompleted Setup MAKE
 *     UndoPending Setup MAKE
 *     Unilateral Setup MAKE
 */
function transactions($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeTransaction($one)) return FALSE;
  return TRUE;
}

/**
 * member (ARG) has initialized a device whose code is (ARG)
 *
 * in: Startup MemberRerunsTheApp MAKE
 */
function memberHasInitializedADeviceWhoseCodeIs($id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\Smart\makeDevice(t('Test Device'), r\acct($id), $code);
}

/**
 * member (ARG) asks device (ARG) to identify QR (ARG)
 *
 * in: IdentifyQR MemberAsksUsToIdentifyAQR MAKE
 *     IdentifyQR MemberAsksUsToIdentifyTheMembersOwnQR MAKE
 *     IdentifyQR MemberAsksUsToIdentifyAForeignQR MAKE
 *     IdentifyQR MemberAsksUsToIdentifyAQRAndMemberCanShowBalances MAKE
 *     IdentifyQR MemberAsksUsToIdentifyAQRForACompanyAgent MAKE
 */
function memberAsksDeviceToIdentifyQR($agent, $code, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('identify', $agent, $code, $account_id);
}

/**
 * we respond with: (ARG)
 *
 * in: Change AMemberOmitsTheAccountid TEST
 *     Change AMemberOmitsTheTypeOfChange TEST
 *     Change AMemberTypesABadTypeOfChange TEST
 *     IdentifyQR MemberAsksUsToIdentifyAQR TEST
 *     IdentifyQR MemberAsksUsToIdentifyTheMembersOwnQR TEST
 *     IdentifyQR MemberAsksUsToIdentifyAForeignQR TEST
 *     IdentifyQR MemberAsksUsToIdentifyAQRAndMemberCanShowBalances TEST
 *     IdentifyQR MemberAsksUsToIdentifyAQRForACompanyAgent TEST
 *     Startup MemberLogsInSuccessfullyToInitializeDevice TEST
 *     Startup MemberInitializesWithAnIllformedId TEST
 *     Startup DeviceOwnerIsNotAMember TEST
 *     Startup MemberTypesTheWrongPassword TEST
 *     Startup MemberRerunsTheApp TEST
 *     Startup DeviceRequestsABadOp TEST
 *     Startup DeviceGivesNoCode TEST
 *     Startup DeviceGivesABadCode TEST
 *     Transact AMemberAsksToPaySelf TEST
 *     Transact DeviceGivesNoAccountId TEST
 *     Transact DeviceGivesBadAccountId TEST
 *     Transact DeviceGivesNoAmount TEST
 *     Transact DeviceGivesBadAmount TEST
 *     Transact DeviceGivesNonpositiveAmount TEST
 *     Transact DeviceGivesTooBigAnAmount TEST
 *     Transact DeviceGivesNoType TEST
 *     Transact DeviceGivesBadType TEST
 *     Transact DeviceGivesNoPurposeForGoodsAndServices TEST
 *     Transact BuyerAgentLacksPermissionToBuy TEST
 *     Transact SellerAgentLacksPermissionToSell TEST
 *     UndoAttack DeviceGivesNoTransactionId TEST
 *     UndoAttack DeviceGivesBadTransactionId TEST
 *     UndoAttack DeviceGivesNonexistentTransactionId TEST
 *     UndoAttack DeviceGivesNoConfirmationStatus TEST
 *     UndoAttack DeviceGivesBadConfirmationStatus TEST
 *     UndoAttack MemberAsksToUndoSomeoneElsesTransaction TEST
 *     UndoAttack BuyerAgentLacksPermissionToReverseSale TEST
 *     UndoAttack SellerAgentLacksPermissionToReversePurchase TEST
 */
function weRespondWith($args) {
  global $testOnly;
  return t\findMessage('out', $args);
}

/**
 * member (ARG) asks device (ARG) for a picture of member (ARG)
 *
 * in: IdentifyQR DeviceAsksForAPictureToGoWithTheQR MAKE
 *     IdentifyQR DeviceAsksForAPictureButThereIsntOne MAKE
 */
function memberAsksDeviceForAPictureOfMember($agent, $code, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('photo', $agent, $code, $account_id);
}

/**
 * member (ARG) has picture (ARG)
 *
 * in: IdentifyQR DeviceAsksForAPictureToGoWithTheQR MAKE
 */
function memberHasPicture($id, $picture) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\makePicture($picture, r\acct($id));
}

/**
 * we respond to member (ARG) with picture (ARG)
 *
 * in: IdentifyQR DeviceAsksForAPictureToGoWithTheQR TEST
 *     IdentifyQR DeviceAsksForAPictureButThereIsntOne TEST
 */
function weRespondToMemberWithPicture($id, $picture) {
  global $testOnly;
  $message = bin2hex(substr(t\getPicture($picture), 0, 50));
  return t\findMessage('out', compact('message'));
}

/**
 * member (ARG) has no picture
 *
 * in: IdentifyQR DeviceAsksForAPictureButThereIsntOne MAKE
 */
function memberHasNoPicture($id) {
  global $testOnly;
  return (!r\acct($id)->picture);
}

/**
 * member (ARG) password is (ARG)
 *
 * in: Startup MemberLogsInSuccessfullyToInitializeDevice MAKE
 */
function memberPasswordIs($id, $pass) {
  global $testOnly; if ($testOnly) return FALSE;
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $pass = \user_hash_password(trim($pass));
  return r\acct($id)->update(compact('pass'));
}

/**
 * member initializes the device as member (ARG) with password (ARG)
 *
 * in: Startup MemberLogsInSuccessfullyToInitializeDevice MAKE
 *     Startup MemberInitializesWithAnIllformedId MAKE
 *     Startup DeviceOwnerIsNotAMember MAKE
 *     Startup MemberTypesTheWrongPassword MAKE
 */
function memberInitializesTheDeviceAsMemberWithPassword($agent, $password) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('first_time', $agent, '', '', compact('password'));
}

/**
 * the app starts up as code (ARG)
 *
 * in: Startup MemberRerunsTheApp MAKE
 *     Startup DeviceGivesNoCode MAKE
 *     Startup DeviceGivesABadCode MAKE
 */
function theAppStartsUpAsCode($code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('startup', NULL, trim($code));
}

/**
 * devices: (ARG)
 *
 * in: adhoc Setup MAKE
 *     Change Setup MAKE
 *     IdentifyQR Setup MAKE
 *     Insufficient Setup MAKE
 *     Startup Setup MAKE
 *     Transact Setup MAKE
 *     UndoAttack Setup MAKE
 *     UndoCompleted Setup MAKE
 *     UndoPending Setup MAKE
 *     Unilateral Setup MAKE
 */
function devices($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!r\Smart\makeDevice('Test Device', r\acct($one['id']), $one['code'])) return FALSE;
  return TRUE;
}

/**
 * (ARG) balances: (ARG)
 *
 * in: Insufficient Setup TEST
 *     Insufficient AMemberAsksToUndoACompletedPaymentWithInsufficientBalance TEST
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance TEST
 *     Insufficient AMemberAsksToUndoACompletedPaymentUnilaterallyWithInsufficientBalance TEST
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentUnilaterallyWithInsufficientBalance TEST
 *     Insufficient AMemberAsksToUndoACompletedChargeWithInsufficientBalance TEST
 *     Insufficient AMemberConfirmsRequestToUndoACompletedChargeWithInsufficientBalance TEST
 *     Transact Setup TEST
 *     Transact AMemberAsksToChargeAnotherMember TEST
 *     Transact AMemberAsksToPayAnotherMember TEST
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterally TEST
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance TEST
 *     Transact AMemberAsksToPayAnotherMemberWithInsufficientBalance TEST
 *     UndoAttack Setup TEST
 *     UndoCompleted Setup TEST
 *     UndoCompleted AMemberAsksToUndoACompletedPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCharge TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashCharge TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPaymentUnilaterally TEST
 *     UndoPending Setup TEST
 *     UndoPending AMemberAsksToRefuseToPayInvoice TEST
 *     UndoPending AMemberConfirmsRequestToRefuseToPayInvoice TEST
 *     UndoPending AMemberAsksToRefusePaymentOffer TEST
 *     UndoPending AMemberConfirmsRequestToRefusePaymentOffer TEST
 *     Unilateral Setup TEST
 */
function balances($real, $list) { // real is "asif" or "real"
  global $testOnly;
  foreach ($list as $one) if (!t\eq(t\uidCredit(t\uid($one['id']), $real)->balance, $one['balance'])) return FALSE;
  return TRUE;
}

/**
 * member (ARG) asks device (ARG) to do this: (ARG) (ARG) $(ARG) ((ARG): (ARG))
 *
 * in: Transact AMemberAsksToChargeAnotherMember MAKE
 *     Transact AMemberAsksToPayAnotherMember MAKE
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterally MAKE
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance MAKE
 *     Transact AMemberAsksToPayAnotherMemberWithInsufficientBalance MAKE
 *     Transact AMemberAsksToPaySelf MAKE
 *     Transact DeviceGivesNoAccountId MAKE
 *     Transact DeviceGivesBadAccountId MAKE
 *     Transact DeviceGivesNoAmount MAKE
 *     Transact DeviceGivesBadAmount MAKE
 *     Transact DeviceGivesNonpositiveAmount MAKE
 *     Transact DeviceGivesTooBigAnAmount MAKE
 *     Transact DeviceGivesNoType MAKE
 *     Transact DeviceGivesBadType MAKE
 *     Transact DeviceGivesNoPurposeForGoodsAndServices MAKE
 *     Transact BuyerAgentLacksPermissionToBuy MAKE
 *     Transact SellerAgentLacksPermissionToSell MAKE
 */
function memberAsksDeviceToDoThis($agent, $code, $type, $account_id, $amount, $goods, $purpose) {
  global $testOnly; if ($testOnly) return FALSE;
  $goods = ($goods == 'goods');
  return t\hitServer('transact', $agent, $code, $account_id, compact(u\ray('type amount goods purpose')));
}

/**
 * we respond success (ARG) tx_id (ARG) my_balance (ARG) other_balance (ARG) and message (ARG) with subs: (ARG)
 *
 * in: Insufficient AMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance TEST
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentUnilaterallyWithInsufficientBalance TEST
 *     Insufficient AMemberConfirmsRequestToUndoACompletedChargeWithInsufficientBalance TEST
 *     Transact AMemberAsksToChargeAnotherMember TEST
 *     Transact AMemberAsksToPayAnotherMember TEST
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterally TEST
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance TEST
 *     Transact AMemberAsksToPayAnotherMemberWithInsufficientBalance TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCharge TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashCharge TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPaymentUnilaterally TEST
 *     UndoPending AMemberConfirmsRequestToRefuseToPayInvoice TEST
 *     UndoPending AMemberConfirmsRequestToRefusePaymentOffer TEST
 *     UndoPending AMemberConfirmsRequestToCancelAnInvoice TEST
 *     UndoPending AMemberConfirmsRequestToCancelAnOffer TEST
 */
function weRespondSuccessTxidMybalanceOtherbalanceAndMessageWithSubs($success, $tx_id, $my_balance, $other_balance, $message, $subs) {
  global $testOnly;
  if ($tx_id === '') unset($tx_id);
  if ($other_balance === '') unset($other_balance);
  return t\findMessage('out', compact(u\ray('success message tx_id my_balance other_balance')), $message, '', $subs);
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Insufficient AMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance TEST
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentUnilaterallyWithInsufficientBalance TEST
 *     Transact AMemberAsksToChargeAnotherMember TEST
 *     Transact AMemberAsksToPayAnotherMember TEST
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterally TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCharge TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashPayment TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashCharge TEST
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPaymentUnilaterally TEST
 *     UndoPending AMemberConfirmsRequestToRefuseToPayInvoice TEST
 *     UndoPending AMemberConfirmsRequestToRefusePaymentOffer TEST
 *     UndoPending AMemberConfirmsRequestToCancelAnInvoice TEST
 *     UndoPending AMemberConfirmsRequestToCancelAnOffer TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {
  global $testOnly;
  return t\findEmail($key, $email, $subs);
}

/**
 * member (ARG) can charge unilaterally
 *
 * in: IdentifyQR MemberAsksUsToIdentifyAQRAndMemberCanShowBalances MAKE
 *     Insufficient AMemberAsksToUndoACompletedPaymentUnilaterallyWithInsufficientBalance MAKE
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentUnilaterallyWithInsufficientBalance MAKE
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterally MAKE
 *     Transact AMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance MAKE
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPaymentUnilaterally MAKE
 */
function memberCanChargeUnilaterally($id) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct($id)->setBit(BIT_CHARGE);
}

/**
 * the app requests op (ARG) as member (ARG) and code (ARG)
 *
 * in: Startup DeviceRequestsABadOp MAKE
 */
function theAppRequestsOpAsMemberAndCode($op, $agent, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer($op, $agent, $code);
}

/**
 * member (ARG) asks device (ARG) to undo transaction (ARG), with the request (ARG)
 *
 * in: Insufficient AMemberAsksToUndoACompletedPaymentWithInsufficientBalance MAKE
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance MAKE
 *     Insufficient AMemberAsksToUndoACompletedPaymentUnilaterallyWithInsufficientBalance MAKE
 *     Insufficient AMemberConfirmsRequestToUndoACompletedPaymentUnilaterallyWithInsufficientBalance MAKE
 *     Insufficient AMemberAsksToUndoACompletedChargeWithInsufficientBalance MAKE
 *     Insufficient AMemberConfirmsRequestToUndoACompletedChargeWithInsufficientBalance MAKE
 *     UndoAttack DeviceGivesNoTransactionId MAKE
 *     UndoAttack DeviceGivesBadTransactionId MAKE
 *     UndoAttack DeviceGivesNonexistentTransactionId MAKE
 *     UndoAttack DeviceGivesNoConfirmationStatus MAKE
 *     UndoAttack DeviceGivesBadConfirmationStatus MAKE
 *     UndoAttack MemberAsksToUndoSomeoneElsesTransaction MAKE
 *     UndoAttack BuyerAgentLacksPermissionToReverseSale MAKE
 *     UndoAttack SellerAgentLacksPermissionToReversePurchase MAKE
 *     UndoCompleted AMemberAsksToUndoACompletedPayment MAKE
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPayment MAKE
 *     UndoCompleted AMemberAsksToUndoACompletedCharge MAKE
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCharge MAKE
 *     UndoCompleted AMemberAsksToUndoACompletedCashPayment MAKE
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashPayment MAKE
 *     UndoCompleted AMemberAsksToUndoACompletedCashCharge MAKE
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedCashCharge MAKE
 *     UndoCompleted AMemberConfirmsRequestToUndoACompletedPaymentUnilaterally MAKE
 *     UndoPending AMemberAsksToRefuseToPayInvoice MAKE
 *     UndoPending AMemberConfirmsRequestToRefuseToPayInvoice MAKE
 *     UndoPending AMemberAsksToRefusePaymentOffer MAKE
 *     UndoPending AMemberConfirmsRequestToRefusePaymentOffer MAKE
 *     UndoPending AMemberAsksToCancelAnInvoice MAKE
 *     UndoPending AMemberConfirmsRequestToCancelAnInvoice MAKE
 *     UndoPending AMemberAsksToCancelAnOffer MAKE
 *     UndoPending AMemberConfirmsRequestToCancelAnOffer MAKE
 */
function memberAsksDeviceToUndoTransactionWithTheRequest($agent, $code, $tx_id, $confirmed) {
  global $testOnly; if ($testOnly) return FALSE;
  $confirmed = $confirmed == 'confirmed' ? 1 : ($confirmed == 'unconfirmed' ? 0 : $confirmed);
  return t\hitServer('undo', $agent, $code, '', compact('tx_id', 'confirmed'));
}

/**
 * we respond with success (ARG), message (ARG), and subs: (ARG)
 *
 * in: Insufficient AMemberAsksToUndoACompletedPaymentWithInsufficientBalance TEST
 *     Insufficient AMemberAsksToUndoACompletedPaymentUnilaterallyWithInsufficientBalance TEST
 *     Insufficient AMemberAsksToUndoACompletedChargeWithInsufficientBalance TEST
 *     UndoCompleted AMemberAsksToUndoACompletedPayment TEST
 *     UndoCompleted AMemberAsksToUndoACompletedCharge TEST
 *     UndoCompleted AMemberAsksToUndoACompletedCashPayment TEST
 *     UndoCompleted AMemberAsksToUndoACompletedCashCharge TEST
 *     UndoPending AMemberAsksToRefuseToPayInvoice TEST
 *     UndoPending AMemberAsksToRefusePaymentOffer TEST
 *     UndoPending AMemberAsksToCancelAnInvoice TEST
 *     UndoPending AMemberAsksToCancelAnOffer TEST
 */
function weRespondWithSuccessMessageAndSubs($success, $message, $subs) {
  global $testOnly;
  return t\findMessage('out', compact('success'), $message, '', $subs);
}

/**
 * device (ARG) account is (ARG) and agent is (ARG)
 *
 * in: adhoc AMemberChangesAccount MAKE
 *     Change AMemberChangesAgent MAKE
 *     Change AMemberChangesAccount MAKE
 *     Change AMemberChangesToDifferentAccountANDAgent MAKE
 *     Change AMemberChangesAgentBackToDefaultAccount MAKE
 *     Change AMemberChangesAccountBackToTheDefaultAccount MAKE
 *     Change AMemberChangesAgentToSameAsCurrentNondefaultAccount MAKE
 *     Change AMemberChangesAccountToSameAsCurrentNondefaultAgent MAKE
 *     Change AMemberOmitsTheAccountid MAKE
 *     Change AMemberOmitsTheTypeOfChange MAKE
 *     Change AMemberTypesABadTypeOfChange MAKE
 */
function deviceAccountIsAndAgentIs($code, $id, $agent) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testMyIDs; 
  return ($testMyIDs[$code] = r\acct($id, $agent)->qid()); // remember my_id for next steps
}

/**
 * a member asks device (ARG) to change (ARG) to (ARG)
 *
 * in: adhoc AMemberChangesAccount MAKE
 *     Change AMemberChangesAgent MAKE
 *     Change AMemberChangesAccount MAKE
 *     Change AMemberChangesToDifferentAccountANDAgent MAKE
 *     Change AMemberChangesAgentBackToDefaultAccount MAKE
 *     Change AMemberChangesAccountBackToTheDefaultAccount MAKE
 *     Change AMemberChangesAgentToSameAsCurrentNondefaultAccount MAKE
 *     Change AMemberChangesAccountToSameAsCurrentNondefaultAgent MAKE
 *     Change AMemberOmitsTheAccountid MAKE
 *     Change AMemberOmitsTheTypeOfChange MAKE
 *     Change AMemberTypesABadTypeOfChange MAKE
 */
function aMemberAsksDeviceToChangeTo($code, $what, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testMyIDs; 
  return t\hitServer('change', @$testMyIDs[$code], $code, $account_id, compact('what'));
}

/**
 * we respond success (ARG), my_id (ARG), account_name (ARG), show_buttons (ARG), and message (ARG), with subs: (ARG)
 *
 * in: adhoc AMemberChangesAccount TEST
 *     Change AMemberChangesAgent TEST
 *     Change AMemberChangesAccount TEST
 *     Change AMemberChangesToDifferentAccountANDAgent TEST
 *     Change AMemberChangesAgentBackToDefaultAccount TEST
 *     Change AMemberChangesAccountBackToTheDefaultAccount TEST
 *     Change AMemberChangesAgentToSameAsCurrentNondefaultAccount TEST
 *     Change AMemberChangesAccountToSameAsCurrentNondefaultAgent TEST
 */
function weRespondSuccessMyidAccountnameShowbuttonsAndMessageWithSubs($success, $my_id, $account_name, $show_buttons, $message, $subs) {
  global $testOnly;
  $account_name = str_replace('~', "\n", $account_name); // replace stand-in for EOL
  return t\findMessage('out', compact(u\ray('success message my_id account_name show_buttons')), $message, '', $subs);
}
