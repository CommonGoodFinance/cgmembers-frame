<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */

use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';
require_once __DIR__ . '/../rsmart/rsmart.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_SMART);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * members: (ARG)
 *
 * in: Exchange Setup MAKE
 *     Identify Setup MAKE
 *     Startup Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 */
function members($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeAccount($one)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: Exchange Setup MAKE
 *     Identify Setup MAKE
 *     Startup Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 */
function relations($relations) {return t\relations($relations);}

/**
 * transactions: (ARG)
 *
 * in: Exchange Setup MAKE
 *     Identify Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 *     Undo AnAgentAsksToUndoACharge MAKE
 *     Undo AnAgentAsksToUndoARefund MAKE
 *     Undo AnAgentAsksToUndoACashOutCharge MAKE
 *     Undo AnAgentAsksToUndoACashInPayment MAKE
 *     Undo AnAgentAsksToUndoAChargeWithInsufficientBalance MAKE
 *     Undo AnAgentAsksToUndoARefundWithInsufficientBalance MAKE
 *     Undo AnAgentAsksToUndoAChargeWithoutPermission MAKE
 *     Undo AnAgentAsksToUndoARefundWithoutPermission MAKE
 *     Undo AnAgentAsksToUndoSomeoneElsesTransaction MAKE
 */
function transactions($list) {return t\transactions($list);}

/**
 * member (ARG) has initialized a device whose code is (ARG)
 *
 * in: 
 */
function memberHasInitializedADeviceWhoseCodeIs($id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\Smart\makeDevice(t('Test Device'), r\acct($id), $code);
}

/**
 * agent (ARG) asks device (ARG) to identify (ARG)
 *
 * in: Identify ACashierSignsIn MAKE
 *     Identify DeviceHasNoIdentifierYet MAKE
 *     Identify DeviceShouldHaveAnIdentifier MAKE
 *     Identify ACashierSignsInSigningAnotherCashierOut MAKE
 *     Identify AManagerSignsIn MAKE
 *     Identify ACashierScansACustomerCard MAKE
 *     Identify AnUnauthorizedCashierScansIn MAKE
 *     Identify ACashierScansACustomerCardBeforeSigningIn MAKE
 *     Identify ACashierAsksUsToIdentifyTheCashiersOwnCard MAKE
 *     Identify ACashierScansACustomerCardWhoseBalanceIsSecret MAKE
 *     Identify ACashierScansACompanyCustomerCard MAKE
 *     Identify ANonyetactiveMemberCardIsScanned MAKE
 */
function agentAsksDeviceToIdentify($agent, $device, $qr) {
  global $testOnly; if ($testOnly) return FALSE;
  list ($member, $code) = t\parseQr($qr);
  $agent = $agent == '' ? '' : t\fullQid($agent);
  return t\hitServer('identify', compact(u\ray('member code')), $agent, $device);
}

/**
 * we respond with: (ARG)
 *
 * in: Identify ACashierSignsIn TEST
 *     Identify DeviceHasNoIdentifierYet TEST
 *     Identify ACashierSignsInSigningAnotherCashierOut TEST
 *     Identify AManagerSignsIn TEST
 *     Identify ACashierScansACustomerCard TEST
 *     Identify ACashierScansACustomerCardWhoseBalanceIsSecret TEST
 *     Identify ACashierScansACompanyCustomerCard TEST
 */
function weRespondWith($args) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  t\output('expecting: ' . print_r($args[0], 1));
  foreach ($args[0] as $key => $value) {
    if ($key == 'descriptions') $value = u\ray($value);
    if ($key == 'can') {
      $flags = 0;
      if ($value) foreach (u\ray($value) as $one) $flags |= u\bit(u\consta('co', $one));
      $value = $flags;
    }
    if ($key == 'device' and $value == '?' and $rposResult[$key]) continue; // any value will do for new dev
    
    if ($value != $rposResult[$key]) {
      $value = print_r($value, 1);
      t\output("Expected $key=$value, got:" . print_r($rposResult[$key], 1));
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * agent (ARG) asks device (ARG) for a picture of member (ARG)
 *
 * in: Identify DeviceAsksForAPictureToGoWithTheQR MAKE
 *     Identify DeviceAsksForAPictureButThereIsntOne MAKE
 */
function agentAsksDeviceForAPictureOfMember($agent, $device, $member) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('photo', compact(u\ray('member')), $agent, $device);
}

/**
 * member (ARG) has picture (ARG)
 *
 * in: Identify DeviceAsksForAPictureToGoWithTheQR MAKE
 */
function memberHasPicture($id, $picture) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\makePicture($picture, r\acct(t\uid($id)));
}

/**
 * we respond with picture (ARG)
 *
 * in: Identify DeviceAsksForAPictureToGoWithTheQR TEST
 *     Identify DeviceAsksForAPictureButThereIsntOne TEST
 */
function weRespondWithPicture($picture) {
  global $testOnly;
  global $rposResult;
  return ($rposResult == $picture);
}

/**
 * member (ARG) has no picture
 *
 * in: Identify DeviceAsksForAPictureButThereIsntOne MAKE
 */
function memberHasNoPicture($id) {
  global $testOnly; if ($testOnly) return FALSE;
  return !r\acct(t\uid($id))->hasAux('picture');
}

/**
 * devices: (ARG)
 *
 * in: Exchange Setup MAKE
 *     Identify Setup MAKE
 *     Startup Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 */
function devices($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!r\makeDevice(t\uid($one['id']), 'POS testdevice #', $one['code'])) return FALSE;
  return TRUE;
}

/**
 * balances: (ARG)
 *
 * in: Exchange Setup TEST
 *     Exchange ACashierAsksToChargeSomeoneForCash TEST
 *     Exchange ACashierAsksToRefundSomeone TEST
 *     Transact Setup TEST
 *     Transact ACashierAsksToChargeSomeone TEST
 *     Transact ACashierAsksToRefundSomeone TEST
 */
function balances($list) {return t\balances($list);}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG)
 *
 * in: Exchange ACashierAsksToChargeSomeoneForCash MAKE
 *     Exchange ACashierAsksToRefundSomeone MAKE
 *     Transact ACashierAsksToChargeSomeone MAKE
 *     Transact ACashierAsksToRefundSomeone MAKE
 *     Transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance MAKE
 *     Transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance MAKE
 *     Transact ACashierAsksToPaySelf MAKE
 *     Transact DeviceGivesNoMemberId MAKE
 *     Transact DeviceGivesBadAccountId MAKE
 *     Transact DeviceGivesNoAmount MAKE
 *     Transact DeviceGivesBadAmount MAKE
 *     Transact DeviceGivesTooBigAnAmount MAKE
 *     Transact DeviceGivesNoPurposeForGoodsAndServices MAKE
 *     Transact SellerAgentLacksPermissionToBuy MAKE
 *     Transact SellerAgentLacksPermissionToScanAndSell MAKE
 *     Transact BuyerAgentLacksPermissionToBuy MAKE
 */
function agentAsksDeviceToChargeFor($agent, $device, $member, $amount, $goods, $description) {
  global $testOnly; if ($testOnly) return FALSE;
  $goods = $goods == 'goods' ? "1" : "0";
  return t\hitServer('charge', compact(u\ray('member amount goods description')), $agent, $device);
}

/**
 * agent (ARG) asks device (ARG) to undo transaction (ARG)
 *
 * in: Undo AnAgentAsksToUndoACharge MAKE
 *     Undo AnAgentAsksToUndoARefund MAKE
 *     Undo AnAgentAsksToUndoACashOutCharge MAKE
 *     Undo AnAgentAsksToUndoACashInPayment MAKE
 *     Undo AnAgentAsksToUndoAChargeWithInsufficientBalance MAKE
 *     Undo AnAgentAsksToUndoARefundWithInsufficientBalance MAKE
 *     Undo AnAgentAsksToUndoAChargeWithoutPermission MAKE
 *     Undo AnAgentAsksToUndoARefundWithoutPermission MAKE
 *     Undo AnAgentAsksToUndoSomeoneElsesTransaction MAKE
 *     Undo AnAgentAsksToUndoANonexistentTransaction MAKE
 */
function agentAsksDeviceToUndoTransaction($agent, $device, $tx) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('undo', compact('tx'), $agent, $device);
}

/**
 * we respond with success (ARG), message (ARG), and subs: (ARG)
 *
 * in: 
 */
function weRespondWithSuccessMessageAndSubs($success, $message, $subs) {
  global $testOnly;
  return t\findMessage('out', compact('success'), $message, '', $subs);
}

/**
 * device (ARG) account is (ARG) and agent is (ARG)
 *
 * in: 
 */
function deviceAccountIsAndAgentIs($code, $id, $agent) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testMyIDs; 
  return ($testMyIDs[$code] = r\acct($id, $agent)->qid()); // remember my_id for next steps
}

/**
 * a member asks device (ARG) to change (ARG) to (ARG)
 *
 * in: 
 */
function weRespondSuccessMyidAccountnameShowbuttonsAndMessageWithSubs($success, $my_id, $account_name, $show_buttons, $message, $subs) {
  global $testOnly;
  $account_name = str_replace('~', "\n", $account_name); // replace stand-in for EOL
  return t\findMessage('out', compact(u\ray('success message my_id account_name show_buttons')), $message, '', $subs);
}

/**
 * we respond ok with tx (ARG) and message (ARG) with subs: (ARG)
 *
 * in: Exchange ACashierAsksToChargeSomeoneForCash TEST
 *     Exchange ACashierAsksToRefundSomeone TEST
 *     Transact ACashierAsksToChargeSomeone TEST
 *     Transact ACashierAsksToRefundSomeone TEST
 */
function weRespondOkWithTxAndMessageWithSubs($tx, $msg, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  extract($rposResult, EXTR_PREFIX_ALL, 's');
  list ($ok, $message) = array('1', u\tt($msg, $subs[0]));
  t\output('Expecting: ' . print_r(compact(u\ray('ok tx message')), 1), 'expect');
  return ($s_ok == '1' and @$s_tx == $tx and $s_message == $message);
}

/**
 * we respond ok (ARG) with subs: (ARG)
 *
 * in: Undo AnAgentAsksToUndoACharge TEST
 *     Undo AnAgentAsksToUndoARefund TEST
 *     Undo AnAgentAsksToUndoACashOutCharge TEST
 *     Undo AnAgentAsksToUndoACashInPayment TEST
 */
function weRespondOkWithSubs($msg, $subs) {return weRespondOkWithTxAndMessageWithSubs('', $msg, $subs);}

/**
 * with balance (ARG)
 *
 * in: Exchange ACashierAsksToChargeSomeoneForCash TEST
 *     Exchange ACashierAsksToRefundSomeone TEST
 *     Identify ACashierScansACustomerCard TEST
 *     Identify ACashierScansACustomerCardWhoseBalanceIsSecret TEST
 *     Identify ACashierScansACompanyCustomerCard TEST
 *     Transact ACashierAsksToChargeSomeone TEST
 *     Transact ACashierAsksToRefundSomeone TEST
 *     Undo AnAgentAsksToUndoACharge TEST
 *     Undo AnAgentAsksToUndoARefund TEST
 *     Undo AnAgentAsksToUndoACashOutCharge TEST
 *     Undo AnAgentAsksToUndoACashInPayment TEST
 */
function withBalance($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  if (!$got = @$rposResult['balance']) return !$subs; else $subs = $subs[0];
  $balance = u\tt('customer balance', $subs);
  if (@$subs['did']) {
    if (@$subs['forCash']) u\prefix(' ', $subs['forCash']);
    $balance .= u\tt('just did', $subs);
  }
  t\output('Expecting ' . print_r(compact('balance'), 1), 'expect');
  return ($got == $balance);
}

/**
 * with undo (ARG)
 *
 * in: Exchange ACashierAsksToChargeSomeoneForCash TEST
 *     Exchange ACashierAsksToRefundSomeone TEST
 *     Transact ACashierAsksToChargeSomeone TEST
 *     Transact ACashierAsksToRefundSomeone TEST
 *     Undo AnAgentAsksToUndoACharge TEST
 *     Undo AnAgentAsksToUndoARefund TEST
 *     Undo AnAgentAsksToUndoACashOutCharge TEST
 *     Undo AnAgentAsksToUndoACashInPayment TEST
 */
function withUndo($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  if (!$got = @$rposResult['undo']) return !$subs; else $subs = $subs[0];
  $subs['created'] = t\lastMinuteSubs($subs['created']);
  $undo = u\tt('confirm undo', $subs);
  t\output('Expecting ' . print_r(compact('undo'), 1), 'expect');
  return ($got == $undo);
}

/**
 * we return error (ARG) with subs: (ARG)
 *
 * in: Identify ANonyetactiveMemberCardIsScanned TEST
 *     Transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance TEST
 *     Transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance TEST
 *     Transact BuyerAgentLacksPermissionToBuy TEST
 *     Undo AnAgentAsksToUndoAChargeWithInsufficientBalance TEST
 *     Undo AnAgentAsksToUndoARefundWithInsufficientBalance TEST
 */
function weReturnErrorWithSubs($msg, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  return ($rposResult['ok'] == '0' and $rposResult['message'] == strip_tags(u\tt($msg, @$subs[0])));
}

/**
 * we return error (ARG)
 *
 * in: Identify DeviceShouldHaveAnIdentifier TEST
 *     Identify AnUnauthorizedCashierScansIn TEST
 *     Identify ACashierScansACustomerCardBeforeSigningIn TEST
 *     Identify ACashierAsksUsToIdentifyTheCashiersOwnCard TEST
 *     Startup DeviceRequestsABadOp TEST
 *     Startup DeviceShouldHaveAnIdentifier TEST
 *     Startup DeviceGivesABadCode TEST
 *     Startup AnAgentForAnInactiveCompanyTriesAnOp TEST
 *     Transact ACashierAsksToPaySelf TEST
 *     Transact DeviceGivesNoMemberId TEST
 *     Transact DeviceGivesBadAccountId TEST
 *     Transact DeviceGivesNoAmount TEST
 *     Transact DeviceGivesBadAmount TEST
 *     Transact DeviceGivesTooBigAnAmount TEST
 *     Transact DeviceGivesNoPurposeForGoodsAndServices TEST
 *     Transact SellerAgentLacksPermissionToBuy TEST
 *     Transact SellerAgentLacksPermissionToScanAndSell TEST
 *     Undo AnAgentAsksToUndoAChargeWithoutPermission TEST
 *     Undo AnAgentAsksToUndoARefundWithoutPermission TEST
 *     Undo AnAgentAsksToUndoSomeoneElsesTransaction TEST
 *     Undo AnAgentAsksToUndoANonexistentTransaction TEST
 */
function weReturnError($msg) {return weReturnErrorWithSubs($msg, array());}

/**
 * selling: (ARG)
 *
 * in: Exchange Setup MAKE
 *     Identify Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 */
function selling($selling) {return t\selling($selling);}

/**
 * company flags: (ARG)
 *
 * in: Exchange Setup MAKE
 *     Identify Setup MAKE
 *     Transact Setup MAKE
 *     Undo Setup MAKE
 */
function companyFlags($flags) {return t\companyFlags($flags);}

/**
 * agent (ARG) asks device (ARG) for op (ARG) with: (ARG)
 *
 * in: Startup DeviceRequestsABadOp MAKE
 *     Startup DeviceShouldHaveAnIdentifier MAKE
 *     Startup DeviceGivesABadCode MAKE
 *     Startup AnAgentForAnInactiveCompanyTriesAnOp MAKE
 */
function agentAsksDeviceForOpWith($agent, $device, $op, $extra) {
  global $testOnly; if ($testOnly) return FALSE;
  $extra = @$extra[0] ?: array();
  return t\hitServer($op, $extra, $agent, $device);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Exchange ACashierAsksToChargeSomeoneForCash TEST
 *     Exchange ACashierAsksToRefundSomeone TEST
 *     Transact ACashierAsksToChargeSomeone TEST
 *     Transact ACashierAsksToRefundSomeone TEST
 *     Undo AnAgentAsksToUndoACharge TEST
 *     Undo AnAgentAsksToUndoARefund TEST
 *     Undo AnAgentAsksToUndoACashOutCharge TEST
 *     Undo AnAgentAsksToUndoACashInPayment TEST
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * member (ARG) asks device (ARG) to undo transaction (ARG), with the request (ARG)
 *
 * in: 
 */
function memberAsksDeviceToUndoTransactionWithTheRequest($arg1, $arg2, $arg3, $arg4) {
  global $testOnly;
  todo;
}
