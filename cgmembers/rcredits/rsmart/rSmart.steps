<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */

use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\API as api;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';
require_once __DIR__ . '/../rsmart/rsmart.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  global $picturePath; 
  list ($picturePath) = explode('sites', __DIR__);
  $picturePath .= 'sites/default/files/pictures';

  global $sms_devel; $sms_devel = TRUE;
  r\db_q('DELETE FROM users WHERE uid>1000');
  r\db_q('TRUNCATE r_sms');
  r\db_q('TRUNCATE r_asif');
  r\db_q('TRUNCATE r_txs');
  r\db_q('DELETE FROM r_smarts WHERE uid>1000');
  r\db_q('DELETE FROM file_managed WHERE uid>1000');
  r\db_q('TRUNCATE r_relations');

  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}

  r\acct::_clear(); // empty the acct cache
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * members: (ARG)
 *
 * in: IdentifyQR - featureSetup MAKE
 *     Startup - featureSetup MAKE
 *     UndoAttack - featureSetup MAKE
 *     UndoCompleted - featureSetup MAKE
 *     UndoPending - featureSetup MAKE
 */
function members($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeAccount($one)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: IdentifyQR - featureSetup MAKE
 *     Startup - featureSetup MAKE
 *     UndoAttack - featureSetup MAKE
 *     UndoCompleted - featureSetup MAKE
 *     UndoPending - featureSetup MAKE
 */
function relations($relations) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($relations as $one) if (!t\makeRelation($one)) return FALSE;
  return TRUE;
}

/**
 * transactions: (ARG)
 *
 * in: IdentifyQR - featureSetup MAKE
 *     UndoAttack - featureSetup MAKE
 *     UndoCompleted - featureSetup MAKE
 *     UndoPending - featureSetup MAKE
 */
function transactions($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeTransaction($one)) return FALSE;
  return TRUE;
}

/**
 * member (ARG) has initialized a device whose code is (ARG)
 *
 * in: IdentifyQR - testMemberAsksUsToIdentifyAQR MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyTheMembersOwnQR MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyAForeignQR MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyAQRAndMemberCanShowBalances MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyAQRForACompanyAgent MAKE
 *     IdentifyQR - testDeviceAsksForAPictureToGoWithTheQR MAKE
 *     IdentifyQR - testDeviceAsksForAPictureButThereIsntOne MAKE
 *     Startup - testMemberRerunsTheApp MAKE
 */
function memberHasInitializedADeviceWhoseCodeIs($id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\Smart\makeDevice(t('Test Device'), r\acct($id), $code);
}

/**
 * member (ARG) asks device (ARG) to identify QR (ARG)
 *
 * in: IdentifyQR - testMemberAsksUsToIdentifyAQR MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyTheMembersOwnQR MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyAForeignQR MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyAQRAndMemberCanShowBalances MAKE
 *     IdentifyQR - testMemberAsksUsToIdentifyAQRForACompanyAgent MAKE
 */
function memberAsksDeviceToIdentifyQR($my_id, $code, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('identify', $my_id, $code, $account_id);
}

/**
 * we respond with: (ARG)
 *
 * in: IdentifyQR - testMemberAsksUsToIdentifyAQR TEST
 *     IdentifyQR - testMemberAsksUsToIdentifyTheMembersOwnQR TEST
 *     IdentifyQR - testMemberAsksUsToIdentifyAForeignQR TEST
 *     IdentifyQR - testMemberAsksUsToIdentifyAQRAndMemberCanShowBalances TEST
 *     IdentifyQR - testMemberAsksUsToIdentifyAQRForACompanyAgent TEST
 *     Startup - testMemberLogsInSuccessfullyToInitializeDevice TEST
 *     Startup - testMemberInitializesWithAnIllformedId TEST
 *     Startup - testDeviceOwnerIsNotAMember TEST
 *     Startup - testMemberTypesTheWrongPassword TEST
 *     Startup - testMemberRerunsTheApp TEST
 *     Startup - testDeviceRequestsABadOp TEST
 *     Startup - testDeviceGivesNoMemberId TEST
 *     Startup - testDeviceGivesBadMemberId TEST
 *     Startup - testDeviceGivesNoCode TEST
 *     Startup - testDeviceGivesABadCode TEST
 *     Startup - testAgentDoesNotHavePermission TEST
 *     Transact - testAMemberAsksToPaySelf TEST
 *     Transact - testDeviceGivesNoAccountId TEST
 *     Transact - testDeviceGivesBadAccountId TEST
 *     Transact - testDeviceGivesNoAmount TEST
 *     Transact - testDeviceGivesBadAmount TEST
 *     Transact - testDeviceGivesNonpositiveAmount TEST
 *     Transact - testDeviceGivesTooBigAnAmount TEST
 *     Transact - testDeviceGivesNoType TEST
 *     Transact - testDeviceGivesBadType TEST
 *     Transact - testDeviceGivesNoPurposeForGoodsAndServices TEST
 *     Transact - testBuyerAgentLacksPermissionToBuy TEST
 *     Transact - testSellerAgentLacksPermissionToSell TEST
 *     UndoAttack - testDeviceGivesNoTransactionId TEST
 *     UndoAttack - testDeviceGivesBadTransactionId TEST
 *     UndoAttack - testDeviceGivesNonexistentTransactionId TEST
 *     UndoAttack - testDeviceGivesNoConfirmationStatus TEST
 *     UndoAttack - testDeviceGivesBadConfirmationStatus TEST
 *     UndoAttack - testMemberAsksToUndoSomeoneElsesTransaction TEST
 *     UndoAttack - testBuyerAgentLacksPermissionToReverseSale TEST
 *     UndoAttack - testSellerAgentLacksPermissionToReversePurchase TEST
 */
function weRespondWith($args) {
  global $testOnly;
  return t\findMessage('out', $args);
}

/**
 * member (ARG) can show balances
 *
 * in: IdentifyQR - testMemberAsksUsToIdentifyAQRAndMemberCanShowBalances MAKE
 */
function memberCanShowBalances($id) {
  global $testOnly; if ($testOnly) return FALSE;
  if ($testOnly) return FALSE;
  r\acct($id)->setBit(BIT_CHARGE);
  return TRUE;
}

/**
 * member (ARG) asks device (ARG) for a picture of member (ARG)
 *
 * in: IdentifyQR - testDeviceAsksForAPictureToGoWithTheQR MAKE
 *     IdentifyQR - testDeviceAsksForAPictureButThereIsntOne MAKE
 */
function memberAsksDeviceForAPictureOfMember($my_id, $code, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('photo', $my_id, $code, $account_id);
}

/**
 * member (ARG) has picture (ARG)
 *
 * in: IdentifyQR - testDeviceAsksForAPictureToGoWithTheQR MAKE
 */
function memberHasPicture($id, $picture) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\makePicture($picture, r\acct($id));
}

/**
 * we respond to member (ARG) with picture (ARG)
 *
 * in: IdentifyQR - testDeviceAsksForAPictureToGoWithTheQR TEST
 *     IdentifyQR - testDeviceAsksForAPictureButThereIsntOne TEST
 */
function weRespondToMemberWithPicture($id, $picture) {
  global $testOnly;
  $message = bin2hex(substr(t\getPicture($picture), 0, 50));
  return t\findMessage('out', compact('message'));
}

/**
 * member (ARG) has no picture
 *
 * in: IdentifyQR - testDeviceAsksForAPictureButThereIsntOne MAKE
 */
function memberHasNoPicture($id) {
  global $testOnly;
  return (!r\acct($id)->picture);
}

/**
 * member (ARG) password is (ARG)
 *
 * in: Startup - testMemberLogsInSuccessfullyToInitializeDevice MAKE
 */
function memberPasswordIs($id, $pass) {
  global $testOnly; if ($testOnly) return FALSE;
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $pass = \user_hash_password(trim($pass));
  return r\acct($id)->update(compact('pass'));
}

/**
 * member initializes the device as member (ARG) with password (ARG)
 *
 * in: Startup - testMemberLogsInSuccessfullyToInitializeDevice MAKE
 *     Startup - testMemberInitializesWithAnIllformedId MAKE
 *     Startup - testDeviceOwnerIsNotAMember MAKE
 *     Startup - testMemberTypesTheWrongPassword MAKE
 */
function memberInitializesTheDeviceAsMemberWithPassword($my_id, $password) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('first_time', $my_id, '', '', compact('password'));
}

/**
 * the app starts up as member (ARG) and code (ARG)
 *
 * in: Startup - testMemberRerunsTheApp MAKE
 *     Startup - testDeviceGivesNoMemberId MAKE
 *     Startup - testDeviceGivesBadMemberId MAKE
 *     Startup - testDeviceGivesNoCode MAKE
 *     Startup - testDeviceGivesABadCode MAKE
 *     Startup - testAgentDoesNotHavePermission MAKE
 */
function theAppStartsUpAsMemberAndCode($my_id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('startup', $my_id, $code);
}

/**
 * devices: (ARG)
 *
 * in: Startup - featureSetup MAKE
 *     UndoAttack - featureSetup MAKE
 *     UndoCompleted - featureSetup MAKE
 *     UndoPending - featureSetup MAKE
 */
function devices($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!r\Smart\makeDevice('Test Device', r\acct($one['id']), $one['code'])) return FALSE;
  return TRUE;
}

/**
 * balances: (ARG)
 *
 * in: Transact - testAMemberAsksToChargeAnotherMember MAKE
 *     Transact - testAMemberAsksToPayAnotherMember MAKE
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterally MAKE
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance MAKE
 *     Transact - testAMemberAsksToPayAnotherMemberWithInsufficientBalance MAKE
 *     UndoCompleted - featureSetup TEST
 *     UndoCompleted - testAMemberAsksToUndoACompletedPayment MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPayment MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentUnilaterally MAKE
 *     UndoCompleted - testAMemberAsksToUndoACompletedPaymentWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberAsksToUndoACompletedChargeUnilaterallyWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedChargeUnilaterallyWithInsufficientBalance MAKE
 *     UndoPending - featureSetup TEST
 */
function balances($list) {
  global $testOnly;
  foreach ($list as $one) if (!t\eq(t\uidCredit(t\uid($one['id']))->balance, $one['balance'])) return FALSE;
  return TRUE;
}

/**
 * member (ARG) asks device (ARG) to do this: (ARG) (ARG) $(ARG) ((ARG): (ARG))
 *
 * in: Transact - testAMemberAsksToChargeAnotherMember MAKE
 *     Transact - testAMemberAsksToPayAnotherMember MAKE
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterally MAKE
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance MAKE
 *     Transact - testAMemberAsksToPayAnotherMemberWithInsufficientBalance MAKE
 *     Transact - testAMemberAsksToPaySelf MAKE
 *     Transact - testDeviceGivesNoAccountId MAKE
 *     Transact - testDeviceGivesBadAccountId MAKE
 *     Transact - testDeviceGivesNoAmount MAKE
 *     Transact - testDeviceGivesBadAmount MAKE
 *     Transact - testDeviceGivesNonpositiveAmount MAKE
 *     Transact - testDeviceGivesTooBigAnAmount MAKE
 *     Transact - testDeviceGivesNoType MAKE
 *     Transact - testDeviceGivesBadType MAKE
 *     Transact - testDeviceGivesNoPurposeForGoodsAndServices MAKE
 *     Transact - testBuyerAgentLacksPermissionToBuy MAKE
 *     Transact - testSellerAgentLacksPermissionToSell MAKE
 */
function memberAsksDeviceToDoThis($my_id, $code, $type, $account_id, $amount, $goods, $purpose) {
  global $testOnly; if ($testOnly) return FALSE;
  $goods = ($goods == 'goods');
  return t\hitServer('transact', $my_id, $code, $account_id, compact(u\ray('type amount goods purpose')));
}

/**
 * we respond success (ARG) tx_id (ARG) my_balance (ARG) other_balance (ARG) and message (ARG) with subs: (ARG)
 *
 * in: Transact - testAMemberAsksToChargeAnotherMember TEST
 *     Transact - testAMemberAsksToPayAnotherMember TEST
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterally TEST
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance TEST
 *     Transact - testAMemberAsksToPayAnotherMemberWithInsufficientBalance TEST
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPayment TEST
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentUnilaterally TEST
 *     UndoCompleted - testAMemberAsksToUndoACompletedPaymentWithInsufficientBalance TEST
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance TEST
 *     UndoCompleted - testAMemberAsksToUndoACompletedChargeUnilaterallyWithInsufficientBalance TEST
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedChargeUnilaterallyWithInsufficientBalance TEST
 */
function weRespondSuccessTxidMybalanceOtherbalanceAndMessageWithSubs($success, $tx_id, $my_balance, $other_balance, $message, $subs) {
  global $testOnly;
//  $tx_id = r\qxid(TEST_REAL ? $tx_id : -$tx_id);
  if (!TEST_REAL) $tx_id = str_replace('.', ':', $tx_id);
  if ($other_balance === '') unset($other_balance);
  return t\findMessage('out', compact(u\ray('success message tx_id my_balance other_balance')), $message, '', $subs);
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Transact - testAMemberAsksToChargeAnotherMember MAKE
 *     Transact - testAMemberAsksToPayAnotherMember MAKE
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterally MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPayment MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentUnilaterally MAKE
 */
function weEmailToMemberWithSubs($key, $email, $subs) {
  global $testOnly;
  return t\findEmail($key, $email, $subs);
}

/**
 * member (ARG) can charge unilaterally
 *
 * in: Transact - testAMemberAsksToChargeAnotherMemberUnilaterally MAKE
 *     Transact - testAMemberAsksToChargeAnotherMemberUnilaterallyWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentUnilaterally MAKE
 *     UndoCompleted - testAMemberAsksToUndoACompletedChargeUnilaterallyWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedChargeUnilaterallyWithInsufficientBalance MAKE
 */
function memberCanChargeUnilaterally($id) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct($id)->setBit(BIT_CHARGE);
}

/**
 * the app requests op (ARG) as member (ARG) and code (ARG)
 *
 * in: Startup - testDeviceRequestsABadOp MAKE
 */
function theAppRequestsOpAsMemberAndCode($op, $my_id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer($op, $my_id, $code);
}

/**
 * member (ARG) asks device (ARG) to undo transaction (ARG), with the request (ARG)
 *
 * in: UndoAttack - testDeviceGivesNoTransactionId MAKE
 *     UndoAttack - testDeviceGivesBadTransactionId MAKE
 *     UndoAttack - testDeviceGivesNonexistentTransactionId MAKE
 *     UndoAttack - testDeviceGivesNoConfirmationStatus MAKE
 *     UndoAttack - testDeviceGivesBadConfirmationStatus MAKE
 *     UndoAttack - testMemberAsksToUndoSomeoneElsesTransaction MAKE
 *     UndoAttack - testBuyerAgentLacksPermissionToReverseSale MAKE
 *     UndoAttack - testSellerAgentLacksPermissionToReversePurchase MAKE
 *     UndoCompleted - testAMemberAsksToUndoACompletedPayment MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPayment MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentUnilaterally MAKE
 *     UndoCompleted - testAMemberAsksToUndoACompletedPaymentWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedPaymentWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberAsksToUndoACompletedChargeUnilaterallyWithInsufficientBalance MAKE
 *     UndoCompleted - testAMemberConfirmsRequestToUndoACompletedChargeUnilaterallyWithInsufficientBalance MAKE
 *     UndoPending - testAMemberAsksToUndoACompletedPayment MAKE
 *     UndoPending - testAMemberConfirmsRequestToUndoACompletedPayment MAKE
 */
function memberAsksDeviceToUndoTransactionWithTheRequest($my_id, $code, $tx_id, $confirmed) {
  global $testOnly; if ($testOnly) return FALSE;
  if (!TEST_REAL) $tx_id = str_replace('.', ':', $tx_id);
  $confirmed = $confirmed == 'confirmed' ? 1 : 0;
  return t\hitServer('undo', $my_id, $code, '', compact('tx_id', 'confirmed'));
}

/**
 * we respond with success (ARG), message (ARG), and subs: (ARG)
 *
 * in: UndoCompleted - testAMemberAsksToUndoACompletedPayment TEST
 *     UndoPending - testAMemberAsksToUndoACompletedPayment TEST
 *     UndoPending - testAMemberConfirmsRequestToUndoACompletedPayment TEST
 */
function weRespondWithSuccessMessageAndSubs($success, $message, $subs) {
  global $testOnly;
  return t\findMessage('out', compact('success'), $message, '', $subs);
}
