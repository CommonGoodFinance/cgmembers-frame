<?php
/**
 * @file
 * rWeb Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */

use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';
require_once __DIR__ . '/../rsmart/rsmart.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_SMART);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs['%replace_this'] = 'with this';
}

/**
 * members: (ARG)
 *
 * in: adhoc Setup MAKE
 *     Change Setup MAKE
 *     IdentifyCustomer Setup MAKE
 */
function members($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!t\makeAccount($one)) return FALSE;
  return TRUE;
}

/**
 * relations: (ARG)
 *
 * in: adhoc Setup MAKE
 *     Change Setup MAKE
 *     IdentifyCustomer Setup MAKE
 */
function relations($relations) {return t\relations($relations);}

/**
 * transactions: (ARG)
 *
 * in: IdentifyCustomer Setup MAKE
 */
function transactions($list) {return t\transactions($list);}

/**
 * member (ARG) has initialized a device whose code is (ARG)
 *
 * in: 
 */
function memberHasInitializedADeviceWhoseCodeIs($id, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\Smart\makeDevice(t('Test Device'), r\acct($id), $code);
}

/**
 * member (ARG) asks device (ARG) to identify QR (ARG)
 *
 * in: 
 */
function memberAsksDeviceToIdentifyQR($agent, $code, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('identify', $agent, $code, $account_id);
}

/**
 * we respond with: (ARG)
 *
 * in: Change AMemberOmitsTheAccountid TEST
 *     Change AMemberOmitsTheTypeOfChange TEST
 *     Change AMemberTypesABadTypeOfChange TEST
 *     IdentifyCustomer ACashierScansACustomerCard TEST
 */
function weRespondWith($args) {
  global $testOnly;
  return t\findMessage('out', $args);
}

/**
 * member (ARG) asks device (ARG) for a picture of member (ARG)
 *
 * in: 
 */
function memberAsksDeviceForAPictureOfMember($agent, $code, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('photo', $agent, $code, $account_id);
}

/**
 * member (ARG) has picture (ARG)
 *
 * in: 
 */
function memberHasPicture($id, $picture) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\makePicture($picture, r\acct($id));
}

/**
 * we respond to member (ARG) with picture (ARG)
 *
 * in: 
 */
function weRespondToMemberWithPicture($id, $picture) {
  global $testOnly;
  $message = bin2hex(substr(r\acct(t\uid($id))->auxFilename('picture'), 0, 50));
  return t\findMessage('out', compact('message'));
}

/**
 * member (ARG) has no picture
 *
 * in: 
 */
function memberHasNoPicture($id) {
  global $testOnly;
  return (!r\acct($id)->picture);
}

/**
 * member (ARG) password is (ARG)
 *
 * in: 
 */
function memberPasswordIs($id, $pass) {
  global $testOnly; if ($testOnly) return FALSE;
  require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
  $pass = \user_hash_password(trim($pass));
  return r\acct($id)->update(compact('pass'));
}

/**
 * member initializes the device as member (ARG) with password (ARG)
 *
 * in: 
 */
function memberInitializesTheDeviceAsMemberWithPassword($agent, $password) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('first_time', $agent, '', '', compact('password'));
}

/**
 * the app starts up as code (ARG)
 *
 * in: 
 */
function theAppStartsUpAsCode($code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('startup', NULL, trim($code));
}

/**
 * devices: (ARG)
 *
 * in: adhoc Setup MAKE
 *     Change Setup MAKE
 *     IdentifyCustomer Setup MAKE
 */
function devices($list) {
  global $testOnly; if ($testOnly) return FALSE;
  foreach ($list as $one) if (!r\makeDevice(t\uid($one['id']), 'POS testdevice #', $one['code'])) return FALSE;
  return TRUE;
}

/**
 * balances: (ARG)
 *
 * in: 
 */
function balances($list) {
  global $testOnly;
  foreach ($list as $one) if (!t\eq(t\uidCredit(t\uid($one['id']))->balance, $one['balance'])) return FALSE;
  return TRUE;
}

/**
 * member (ARG) asks device (ARG) to do this: (ARG) (ARG) $(ARG) ((ARG): (ARG))
 *
 * in: 
 */
function memberAsksDeviceToDoThis($agent, $code, $type, $account_id, $amount, $goods, $purpose) {
  global $testOnly; if ($testOnly) return FALSE;
  $goods = ($goods == 'goods');
  return t\hitServer('transact', $agent, $code, $account_id, compact(u\ray('type amount goods purpose')));
}

/**
 * we respond success (ARG) tx_id (ARG) my_balance (ARG) other_balance (ARG) and message (ARG) with subs: (ARG)
 *
 * in: 
 */
function weRespondSuccessTxidMybalanceOtherbalanceAndMessageWithSubs($success, $tx_id, $my_balance, $other_balance, $message, $subs) {
  global $testOnly;
  if ($tx_id === '') unset($tx_id);
  if ($other_balance === '') unset($other_balance);
  return t\findMessage('out', compact(u\ray('success message tx_id my_balance other_balance')), $message, '', $subs);
}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: 
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * member (ARG) can charge unilaterally
 *
 * in: 
 */
function memberCanChargeUnilaterally($id) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct($id)->setBit(B_CHARGE);
}

/**
 * the app requests op (ARG) as member (ARG) and code (ARG)
 *
 * in: 
 */
function theAppRequestsOpAsMemberAndCode($op, $agent, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer($op, $agent, $code);
}

/**
 * member (ARG) asks device (ARG) to undo transaction (ARG), with the request (ARG)
 *
 * in: 
 */
function memberAsksDeviceToUndoTransactionWithTheRequest($agent, $code, $tx_id, $confirmed) {
  global $testOnly; if ($testOnly) return FALSE;
  $confirmed = $confirmed == 'confirmed' ? 1 : ($confirmed == 'unconfirmed' ? 0 : $confirmed);
  return t\hitServer('undo', $agent, $code, '', compact('tx_id', 'confirmed'));
}

/**
 * we respond with success (ARG), message (ARG), and subs: (ARG)
 *
 * in: 
 */
function weRespondWithSuccessMessageAndSubs($success, $message, $subs) {
  global $testOnly;
  return t\findMessage('out', compact('success'), $message, '', $subs);
}

/**
 * device (ARG) account is (ARG) and agent is (ARG)
 *
 * in: adhoc AMemberChangesAccount MAKE
 *     Change AMemberChangesAgent MAKE
 *     Change AMemberChangesAccount MAKE
 *     Change AMemberChangesToDifferentAccountANDAgent MAKE
 *     Change AMemberChangesAgentBackToDefaultAccount MAKE
 *     Change AMemberChangesAccountBackToTheDefaultAccount MAKE
 *     Change AMemberChangesAgentToSameAsCurrentNondefaultAccount MAKE
 *     Change AMemberChangesAccountToSameAsCurrentNondefaultAgent MAKE
 *     Change AMemberOmitsTheAccountid MAKE
 *     Change AMemberOmitsTheTypeOfChange MAKE
 *     Change AMemberTypesABadTypeOfChange MAKE
 */
function deviceAccountIsAndAgentIs($code, $id, $agent) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testMyIDs; 
  return ($testMyIDs[$code] = r\acct($id, $agent)->qid()); // remember my_id for next steps
}

/**
 * a member asks device (ARG) to change (ARG) to (ARG)
 *
 * in: adhoc AMemberChangesAccount MAKE
 *     Change AMemberChangesAgent MAKE
 *     Change AMemberChangesAccount MAKE
 *     Change AMemberChangesToDifferentAccountANDAgent MAKE
 *     Change AMemberChangesAgentBackToDefaultAccount MAKE
 *     Change AMemberChangesAccountBackToTheDefaultAccount MAKE
 *     Change AMemberChangesAgentToSameAsCurrentNondefaultAccount MAKE
 *     Change AMemberChangesAccountToSameAsCurrentNondefaultAgent MAKE
 *     Change AMemberOmitsTheAccountid MAKE
 *     Change AMemberOmitsTheTypeOfChange MAKE
 *     Change AMemberTypesABadTypeOfChange MAKE
 */
function aMemberAsksDeviceToChangeTo($code, $what, $account_id) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testMyIDs; 
  return t\hitServer('change', @$testMyIDs[$code], $code, $account_id, compact('what'));
}

/**
 * we respond success (ARG), my_id (ARG), account_name (ARG), show_buttons (ARG), and message (ARG), with subs: (ARG)
 *
 * in: adhoc AMemberChangesAccount TEST
 *     Change AMemberChangesAgent TEST
 *     Change AMemberChangesAccount TEST
 *     Change AMemberChangesToDifferentAccountANDAgent TEST
 *     Change AMemberChangesAgentBackToDefaultAccount TEST
 *     Change AMemberChangesAccountBackToTheDefaultAccount TEST
 *     Change AMemberChangesAgentToSameAsCurrentNondefaultAccount TEST
 *     Change AMemberChangesAccountToSameAsCurrentNondefaultAgent TEST
 */
function weRespondSuccessMyidAccountnameShowbuttonsAndMessageWithSubs($success, $my_id, $account_name, $show_buttons, $message, $subs) {
  global $testOnly;
  $account_name = str_replace('~', "\n", $account_name); // replace stand-in for EOL
  return t\findMessage('out', compact(u\ray('success message my_id account_name show_buttons')), $message, '', $subs);
}

/**
 * member (ARG) asks device (ARG) to identify (ARG)
 *
 * in: IdentifyCustomer ACashierScansACustomerCard MAKE
 */
function memberAsksDeviceToIdentify($arg1, $arg2, $arg3) {
  global $testOnly;
  todo;
}

/**
 * with balance (ARG)
 *
 * in: IdentifyCustomer ACashierScansACustomerCard TEST
 */
function withBalance($arg1) {
  global $testOnly;
  todo;
}
