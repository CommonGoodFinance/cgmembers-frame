<?php
namespace rCredits;
use rCredits\Backend as be;
use rCredits\Util as u;

/**
 * @file
 * rCredits Account class
 */

class acct {
  var $id; // the account's record id
  var $regionId; // the account region's record id
  var $agentId; // record id (in the agent's regional server) of whoever is acting on behalf of the account
  var $agentRegion; // record id of agent's region (on this server)
  var $mainQid; // nearly alphabetic representation of id, id, and region for external queries
  var $agentQid; // same for agent (for combined qid for main account and agent, use acct()->qid())
  private static $perms = array(); // permissions for all acct objects, indexed by id and agent
  private static $records = FALSE; // account records for all acct objects, indexed by id
  
  /**
   * Instantiate (create or retrieve) a member account for transactions and/or contact
   * Call by:
   *   new acct(info) OR
   *   acct(uid, agent) (see the acct() function below)
   * @param assoc $info: initial field values for the account, to be created and saved in the database, including at least one of the following:
   *   'uid' the record id
   *   'phone' is contact phone (in standard +ddddddddddd format) OR
   *   'number' is cell phone (in standard +ddddddddddd format -- use for phone also) OR
   *   'email' is email address
   *   UNUSED (because it's hard to verify): 'website' is website address
   *   (This function assumes that the info is not sufficient to identify an existing user)
   * @param id/qid $id: the account's record id (can this be a community?) (DEFAULT to cuid)
   * @param id/qid $agent: the agent's record id on this server OR the foreign agent's qid (DEFAULT to same as $id)
   */
  function __construct($id = array(), $agent = '') {
    if (!is_array($info = $id)) { // referring to existing db record
      list($this->id, $this->agentId, $this->regionId, $this->agentIdRegion) = acct::ok($id, $agent, $zot, FALSE);
    } else { // create new db record
      extract($info, EXTR_PREFIX_ALL, 'my');   
      if (isset($my_number) and !isset($my_phone)) $my_phone = $my_number;
      if (isset($my_phone)) $info['phone'] = u\formatPhone($my_phone, '+n');
      
      $info['mail'] = $info['init'] = @$my_mail ?: (@$my_email ?: '');
    // Don't create a password (that's how we know it's a temporary account) $info['pass'] = \user_password();
      $short_name = @$my_full_name ? u\shortName($my_full_name) : '';
      $info['name'] =  @$my_name ?: (@$short_name ?: tempName($info));
      $info['full_name'] = @$my_full_name ?: $info['name'];
      $info['status'] = TRUE;
      $info['is_new'] = TRUE;
      $info['roles'] = 0; // this keeps Drupal happy in user.module
      $info['flags'] = @$my_flags ?: (@$info['uid'] ? (BIT_DEFAULTS | BIT_RTRADER) : BIT_DEFAULTS);
      $info['community_uid'] = communityUid(@$my_postal_code); // defaults to current server

      /*** Begin DBTX ***/ $dbtx = db_transaction();
      if (!$uid = @$info['uid']) {
        for ($try = 0; $try < 20; $try++) { // limit the retries
          $uid = $info['uid'] = self::nextId();
          if (\drupal_write_record('users', $info)) break;
        }
      } elseif (!\drupal_write_record('users', $info)) $try = 20; // predestined uid (probably for testing)
      u\EXPECT(@$try < 20, 'failed to save user record');
      if (isset($my_number)) {
        $success = SMS\create($my_number, $uid);
        u\EXPECT($success, 'Unable to create SMS record.');
      }
      /*** End DBTX ***/ unset($dbtx);

      $region = communityUid();
      list($this->id, $this->agentId, $this->regionId, $this->agentIdRegion) = array($uid, $uid, $region, $region);
      self::$records[$this->id] = (object) $info;
    }
    if ($this->id > 0) { // no qids for communities and regions!
      $this->mainQid = qid($this->id, u\n2a(-$this->regionId, 3), 3);
      $this->agentIdQid = qid($this->agentId, u\n2a(-$this->agentIdRegion, 3), 3);
    }
  }    

  /**
   * Setup acct variables, returning FALSE on error.
   */
  public static function ok($id0, $agent0='', &$error='', $test = TRUE) {
    if ($error = u\EXPECT(compact(u\ray('id0 agent0')), 'zid|qid|assoc empty|id|qid', $test)) return FALSE;
    if ($error = u\EXPECT((bool) $id0, 'null uid in new acct()', $test)) return FALSE;
    if ($error = u\EXPECT(!(strpos($id0, ':') and $agent0), 'agent already specified in qid', $test)) return FALSE;
    list ($id, $agent, $region) = u\isZid($id0) ? array($id0, $agent0 ?: $id0, serverUid()) : UAR($id0); // handle

    if (u\isQid($agent0)) {
      list ($agent, $zot, $agentRegion) = UAR($agent0);
      if ($error = u\EXPECT($agent == $zot, 'agent agent not allowed', $test)) return FALSE;
    } else $agentRegion = serverUid();

    $record = self::getRecord($id, $region);
    if ($error = u\EXPECT($record, 'That account does not exist.', $test)) return FALSE; // don't use tt() here (many calls)
    u\EXPECT($id and $agent and $region and $agentRegion, "Missing acct property: [$id, $agent, $region, $agentRegion]");
    return array($id, $agent, $region, $agentRegion);
  }
  
  private static function getRecord($id, $region, $reread = FALSE) {
    if (@self::$records[$id] and !property_exists(self::$records[$id], 'flags')) die("No flags field in record $id: " . print_r(self::$records, 1)); // keep this
    if (@self::$records[$id] and !$reread) return self::$records[$id];
    if ($region != serverUid()) { // foreign
      // contact other server here, for a subset of the record
    } else {
      $records = be\getRecords('users', "uid=:id LIMIT 1", compact('id')); // domestic (don't use Drupal's caching)
      return $records ? (self::$records[$id] = $records[0]) : FALSE;
    }
  }

  public function reread() {self::getRecord($this->id, $this->regionId, TRUE);}
  
  /**
   * Return the value of the specified field that is not a simple property of the acct class.
   * This function reads the account record from the database if it hasn't been read yet.
   * Special field:
   *   agent: returns an account object for agentId
   */
  public function __get($field) {
    if (!@self::$records[$this->id]) $this->reread(); // necessary when we pass an acct object to another page
//    u\EXPECT(property_exists(self::$records[$this->id], $field), "bad field for uid $this->id: $field" . print_r(self::$records[$this->id], 1));
    return $field == 'agent' ? acct($this->agentId) : @self::$records[$this->id]->$field; // returns NULL if field not set
  }
  
  /**
   * Return the entire account object or just certain fields.
   * @param string $just: space-delimited list of fields to return
   * @param bool getHidden: whether we need to return the actual values of personal identifying information fields
   *   NOTE: getHidden is ignored if $just is specified
   */
  public function account($just = '', $getHidden = FALSE) {
    if (!@self::$records[$this->id]) $this->reread(); // make sure we have read the record from the db
    if (!@$this->actual and ($getHidden or $just)) {
      if ($just) $getHidden = (count(array_intersect(u\ray($just), u\ray(R_HIDE_FIELDS))) > 0);
      if ($getHidden) $this->getHidden();
    }
    $account = @self::$records[$this->id];
    return $just ? u\just($just, $account) : $account;
  }

  /**
   * Read protected personal identifying information fields into the account record
   */
  private function getHidden() {
//    if ($this->actual) return;
    $hideData = u\just(R_HIDE_FIELDS, $this->account()); // fake field values are keys into hidden data
    $data = hideData($hideData, 'RETRIEVE'); // get actual data from Hidentity
    foreach ($data as $key => $value) self::$records[$this->id]->$key = $value;
    self::$records[$this->id]->actual = TRUE; // set this in the record, not in the object--it applies to all objects for the id
  }
  
  public static function _clear() {self::$perms = self::$records = array();}
  public static function nextId() {return max(@TESTING == 1 ? 1000 : -9999999, dbLookup('MAX(uid)', 'users', 1)) + 1;}
  
  /**
   * Update the saved record in the database with the given data.
   * @param assoc $info: data to update
   */
  public function update($info) {
    //if (!@self::$records[$this->id]->uid) self::$records[$this->id] = \user_load($this->id);
    $toHide = array_intersect(array_keys($info), u\ray(R_HIDE_FIELDS));
    if (count($toHide) > 0 and !@$this->actual) $this->getHidden();
    foreach ($info as $field => $value) {
      if ($field != 'uid') self::$records[$this->id]->$field = $value;
    }
    $info['uid'] = $this->id; // make sure drupal gets this
    if (count($toHide) > 0) {
      $hideData = u\just($toHide, $this->account());
      $data = hideData($hideData, 'STORE'); // get fake data from Hidentity
      $info = $data + $info; // replace relevant fields in $info with fake data, before saving to the db
    }
    return \drupal_write_record('users', $info, 'uid');
  }

  public function proSe() {return ($this->id == $this->agentId);}  
  public function qid() {return $this->proSe() ? $this->mainQid : quid($this->id, $this->agentId, $this->regionId);}
  public function isCompany() {return (@$this->account_type != R_PERSONAL);}
  public function hasBit($bit) {return (bool) ($this->flags & $bit);}
  
  public function setBit($bit, $on = TRUE) {
  //debug(sprintf("bit=$bit flags before; %x", $this->flags));
    $flags = $on ? ($this->flags | $bit) : ($this->flags & ~$bit);
  //debug(sprintf("flags after; %x", $flags));
    self::$perms[$this->id] = NULL; // force redo in can()
    return $this->update(compact('flags'));
  }
  
  public static function setDefault($acct) {
    global $currentAcct; $currentAcct = $acct;
    global $user; 
    if (empty($user)) $user = (object) ($acct ? $acct->account() : array('uid' => 0)); // probably needed only for rWeb login/registration form testing
  }

  function passwordOkay($password) {
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $stored_hash = $this->pass;
    $hash = \_password_crypt('sha512', $password, $stored_hash);
    return ($hash and $stored_hash == $hash);
  }
  
  /**
   * Say whether this account/agent has the permission.
   * @param int $permission: the permission in question (DEFAULT PERM_READ)
   */
  public function can($permission = PERM_READ) {
    if (!@self::$perms[$this->id]) self::$perms[$this->id] = array();
    if (!@self::$perms[$this->id][$this->agentId]) { // set up perms if we haven't yet (setBit() resets this)
      $perms = array();
      $id = $this->id;
      $agent = $this->agent;

      $perms[PERM_MEMBER] = ($agent->pass !== '' and $agent->id != 1); // anyone with a password is a member
      $perms[PERM_COMPANY] = ($this->account_type != R_PERSONAL); // ad hoc permissions
      $perms[PERM_PARTNER] = $this->hasBit(BIT_PARTNER);
      $perms[PERM_STEWARD] = $this->hasBit(BIT_STEWARD);
      $perms[PERM_RTRADER] = $this->hasBit(BIT_RTRADER);
      $perms[PERM_CHARGE] = $this->hasBit(BIT_CHARGE);

      $perms[PERM_ADMIN] = $agent->hasBit(BIT_ADMIN);
      $perms[PERM_CTTY_ADMIN] = $agent->hasBit(BIT_CTTY_ADMIN);
      if ($perms[PERM_ADMIN] and R_ADMIN_CAN_MANAGE_CTTYS) $perms[PERM_CTTY_ADMIN] = TRUE; // temporary extra power, until communities are independent

      if ($this->proSe()) {
        $can = ($id < 0) ? 0 : PERM_MANAGE; // communities must be managed by an agent, never directly
      } else $can = ($perms[PERM_CTTY_ADMIN] and ($perms[PERM_ADMIN] or $this->community_uid == $agent->community_uid)) ? PERM_MANAGE : relation('permission', $id, $this->agentId);
      for ($i = 0; $i <= PERM_MANAGE; $i++) $perms[$i] = ($i <= $can); // set all permissions, even the false ones

      $perms[PERM_MANAGING_CTTY] = ($perms[PERM_CTTY_ADMIN] and $this->id == $this->community_uid);
      if ($perms[PERM_MANAGING_CTTY]) $perms[PERM_BUY] = $perms[PERM_SELL] = FALSE;
      ksort($perms); // easier to debug
      self::$perms[$this->id][$this->agentId] = $perms;
    }
    if ($permission == -1) {
      $p = u\ray($GLOBALS['permissions']);
      for ($i = 0; $i < count($p); $i++) if ($p[$i] != '-') $result[$p[$i]] = @self::$perms[$this->id][$this->agentId][$i];
      return $result; // for debugging
    }
    return self::$perms[$this->id][$this->agentId][$permission];
  }
} // end of class

/**
 * Convert quid to UAR
 * @param quid $quid: the quid to convert (DEFAULT current acount and agent's quid)
 * @return the corresponding UAR = [uid, agent, region] (FALSE if wrong format)
 */

function UAR($quid = '', $no_abbrev = TRUE) {
  if (!$quid) return array(acct()->id, acct()->agentId, serverUid());
  if (!u\isQid($quid) and !$no_abbrev) $quid = R_SERVER_ID . $quid;
  if (!u\isQid($quid)) return FALSE;

  list ($zuid, $regionUid) = unQid($quid);
  if (($reid = -$zuid) > 0) {
    if (!$record = relation('main_uid,agent_uid', 'reid=:reid', compact('reid'))) return FALSE;
    $result = array_values($record);
  } else $result = array($zuid, $zuid);
  $result[] = $regionUid;
  return $result;
}

/**
 * Hide or unhide the given data.
 * @param assoc $data: fields to hide or unhide
 * @param string $do: 'STORE' or 'RETRIEVE'
 * @return: the actual data (if RETRIEVING) or fake data (if STORING)
 */
 function hideData($data, $do) {
  return $data;
  // this should actually contact Hidentity
}  

function acct($uid = '', $agent = '', &$error = '') {
  global $currentAcct; // use this ONLY in this class file
  if (!$uid) {
    if (!$currentAcct) {$error = 'There is no current account.'; return FALSE;}
    return $currentAcct;
  }
  if (!acct::ok($uid, $agent, $error, TRUE)) return FALSE;
  return new acct($uid, $agent);
}

function agent($uid = '') {return @acct($uid)->agent;}