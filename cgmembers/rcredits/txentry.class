<?php
namespace CG;
use CG as r;
use CG\DB as db;
use CG\Backend as be;
use CG\Util as u;

/**
 * @file
 * rCredits Transaction class (and extension MyTX, which looks at the transaction from one party's view)
 *
 * Note that a transaction has at least two entries, which this class also contains
 */

/* define('TX_FIELDS', 'serial type amount goods payer payee payerAgent payeeAgent for flags created'); */

class TxEntry {
  const REQUIRED_FIELDS = 'amount uid agentUid';
  const INSERT_FIELDS = self::REQUIRED_FIELDS . ' entryType description acctTid relType relatedId';
  const E_FIELDS = self::INSERT_FIELDS . ' id xid';

  public $id; // second entry in a pair should have a positive ID, first is the inverse
  public $xid;
  public $entryType; // always identical for the two entries in a pair
  public $amount; // amount of paired entry is the inverse of this
  public $uid;
  public $agentUid; // should really be NULL if irrelevant or same as uid
  public $description;
  public $acctTid; // this should go away
  public $relType;
  public $relatedId; // this and relType should move to header (each tx has at most one related ID?)
  
  /**
   * Instantiate (construct) a transaction entry record.
   * @param assoc $info: array of field values for new transaction
   */
  function __construct($info) {
    u\vetObjectInfo($info, self::E_FIELDS, self::REQUIRED_FIELDS, 'TxEntry');
    foreach (ray(self::E_FIELDS) as $k) $this->$k = nn($info[$k], $k == 'entryType' ? -1 : NULL); // -1 is tentative
  }

  /**
   * Return the value of the specified field that is not a simple property of the class.
   * @param string $field: name of field value to get
   * @return the value if it exists, else NULL
   */
  public function __get($f) {
    $e = $this;
    switch ($f) {
    default:
      u\EXPECT(FALSE, "unexpected field $f requested");
    }
  }

  public function __set($name, $value) {
    u\EXPECT(FALSE, "Cannot set $name");
  }
  
  /**
   * Read a transaction entry record given its id.
   * @param integer $id: the id of the transaction entry record.
   * @return the new TxEntry object.
   */
  static function read($id) {
    $info = db\get('*', 'tx_entries', ['id' => $id]);
    if (!$info) { return FALSE; }
    return new TxEntry($info);
  }

  /**
   * Read all of the transaction entry records associated with a particular transaction.
   * This should only be called in the context of a database transaction.
   * @param integer $xid: the transaction id of the transaction the entries belon to.
   * @return an array containing the new instances of Entry (FALSE on failure)
   */
  static function readAll($xid) {
    $entries = [];
    $rows = db\rows('*', 'tx_entries', 'xid=:xid', ['xid' => $xid]);
    if (!$rows) { return FALSE; }
    foreach ($rows as $rowO) {
      $row = (array)$rowO;
      if (array_key_exists('deleted', $row)) unset($row['deleted']);
      $entries[] = new TxEntry($row);
    }
    return $entries;
  }

  /**
   * Save this transaction entry in the database
   * This should only be called in the context of a database transaction.
   * @param integer $xid: the xid of the transaction this entry belongs to
   * @param int $id: record ID to use (chosen automatically if zero) -- to insert the 2nd entry of a pair as the first's inverse.
   * @return the id of the entry (FALSE on failure)
   */
  function insert($xid, $id = 0) {
    $e = $this;
    $info = just(self::INSERT_FIELDS, (array)$e) + compact('xid');
    if ($id) $info += compact('id');
    $id = db\insert('tx_entries', $info, 'id');
    return $id;
  }
}
?>
