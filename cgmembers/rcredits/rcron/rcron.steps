<?php
/**
 * @file
 * rCron Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_CRON);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs += u\prefixKeys('%', compact(u\ray('chunk chunk2 chunk3 fancyYesterday')));
  $subs['%fancyYesterday'] = u\formatDate(strtotime('yesterday'));
  $subs['%chunk'] = R_CHUNK;
  for ($i = 2; $i <= 5; $i++) $subs["%chunk$i"] = R_CHUNK * $i;
  for ($i = 1; $i <= 3; $i++) $subs["%id$i"] = mt_rand(variable_get('cgf_uid') + R_REGION_MAX, PHP_INT_MAX);
}

function tlog($msg, $type = 'test', $info = array()) {return u\log($msg, $type, $info);}

/**
 * members: (ARG)
 *
 * in: Bank Setup MAKE
 *     Gifts Setup MAKE
 *     IncompleteUsdTxs Setup MAKE
 *     Inflation Setup MAKE
 *     LostUsdTxs Setup MAKE
 *     Notices Setup MAKE
 *     Pilot Setup BOTH
 *     Recache Setup MAKE
 *     Sharing Setup MAKE
 *     Totals Setup MAKE
 *     VirtualPayments Setup MAKE
 */
function members($list) {return t\members($list);}


/**
 * balances: (ARG)
 *
 * in: Bank AMemberIsBarelyBelowMinimum MAKE
 *     Bank AMemberIsAtMinimum MAKE
 *     Bank AMemberIsWellBelowMinimum MAKE
 *     Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank MAKE
 *     Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank MAKE
 *     Gifts Setup MAKE
 *     IncompleteUsdTxs Setup BOTH
 *     IncompleteUsdTxs ADwollaOutageLeavesATransactionIncomplete TEST
 *     Inflation Setup TEST
 *     Pilot Setup BOTH
 *     Pilot All TEST
 *     Recache Setup TEST
 *     Recache BalancesGetOutOfWhack BOTH
 *     Recache BalancesGetATinyBitOutOfWhack MAKE
 *     Sharing InflationAdjustmentsAreDistributed TEST
 *     Totals Setup TEST
 *     VirtualPayments AMemberCompanyPaysSuppliersVirtually MAKE
 *     VirtualPayments AMemberCompanyPaysEmployeesVirtually MAKE
 */
function balances($list) {return t\balances($list);}

/**
 * cron runs (ARG)
 *
 * in: Bank AMemberIsBarelyBelowMinimum MAKE
 *     Bank AMemberIsAtMinimum MAKE
 *     Bank AMemberIsWellBelowMinimum MAKE
 *     Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank MAKE
 *     Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank MAKE
 *     Gifts AContributionCanBeCompleted MAKE
 *     Gifts ARecurringContributionCanBeCompleted MAKE
 *     IncompleteUsdTxs ADwollaOutageLeavesATransactionIncomplete MAKE
 *     Inflation InflationAdjustmentsAreDistributed MAKE
 *     LostUsdTxs ASystemCrashLeavesATransactionIncomplete MAKE
 *     Notices AMemberGetsSomeNotices MAKE
 *     Pilot All MAKE
 *     Recache BalancesGetOutOfWhack MAKE
 *     Recache BalancesGetATinyBitOutOfWhack MAKE
 *     Sharing InflationAdjustmentsAreDistributed MAKE
 *     Totals Setup MAKE
 *     Totals CronCalculatesTheTotals MAKE
 *     VirtualPayments AMemberCompanyPaysSuppliersVirtually MAKE
 *     VirtualPayments AMemberCompanyPaysEmployeesVirtually MAKE
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * usd transfers: (ARG)
 *
 * in: Bank AMemberIsBarelyBelowMinimum TEST
 *     Bank AMemberIsWellBelowMinimum TEST
 *     Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank TEST
 *     Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank TEST
 *     IncompleteUsdTxs ADwollaOutageLeavesATransactionIncomplete TEST
 *     Pilot All TEST
 *     VirtualPayments AMemberCompanyPaysSuppliersVirtually TEST
 *     VirtualPayments AMemberCompanyPaysEmployeesVirtually TEST
 */
function usdTransfers($tx) {return t\usdTransfers($tx);}

/**
 * bank transfer count is (ARG)
 *
 * in: Bank AMemberIsAtMinimum TEST
 *     Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank TEST
 */
function bankTransferCountIs($count) {return (t\usdTransferCount('payee=0') == $count);}

/**
 * relations: (ARG)
 *
 * in: Pilot Setup MAKE
 *     Totals Setup MAKE
 *     VirtualPayments Setup MAKE
 */
function relations($relations) {return t\relations($relations);}


/**
 * transactions: (ARG)
 *
 * in: Gifts AContributionCanBeCompleted TEST
 *     Gifts ARecurringContributionCanBeCompleted TEST
 *     IncompleteUsdTxs Setup MAKE
 *     Inflation Setup MAKE
 *     Inflation InflationAdjustmentsAreDistributed TEST
 *     LostUsdTxs Setup MAKE
 *     Pilot Setup MAKE
 *     Pilot All TEST
 *     Recache Setup MAKE
 *     Sharing Setup MAKE
 *     Sharing InflationAdjustmentsAreDistributed TEST
 *     Totals Setup MAKE
 *     VirtualPayments AMemberCompanyPaysSuppliersVirtually TEST
 *     VirtualPayments AMemberCompanyPaysEmployeesVirtually TEST
 */
function transactions($list) {return t\transactions($list);}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Bank AMemberIsBarelyBelowMinimum TEST
 *     Bank AMemberIsWellBelowMinimum TEST
 *     Gifts AContributionCanBeCompleted TEST
 *     Gifts ARecurringContributionCanBeCompleted TEST
 *     VirtualPayments AMemberCompanyPaysSuppliersVirtually TEST
 *     VirtualPayments AMemberCompanyPaysEmployeesVirtually TEST
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * gifts: (ARG)
 *
 * in: Gifts AContributionCanBeCompleted BOTH
 *     Gifts ARecurringContributionCanBeCompleted BOTH
 *     Pilot Setup MAKE
 *     Sharing InflationAdjustmentsAreDistributed TEST
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we tell staff (ARG) with subs: (ARG)
 *
 * in: Gifts AContributionCanBeCompleted TEST
 *     Gifts ARecurringContributionCanBeCompleted TEST
 *     Recache BalancesGetOutOfWhack TEST
 */
function weTellStaffWithSubs($topic, $subs) {return t\weTellStaff($topic, $subs);}

/**
 * usd: (ARG)
 *
 * in: IncompleteUsdTxs ADwollaOutageLeavesATransactionIncomplete MAKE
 *     Recache Setup MAKE
 *     Totals Setup MAKE
 */
function usd($list) {return t\usd($list);}

/**
 * totals: (ARG)
 *
 * in: Totals CronCalculatesTheTotals TEST
 */
function totals($ray) {
  global $testOnly; if(!$testOnly) return FALSE;
  $totals = r\totals();
  foreach ($ray[0] as $key => $value) if ($value != $totals->$key) {
    t\output("Total mismatch ($key): value $value <> calc " . $totals->$key);
    return FALSE;
  }
  return TRUE;
}

/**
 * constants: (ARG)
 *
 * in: 
 */
function constants($list) {return t\constants($list);}


/**
 * notices: (ARG)
 *
 * in: Notices AMemberGetsSomeNotices BOTH
 */
function notices($list) {return t\notices($list);}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: Notices AMemberGetsSomeNotices TEST
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * notice count is (ARG)
 *
 * in: 
 */
function noticeCountIs($count) {
  return (r\dbLookup('COUNT(*)', 'r_notices') == $count);
}

/**
 * member (ARG) charges member (ARG) $(ARG) for (ARG)
 *
 * in: Pilot All MAKE
 */
function memberChargesMemberFor($payee, $payer, $amount, $for) {
  global $testOnly; if ($testOnly) return FALSE;
  global $scanned; $scanned = TRUE;
  be\transfer('charge', r\acct(t\uid($payee)), r\acct(t\uid($payer)), $amount, $for, TRUE);
  return TRUE;
}

/**
 * incomplete transaction count (ARG)
 *
 * in: IncompleteUsdTxs Setup TEST
 *     IncompleteUsdTxs ADwollaOutageLeavesATransactionIncomplete TEST
 */
function incompleteTransactionCount($count) {
  global $testOnly; if (!$testOnly) return FALSE;
  return (r\dbLookup('COUNT(*)', 'r_txs', 'usdXid=-1 AND state IN(:TX_DONE,:TX_DISPUTED) AND r<amount') == $count);
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: LostUsdTxs ASystemCrashLeavesATransactionIncomplete MAKE
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * USD payment by member (ARG) is not recorded
 *
 * in: 
 */
function uSDPaymentByMemberIsNotRecorded($id) {
  global $testOnly; if ($testOnly) return FALSE;
  $id = t\uid($id);
  return r\dbQ('DELETE FROM r_usd WHERE payer=:id LIMIT 1', compact('id'));
}

/**
 * we tell staff nothing
 *
 * in: 
 */
function weTellStaffNothing() {
  global $testOnly; if (!$testOnly) return FALSE;
  $info = '%"index":"tell-staff"%';
  return !r\dbLookup('info', 'r_log', "info LIKE '$info' ORDER BY logid DESC");
}

/**
 * we do not tell staff (ARG)
 *
 * in: Recache BalancesGetATinyBitOutOfWhack TEST
 */
function weDoNotTellStaff($topic) {return !t\weTellStaff($topic);}
