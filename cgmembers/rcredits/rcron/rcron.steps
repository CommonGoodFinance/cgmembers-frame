<?php
/**
 * @file
 * rCron Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured however, that no functions will be deleted and the compiler will
 * never delete or alter code within a function.
 */
use rCredits as r;
use rCredits\DB as db;
use rCredits\Testing as t;
use rCredits\Util as u;
use rCredits\Backend as be;

require_once __DIR__ . '/../rcredits.inc';
require_once __DIR__ . '/../rcredits-testing.inc';

/**
 * Add additional setup for any or all features or tests
 * The feature object contains information about the current feature and test, etc.
 */
function extraSetup($feature) {
  t\clear(TX_CRON);
  if (!function_exists('multiline_tweak')) {function multiline_tweak(&$line) {
    $line = str_replace('%last_quid', r\quid(r\acct::nextId() - 1), $line);
  }}
}

/**
 * Modify the standard list of magic substitutions (the %parameters)
 */
function extraSubs(&$subs) {
//  $subs += u\prefixKeys('%', compact(u\ray('chunk chunk2 chunk3 fancyYesterday')));
  $subs['%fancyYesterday'] = u\fmtDate(strtotime('yesterday'));
  $subs['%fancyYesterweek'] = u\fmtDate(strtotime('-1 week'));
  $subs['%chunk'] = R_CHUNK;
  for ($i = 2; $i <= 5; $i++) $subs["%chunk$i"] = R_CHUNK * $i;
  for ($i = 1; $i <= 3; $i++) $subs["%id$i"] = mt_rand(r\cgfId() + R_REGION_MAX, PHP_INT_MAX);
  $subs['%md'] = strftime('%b %d'); // strangely, lastMinuteSubs fails for this in Notices multifield
  $subs['%zzxCttyEmail'] = @r\acct(t\uid('.ZZA'))->cttyA->email;
}

/**
 * members: (ARG)
 *
 * in: MAKE Bank Setup
 *     MAKE Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE Bank AMemberIsUnderMinimumOnlyBecauseRewardsAreReserved
 *     MAKE Gifts Setup
 *     MAKE Inflation Setup
 *     MAKE Joint Setup
 *     MAKE Notices Setup
 *     MAKE Recache Setup
 *     BOTH Risk Setup
 *     TEST Risk WeCalculateRisks
 *     MAKE Sharing Setup
 *     MAKE Tickle Setup
 *     MAKE Trust Setup
 *     TEST Trust WeCalculateTrust
 */
function members($list) {return t\members($list);}


/**
 * balances: (ARG)
 *
 * in: MAKE Bank AMemberIsBarelyBelowMinimum
 *     MAKE Bank AMemberHasANegativeBalance
 *     MAKE Bank AnUnbankedMemberBarelyBelowMinimumDrawsOnAnotherAccount
 *     MAKE Bank AnUnbankedMemberBarelyBelowMinimumCannotDrawOnAnotherAccount
 *     MAKE Bank AMemberIsAtMinimum
 *     MAKE Bank AMemberIsWellBelowMinimum
 *     MAKE Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     MAKE Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE Bank AMemberIsUnderMinimumOnlyBecauseRewardsAreReserved
 *     MAKE Bank AMemberMemberWithZeroMinimumHasBalanceBelowMinimum
 *     MAKE Bank AnUnbankedMemberWithZeroMinimumHasBalanceBelowMinimum
 *     MAKE Bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE Gifts Setup
 *     TEST Inflation Setup
 *     TEST Joint Setup
 *     MAKE Joint AJointAccountNeedsRefilling
 *     MAKE Joint AJointAccountDoesNotNeedRefilling
 *     TEST Recache Setup
 *     BOTH Recache BalancesGetOutOfWhack
 *     MAKE Recache BalancesGetATinyBitOutOfWhack
 *     TEST Sharing MembersShareTheirTransactionRewards
 *     MAKE Tickle AMemberGetsACreditLine
 *     MAKE Tickle AMemberGetsABiggerCreditLineAfterSeveralMonths
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseItsTheWrongDay
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 */
function balances($list) {return t\balances($list);}

/**
 * cron runs (ARG)
 *
 * in: MAKE Bank AMemberIsBarelyBelowMinimum
 *     MAKE Bank AMemberHasANegativeBalance
 *     MAKE Bank AnUnbankedMemberBarelyBelowMinimumDrawsOnAnotherAccount
 *     MAKE Bank AnUnbankedMemberBarelyBelowMinimumCannotDrawOnAnotherAccount
 *     MAKE Bank AMemberIsAtMinimum
 *     MAKE Bank AMemberIsWellBelowMinimum
 *     MAKE Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     MAKE Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE Bank AMemberIsUnderMinimumOnlyBecauseRewardsAreReserved
 *     MAKE Bank AMemberMemberWithZeroMinimumHasBalanceBelowMinimum
 *     MAKE Bank AnUnbankedMemberWithZeroMinimumHasBalanceBelowMinimum
 *     MAKE Bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE Gifts ADonationCanBeCompleted
 *     MAKE Gifts ADonationCanBeCompletedEvenIfTheMemberHasNeverYetMadeAnRCardPurchase
 *     MAKE Gifts ARecurringDonationCanBeCompleted
 *     MAKE Inflation InflationAdjustmentsAreDistributed
 *     MAKE Joint AJointAccountNeedsRefilling
 *     MAKE Joint AJointAccountDoesNotNeedRefilling
 *     MAKE Notices AMemberGetsSomeNotices
 *     MAKE Notices AMemberGetsSomeWeeklyNotices
 *     MAKE Recache BalancesGetOutOfWhack
 *     MAKE Recache BalancesGetATinyBitOutOfWhack
 *     MAKE Risk Setup
 *     MAKE Risk WeCalculateRisks
 *     MAKE Sharing MembersShareTheirTransactionRewards
 *     MAKE Tickle ANewbieHasNotTakenTheFirstStep
 *     MAKE Tickle ANewbieHasTakenSomeStepsButNotAll
 *     MAKE Tickle ANonmemberHasNotAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 *     MAKE Tickle AMemberGetsACreditLine
 *     MAKE Tickle AMemberGetsABiggerCreditLineAfterSeveralMonths
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseItsTheWrongDay
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 *     MAKE Trust WeCalculateTrust
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * usd transfers: (ARG)
 *
 * in: TEST Bank AMemberIsBarelyBelowMinimum
 *     TEST Bank AMemberHasANegativeBalance
 *     TEST Bank AMemberIsWellBelowMinimum
 *     TEST Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     TEST Bank AMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank
 *     TEST Bank AMemberIsUnderMinimumOnlyBecauseRewardsAreReserved
 *     MAKE Bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE Inflation Setup
 *     TEST Joint AJointAccountNeedsRefilling
 *     MAKE Risk Setup
 *     TEST Risk WeCalculateRisks
 */
function usdTransfers($tx) {return t\usdTransfers($tx);}

/**
 * bank transfer count is (ARG)
 *
 * in: TEST Bank AMemberIsAtMinimum
 *     TEST Bank AMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     TEST Bank AMemberMemberWithZeroMinimumHasBalanceBelowMinimum
 *     TEST Bank AnUnbankedMemberWithZeroMinimumHasBalanceBelowMinimum
 *     TEST Bank AMemberHasADepositedButNotCompletedTransfer
 *     TEST Joint AJointAccountDoesNotNeedRefilling
 */
function bankTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * relations: (ARG)
 *
 * in: MAKE Bank Setup
 *     MAKE Joint Setup
 *     MAKE Risk Setup
 */
function relations($relations) {return t\relations($relations);}


/**
 * transactions: (ARG)
 *
 * in: TEST Bank AnUnbankedMemberBarelyBelowMinimumDrawsOnAnotherAccount
 *     TEST Gifts ADonationCanBeCompleted
 *     TEST Gifts ADonationCanBeCompletedEvenIfTheMemberHasNeverYetMadeAnRCardPurchase
 *     TEST Gifts ARecurringDonationCanBeCompleted
 *     MAKE Inflation Setup
 *     TEST Inflation InflationAdjustmentsAreDistributed
 *     MAKE Joint Setup
 *     MAKE Recache Setup
 *     MAKE Risk Setup
 *     TEST Risk WeCalculateRisks
 *     MAKE Sharing Setup
 *     TEST Sharing MembersShareTheirTransactionRewards
 *     MAKE Tickle AMemberGetsACreditLine
 *     MAKE Tickle AMemberGetsABiggerCreditLineAfterSeveralMonths
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseItsTheWrongDay
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 */
function transactions($list) {return t\transactions($list);}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Bank AMemberIsBarelyBelowMinimum
 *     TEST Bank AMemberHasANegativeBalance
 *     TEST Bank AnUnbankedMemberBarelyBelowMinimumDrawsOnAnotherAccount
 *     TEST Bank AMemberIsWellBelowMinimum
 *     TEST Gifts ADonationCanBeCompleted
 *     TEST Gifts ARecurringDonationCanBeCompleted
 *     TEST Joint AJointAccountNeedsRefilling
 *     TEST Sharing MembersShareTheirTransactionRewards
 *     TEST Tickle ANewbieHasNotTakenTheFirstStep
 *     TEST Tickle ANonmemberHasNotAcceptedTheInvitation
 *     TEST Tickle AMemberGetsACreditLine
 *     TEST Tickle AMemberGetsABiggerCreditLineAfterSeveralMonths
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * we notice (ARG) to member (ARG)
 *
 * in: TEST Bank AnUnbankedMemberBarelyBelowMinimumCannotDrawOnAnotherAccount
 *     TEST Tickle ANewbieHasNotTakenTheFirstStep
 *     TEST Tickle ANewbieHasTakenSomeStepsButNotAll
 */
function weNoticeToMember($notice, $id) {return t\notice($notice, $id);}

/**
 * gifts: (ARG)
 *
 * in: BOTH Gifts ADonationCanBeCompleted
 *     MAKE Gifts ADonationCanBeCompletedEvenIfTheMemberHasNeverYetMadeAnRCardPurchase
 *     BOTH Gifts ARecurringDonationCanBeCompleted
 *     MAKE Risk Setup
 *     TEST Sharing MembersShareTheirTransactionRewards
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we tell staff (ARG) with subs: (ARG)
 *
 * in: TEST Gifts ADonationCanBeCompleted
 *     TEST Gifts ARecurringDonationCanBeCompleted
 *     TEST Recache BalancesGetOutOfWhack
 *     TEST Recache BalancesGetATinyBitOutOfWhack
 */
function weTellStaffWithSubs($topic, $subs) {return t\weTellStaff($topic, $subs);}

/**
 * usd: (ARG)
 *
 * in: 
 */
function usd($list) {return t\usd($list);}

/**
 * totals: (ARG)
 *
 * in: 
 */
function totals($ray) {
  global $testOnly; if(!$testOnly) return FALSE;
  $totals = r\totals();
  foreach ($ray[0] as $key => $value) if ($value != $totals->$key) {
    t\output("Total mismatch ($key): value $value <> calc " . $totals->$key);
    return FALSE;
  }
  return TRUE;
}

/**
 * constants: (ARG)
 *
 * in: 
 */
function constants($list) {return t\constants($list);}


/**
 * notices: (ARG)
 *
 * in: BOTH Notices AMemberGetsSomeNotices
 *     BOTH Notices AMemberGetsSomeWeeklyNotices
 */
function notices($list) {return t\notices($list);}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Notices AMemberGetsSomeNotices
 *     TEST Notices AMemberGetsSomeWeeklyNotices
 *     TEST Tickle ANonmemberHasNotAcceptedTheInvitation
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * notice count is (ARG)
 *
 * in: 
 */
function noticeCountIs($count) {
  return (db\count('r_notices') == $count);
}

/**
 * member (ARG) charges member (ARG) $(ARG) for (ARG)
 *
 * in: 
 */
function memberChargesMemberFor($payee, $payer, $amount, $for) {
  global $testOnly; if ($testOnly) return FALSE;
  global $scanned; $scanned = TRUE;
  be\transfer('charge', r\acct(t\uid($payee)), r\acct(t\uid($payer)), $amount, TRUE, $for);
  return TRUE;
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: 
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * USD payment by member (ARG) is not recorded
 *
 * in: 
 */
function uSDPaymentByMemberIsNotRecorded($id) {
  global $testOnly; if ($testOnly) return FALSE;
  $id = t\uid($id);
  return db\q('DELETE FROM r_usd WHERE payer=:id LIMIT 1', compact('id'));
}

/**
 * we tell staff nothing
 *
 * in: 
 */
function weTellStaffNothing() {
  global $testOnly; if (!$testOnly) return FALSE;
  $info = '%"index":"tell-staff"%';
  return !db\lookup('info', 'r_log', "info LIKE '$info' ORDER BY logid DESC");
}

/**
 * we do not tell staff (ARG)
 *
 * in: 
 */
function weDoNotTellStaff($topic) {return !t\weTellStaff($topic);}

/**
 * usd transfer count is (ARG)
 *
 * in: 
 */
function usdTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * next DO code is (ARG)
 *
 * in: 
 */
function nextDOCodeIs($code) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testDoCode;
  return $testDoCode = $code;
}

/**
 * member (ARG) trades $(ARG) USD to member (ARG) for rCredits
 *
 * in: 
 */
function memberTradesUSDToMemberForRCredits($id1, $amount, $id2) {
  global $testOnly; if ($testOnly) return FALSE;
  return (bool) r\tradeR($amount, $id2, $id1);
}

/**
 * we message member (ARG) with topic (ARG) and subs: (ARG)
 *
 * in: 
 */
function weMessageMemberWithTopicAndSubs($id, $topic, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = r\acct(t\uid($id));
  $message = u\tt($topic, @$subs[0]);
  $topic = $GLOBALS['topics'][$topic];
  $fullName = $a->fullName;
  return weEmailToMemberWithSubs('message', $a->email, compact(u\ray('message topic fullName')));
}

/**
 * members have: (ARG)
 *
 * in: TEST Tickle AMemberGetsACreditLine
 *     TEST Tickle AMemberGetsABiggerCreditLineAfterSeveralMonths
 *     TEST Tickle AMemberGetsNoNewCreditLineBecauseItsTheWrongDay
 *     BOTH Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * that (ARG) has link results: (ARG)
 *
 * in: TEST Gifts ADonationCanBeCompleted
 *     TEST Gifts ARecurringDonationCanBeCompleted
 */
function thatHasLinkResults($thing, $info) {return t\hasLinkResults($thing, $info);}

/**
 * member (ARG) has done step (ARG)
 *
 * in: MAKE Tickle ANewbieHasNotTakenTheFirstStep
 *     MAKE Tickle ANewbieHasTakenSomeStepsButNotAll
 */
function memberHasDoneStep($uid, $step) {return t\doneStep($uid, $step);}

/**
 * invites: (ARG)
 *
 * in: MAKE Risk Setup
 *     MAKE Tickle ANewbieHasNotTakenTheFirstStep
 *     MAKE Tickle ANonmemberHasNotAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 */
function invites($list) {return t\invites($list);}

/**
 * we do not email (ARG) to member (ARG)
 *
 * in: TEST Tickle ANonmemberHasAcceptedTheInvitation
 *     TEST Tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 */
function weDoNotEmailToMember($index, $email) {return t\noSuchEmail($index, $email);}

/**
 * it's time for (ARG)
 *
 * in: MAKE Notices AMemberGetsSomeWeeklyNotices
 */
function itsTimeFor($what) {
  global $testOnly, $timeFor;
  return $testOnly ? $timeFor[$what] : ($timeFor[$what] = TRUE);
}

/**
 * proxies: (ARG)
 *
 * in: MAKE Risk Setup
 *     MAKE Trust Setup
 */
function proxies($list) {return t\proxies($list);}
/**
 * member field values: (ARG)
 *
 * in: MAKE Risk Setup
 */
function memberFieldValues($list) {return t\memberFieldValues($list);}

/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE Gifts ADonationCanBeCompletedEvenIfTheMemberHasNeverYetMadeAnRCardPurchase
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}
