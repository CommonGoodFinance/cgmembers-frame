<?php
/**
 * @file
 * rCron Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */
use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;
use CG\Cron as cr;

require_once __DIR__ . '/../defs.inc';
define('IAOY', t('inflation adjustment on your'));

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup($feature) {
  t\clear(TX_CRON);
}

/**
 * members: (ARG)
 *
 * in: MAKE Gifts Setup
 *     MAKE Gifts ANonmemberChoosesADonation
 *     MAKE Tickle Setup
 *     MAKE Trust Setup
 *     MAKE Monthly Setup
 *     MAKE Invoices Setup
 *     MAKE Risk Setup
 *     MAKE Joint Setup
 *     MAKE Bank Setup
 *     MAKE Bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE Bank ANonmemberHasATargetAndRefills
 *     MAKE Weekly Setup
 *     MAKE Recache Setup
 *     MAKE Notices Setup
 *     MAKE CommunityBits Setup
 */
function members($list) {return t\members($list);}


/**
 * balances: (ARG)
 *
 * in: MAKE Gifts Setup
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 *     TEST Monthly Setup
 *     TEST Invoices Setup
 *     BOTH Invoices UnpaidInvoicesGetHandled
 *     TEST Joint Setup
 *     MAKE Joint AJointAccountNeedsRefilling
 *     MAKE Joint AJointAccountDoesNotNeedRefilling
 *     MAKE Bank AMemberIsBarelyBelowTarget
 *     MAKE Bank AMemberHasANegativeBalance
 *     MAKE Bank AnUnbankedMemberBarelyBelowTargetDrawsOnAnotherAccount
 *     MAKE Bank AnUnbankedMemberBarelyBelowTargetCannotDrawOnAnotherAccount
 *     MAKE Bank AMemberIsAtTarget
 *     MAKE Bank AMemberIsWellBelowTarget
 *     MAKE Bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     MAKE Bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE Bank AMemberMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE Bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE Bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE Bank AnAccountHasATargetButNoRefills
 *     TEST Weekly AMemberCrawlsOutOfDebt
 *     TEST Weekly AMemberBuildsUpSavings
 *     TEST Weekly AMemberCashesOutAutomatically
 *     TEST Recache Setup
 *     BOTH Recache BalancesGetOutOfWhack
 *     MAKE Recache BalancesGetATinyBitOutOfWhack
 *     MAKE CommunityBits Setup
 */
function balances($list) {return t\balances($list);}

/**
 * cron runs (ARG)
 *
 * in: MAKE Gifts ABrandNewRecurringDonationCanBeCompleted
 *     MAKE Gifts ASecondRecurringDonationCanBeCompleted
 *     MAKE Gifts ADonationInvoiceCanBeCompleted
 *     MAKE Gifts ARecurringDonationCannotBeCompleted
 *     MAKE Gifts ANonmemberChoosesADonation
 *     MAKE Tickle ANewbieHasNotTakenTheFirstStep
 *     MAKE Tickle ANewbieHasTakenSomeStepsButNotAll
 *     MAKE Tickle ANonmemberHasNotAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 *     MAKE Tickle ANonmemberHasAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 *     MAKE Trust WeCalculateTrust
 *     MAKE Monthly InflationAdjustmentsRoundUpDonationsAndCrumbDonationsAreMade
 *     MAKE Invoices UnpaidInvoicesGetHandled
 *     MAKE Invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     MAKE Risk Setup
 *     MAKE Risk WeCalculateRisks
 *     MAKE Joint AJointAccountNeedsRefilling
 *     MAKE Joint AJointAccountDoesNotNeedRefilling
 *     MAKE Bank AMemberIsBarelyBelowTarget
 *     MAKE Bank AMemberHasANegativeBalance
 *     MAKE Bank AnUnbankedMemberBarelyBelowTargetDrawsOnAnotherAccount
 *     MAKE Bank AnUnbankedMemberBarelyBelowTargetCannotDrawOnAnotherAccount
 *     MAKE Bank AMemberIsAtTarget
 *     MAKE Bank AMemberIsWellBelowTarget
 *     MAKE Bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     MAKE Bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE Bank AMemberMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE Bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE Bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE Bank AnAccountHasATargetButNoRefills
 *     MAKE Bank ANonmemberHasATargetAndRefills
 *     MAKE Bank MembersBankAccountHasNotBeenVerified
 *     MAKE Bank AMembersBankAccountGetsVerified
 *     MAKE Weekly AMemberCrawlsOutOfDebt
 *     MAKE Weekly AMemberBuildsUpSavings
 *     MAKE Weekly AMemberCashesOutAutomatically
 *     MAKE Recache BalancesGetOutOfWhack
 *     MAKE Recache BalancesGetATinyBitOutOfWhack
 *     MAKE Notices AMemberGetsSomeNotices
 *     MAKE Notices AMemberGetsSomeWeeklyNotices
 *     MAKE CommunityBits CommunityBansSpendingBelowZero
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * usd transfers: (ARG)
 *
 * in: MAKE Monthly Setup
 *     TEST Invoices UnpaidInvoicesGetHandled
 *     MAKE Risk Setup
 *     TEST Risk WeCalculateRisks
 *     TEST Joint AJointAccountNeedsRefilling
 *     TEST Bank AMemberIsBarelyBelowTarget
 *     TEST Bank AMemberHasANegativeBalance
 *     TEST Bank AMemberIsWellBelowTarget
 *     TEST Bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     TEST Bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     TEST Bank AMemberMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE Bank AMemberHasADepositedButNotCompletedTransfer
 *     TEST Bank ANonmemberHasATargetAndRefills
 *     TEST Bank MembersBankAccountHasNotBeenVerified
 *     MAKE Bank AMembersBankAccountGetsVerified
 *     TEST Weekly AMemberCashesOutAutomatically
 */
function usdTransfers($tx) {return t\usdTransfers($tx);}

/**
 * bank transfer count is (ARG)
 *
 * in: TEST Joint AJointAccountDoesNotNeedRefilling
 *     TEST Bank AMemberIsBarelyBelowTarget
 *     TEST Bank AMemberIsAtTarget
 *     TEST Bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     TEST Bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     TEST Bank AMemberHasADepositedButNotCompletedTransfer
 *     TEST Bank AnAccountHasATargetButNoRefills
 */
function bankTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * relations: (ARG)
 *
 * in: MAKE Invoices Setup
 *     MAKE Risk Setup
 *     MAKE Joint Setup
 *     MAKE Bank Setup
 */
function relations($relations) {return t\relations($relations);}


/**
 * transactions: (ARG)
 *
 * in: TEST Gifts ABrandNewRecurringDonationCanBeCompleted
 *     BOTH Gifts ASecondRecurringDonationCanBeCompleted
 *     TEST Gifts ADonationInvoiceCanBeCompleted
 *     MAKE Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 *     MAKE Monthly Setup
 *     TEST Monthly InflationAdjustmentsRoundUpDonationsAndCrumbDonationsAreMade
 *     MAKE Invoices Setup
 *     TEST Invoices UnpaidInvoicesGetHandled
 *     MAKE Risk Setup
 *     TEST Risk WeCalculateRisks
 *     MAKE Joint Setup
 *     TEST Bank AnUnbankedMemberBarelyBelowTargetDrawsOnAnotherAccount
 *     MAKE Weekly AMemberCashesOutAutomatically
 *     MAKE Recache Setup
 */
function transactions($list) {return t\transactions($list);}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Gifts ABrandNewRecurringDonationCanBeCompleted
 *     TEST Tickle ANewbieHasNotTakenTheFirstStep
 *     TEST Tickle ANonmemberHasNotAcceptedTheInvitation
 *     TEST Invoices UnpaidInvoicesGetHandled
 *     TEST Joint AJointAccountNeedsRefilling
 *     TEST Bank AMemberIsBarelyBelowTarget
 *     TEST Bank AMemberHasANegativeBalance
 *     TEST Bank AnUnbankedMemberBarelyBelowTargetDrawsOnAnotherAccount
 *     TEST Bank AnUnbankedMemberBarelyBelowTargetCannotDrawOnAnotherAccount
 *     TEST Bank AMemberIsWellBelowTarget
 *     TEST Weekly AMemberCashesOutAutomatically
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * we notice (ARG) to member (ARG)
 *
 * in: TEST Tickle ANewbieHasNotTakenTheFirstStep
 *     TEST Tickle ANewbieHasTakenSomeStepsButNotAll
 */
function weNoticeToMember($notice, $id) {return t\notice($notice, $id);}

/**
 * gifts: (ARG)
 *
 * in: 
 */
function gifts($gifts) {return t\gifts($gifts);}

/**
 * we tell admin (ARG) with subs: (ARG)
 *
 * in: TEST Monthly InflationAdjustmentsRoundUpDonationsAndCrumbDonationsAreMade
 *     TEST Recache BalancesGetOutOfWhack
 *     TEST Recache BalancesGetATinyBitOutOfWhack
 */
function weTellAdminWithSubs($topic, $subs) {return t\weTellAdmin($topic, $subs);}

/**
 * we tell (ARG) CO (ARG) with subs: (ARG)
 *
 * in: TEST CommunityBits CommunityBansSpendingBelowZero
 */
function weTellCOWithSubs($id, $topic, $subs) {return t\weTellAdmin($topic, $subs, t\uid($id));}

/**
 * notices: (ARG)
 *
 * in: BOTH Notices AMemberGetsSomeNotices
 *     BOTH Notices AMemberGetsSomeWeeklyNotices
 */
function notices($list) {return t\notices($list);}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Tickle ANonmemberHasNotAcceptedTheInvitation
 *     TEST Notices AMemberGetsSomeNotices
 *     TEST Notices AMemberGetsSomeWeeklyNotices
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * notice count is (ARG)
 *
 * in: 
 */
function noticeCountIs($count) {
  return (db\count('r_notices') == $count);
}

/**
 * member (ARG) charges member (ARG) $(ARG) for (ARG)
 *
 * in: 
 */
function memberChargesMemberFor($payee, $payer, $amount, $for) {
  global $testOnly; if ($testOnly) return FALSE;
  global $scanned; $scanned = TRUE;
  be\transfer('charge', acct(t\uid($payee)), acct(t\uid($payer)), $amount, $for);
  return TRUE;
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: 
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * USD payment by member (ARG) is not recorded
 *
 * in: 
 */
function uSDPaymentByMemberIsNotRecorded($id) {
  global $testOnly; if ($testOnly) return FALSE;
  $id = t\uid($id);
  return db\q('DELETE FROM r_usd WHERE payer=:id LIMIT 1', compact('id'));
}

/**
 * usd transfer count is (ARG)
 *
 * in: TEST Invoices UnpaidInvoicesGetHandled
 */
function usdTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * next DO code is (ARG)
 *
 * in: 
 */
function nextDOCodeIs($code) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testDoCode;
  return $testDoCode = $code;
}

/**
 * member (ARG) trades $(ARG) USD to member (ARG) for rCredits
 *
 * in: 
 */
function memberTradesUSDToMemberForRCredits($id1, $amount, $id2) {
  global $testOnly; if ($testOnly) return FALSE;
  return (bool) r\tradeR($amount, $id2, $id1);
}

/**
 * we message member (ARG) with topic (ARG) and subs: (ARG)
 *
 * in: 
 */
function weMessageMemberWithTopicAndSubs($id, $topic, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = acct(t\uid($id));
  $message = t($topic, @$subs[0]);
  $topic = $GLOBALS['topics'][$topic];
  $fullName = $a->fullName;
  return weEmailToMemberWithSubs('message', $a->email, compact(ray('message topic fullName')));
}

/**
 * members have: (ARG)
 *
 * in: BOTH Tickle AMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal
 *     TEST Trust WeCalculateTrust
 *     TEST Risk Setup
 *     TEST Risk WeCalculateRisks
 *     MAKE Bank AnAccountHasATargetButNoRefills
 *     MAKE Bank MembersBankAccountHasNotBeenVerified
 *     BOTH Bank AMembersBankAccountGetsVerified
 *     MAKE Weekly AMemberBuildsUpSavings
 *     MAKE Weekly AMemberCashesOutAutomatically
 *     MAKE CommunityBits CommunityBansSpendingBelowZero
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * that (ARG) has link results: (ARG)
 *
 * in: TEST Gifts ABrandNewRecurringDonationCanBeCompleted
 */
function thatHasLinkResults($thing, $info) {return t\hasLinkResults($thing, $info);}

/**
 * member (ARG) has done step (ARG)
 *
 * in: MAKE Tickle ANewbieHasNotTakenTheFirstStep
 *     MAKE Tickle ANewbieHasTakenSomeStepsButNotAll
 */
function memberHasDoneStep($id, $step) {return t\doneStep($id, $step);}

/**
 * invites: (ARG)
 *
 * in: MAKE Tickle ANewbieHasNotTakenTheFirstStep
 *     MAKE Tickle ANonmemberHasNotAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 *     MAKE Tickle ANonmemberHasAcceptedTheInvitation
 *     MAKE Tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 *     MAKE Risk Setup
 */
function invites($list) {return t\invites($list);}

/**
 * we do not email (ARG) to member (ARG)
 *
 * in: TEST Tickle ANonmemberHasAcceptedTheInvitation
 *     TEST Tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 */
function weDoNotEmailToMember($index, $email) {return t\noSuchEmail($index, $email);}

/**
 * it's time for (ARG)
 *
 * in: MAKE Notices AMemberGetsSomeWeeklyNotices
 */
function itsTimeFor($what) {
  global $testOnly, $timeFor;
  return $testOnly ? $timeFor[$what] : ($timeFor[$what] = TRUE);
}

/**
 * proxies: (ARG)
 *
 * in: MAKE Trust Setup
 *     MAKE Risk Setup
 */
function proxies($list) {return t\proxies($list);}
/**
 * member field values: (ARG)
 *
 * in: MAKE Risk Setup
 */
function memberFieldValues($list) {return t\memberFieldValues($list);}

/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE Gifts ADonationInvoiceCanBeCompleted
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}

/**
 * variable (ARG) is (ARG) with subs: (ARG)
 *
 * in: 
 */
function variableIsWithSubs($var, $index, $subs) {return t\varIs($var, $index, $subs);}

/**
 * community email for member (ARG) is (ARG)
 *
 * in: MAKE Notices Setup
 */
function communityEmailForMemberIs($id, $email) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct(t\uid($id))->cttyA->update('email', $email);
}

/**
 * member (ARG) cache is ok
 *
 * in: TEST Monthly InflationAdjustmentsRoundUpDonationsAndCrumbDonationsAreMade
 */
function memberCacheIsOk($id) {return r\acct(t\uid($id))->cacheOk();}

/**
 * oftenness works
 *
 * in: 
 */
function oftennessWorks() {
  global $testOnly; if (!$testOnly) return FALSE;
  include_once __DIR__ . '/rcron/rcron.inc';
  
  
  $oftentests = 'year 01 1/1/2000 12/31/2000 0, year 01 1/1/2000 1/1/2001 1, year 01 1/1/2000 1/2/2001 1, '
  . 'year 01 1/3/2000 12/31/2000 0, year 01 1/3/2000 1/1/2001 1, year 01 1/3/2000 1/4/2001 1, ' // two days late last time
  . 'month 01 1/1/2000 1/31/2000 0, month 01 1/1/2000 2/1/2000 1, month 01 1/1/2000 2/2/2000 1, '
  . 'month 01 1/3/2000 1/31/2000 0, month 01 1/3/2000 2/1/2000 1, month 01 1/3/2000 2/4/2000 1, ' // two days late last time
  . 'week 0 1/2/2000 1/8/2000 0, week 0 1/2/2000 1/9/2000 1, week 0 1/2/2000 1/10/2000 1, '
  . 'week 0 1/4/2000 1/8/2000 0, week 0 1/4/2000 1/9/2000 1, week 0 1/4/2000 1/12/2000 1, '; // two days late last time

  $ok = TRUE;
  foreach (ray($oftenttests) as $one) {
    if (!$one) break;
    list ($period, $chosen, $last, $time, $want) = ray($one);
    \variable_set('r_last_cron', [$period => strtotime($last)]);
    if (cr\timeFor(strtotime($time), $period, $chosen) != $want) $ok = t\output("test failed: $one");
  }
  return $ok;
}

/**
 * we do not notice to member (ARG)
 *
 * in: TEST Tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 */
function weDoNotNoticeToMember($id) {return !t\notice([], $id);}

/**
 * we do not email (ARG)
 *
 * in: TEST Tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 */
function weDoNotEmail($email) {return t\noEmailTo($email);}

/**
 * invoices: (ARG)
 *
 * in: BOTH Gifts ADonationInvoiceCanBeCompleted
 *     TEST Gifts ARecurringDonationCannotBeCompleted
 *     MAKE Invoices Setup
 *     TEST Invoices UnpaidInvoicesGetHandled
 *     MAKE Invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 */
function invoices($list) {return t\invoices($list);}

/**
 * we message (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST Invoices UnpaidInvoicesGetHandled
 */
function weMessageToMemberWithSubs($index, $id, $subs) {return t\weMessage($index, $id, $subs);}

/**
 * stats: (ARG)
 *
 * in: MAKE CommunityBits CommunityBansSpendingBelowZero
 */
function stats($list) {return t\stats($list);}

/**
 * these (ARG): (ARG)
 *
 * in: MAKE Gifts ABrandNewRecurringDonationCanBeCompleted
 *     MAKE Gifts ASecondRecurringDonationCanBeCompleted
 *     MAKE Gifts ARecurringDonationCannotBeCompleted
 *     MAKE Gifts ANonmemberChoosesADonation
 *     MAKE Risk Setup
 */
function these($thing, $list) {return t\these($thing, $list);}

/**
 * count (ARG) is (ARG)
 *
 * in: TEST Gifts ABrandNewRecurringDonationCanBeCompleted
 *     TEST Gifts ARecurringDonationCannotBeCompleted
 *     TEST Gifts ANonmemberChoosesADonation
 *     TEST Invoices UnpaidInvoicesGetHandled
 *     TEST Invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     TEST Bank ANonmemberHasATargetAndRefills
 *     TEST Bank AMembersBankAccountGetsVerified
 */
function countIs($what, $count) {return t\count($what, $count);}

