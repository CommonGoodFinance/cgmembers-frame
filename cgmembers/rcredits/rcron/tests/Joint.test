<?php
//
// Feature: Joint
//   AS a pair of members with a joint account
//   WE WANT to transfer money from our bank account to our joint account
//   SO BOTH OF US can make purchases with those funds.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rcron.steps';

class rcronJoint extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Joint';
  const FEATURE_NAME = 'rcron Test - Joint';
  const DESCRIPTION = 'Joint';
  const MODULE = 'rcron';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    global $testModule; $testModule = self::MODULE;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rcron.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName | floor | minimum | flags     | achMin | risks   | jid  |'
    . '\\| .ZZA | Abe One  |     0 |     100 | ok,joined | 30     | hasBank | .ZZB |'
    . '\\| .ZZB | Bea Two  |     0 |       0 | ok,joined | 10     |         | .ZZA |"');
    And__('relations: "ASSOC'
    . '\\| id | main | agent | permission |'
    . '\\| 1  | .ZZA | .ZZB  | joint      |'
    . '\\| 2  | .ZZB | .ZZA  | joint      |"');
    And__('transactions: "ASSOC'
    . '\\| xid | created   | type   | amount | from | to   | purpose |'
    . '\\| 1   | %today-6m | signup |    250 | ctty | .ZZA | signup  |'
    . '\\| 2   | %today-6m | signup |    250 | ctty | .ZZB | signup  |"');
    Then_('balances: "ASSOC'
    . '\\| id   |    r |'
    . '\\| ctty | -500 |'
    . '\\| .ZZA |  250 |'
    . '\\| .ZZB |  250 |"');
    break;


    }
  }

  // Scenario: a joint account needs refilling
  public function testAJointAccountNeedsRefilling_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | balance | rewards |'
    . '\\| .ZZA |   50.00 |     250 |'
    . '\\| .ZZB |   49.99 |     250 |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| txid | payer | amount |'
    . '\\|    1 | .ZZA  | -30    |"');
    And__('we notice "under min|banked|bank tx number" to member ".ZZA" with subs: "ASSOC'
    . '\\| action    | amount | checkNum |'
    . '\\| draw from | $30    |        1 |"');
  }

  // Scenario: a joint account does not need refilling
  public function testAJointAccountDoesNotNeedRefilling_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | balance | rewards |'
    . '\\| .ZZA |   50.01 |      20 |'
    . '\\| .ZZB |   49.99 |      20 |"');
    When_('cron runs "bank"');
    Then_('bank transfer count is 0');
  }

}