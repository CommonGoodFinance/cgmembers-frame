<?php
//
// Feature: Trust
//   AS a Common Good Community
//   I WANT to know how much each member is trusted by the others
//   SO I can choose the most trusted members as candidates for Trustee
//   AND identify disjoint circles of trust that may flag potential security risks.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rcron.steps';

class rcronTrust extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Trust';
  const FEATURE_NAME = 'rcron Test - Trust';
  const DESCRIPTION = 'Trust';
  const MODULE = 'rcron';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rcron.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName   | email | flags   |'
    . '\\| .ZZA | Abe One    | a@    | ok,bona |'
    . '\\| .ZZB | Bea Two    | b@    | ok,bona |'
    . '\\| .ZZC | Corner Pub | c@    | ok,co   |'
    . '\\| .ZZD | Dee Four   | d@    | ok      |'
    . '\\| .ZZE | Eve Five   | e@    | ok      |'
    . '\\| .ZZF | Flo Six    | f@    | ok      |'
    . '\\| .ZZG | Guy Seven  | g@    | ok      |'
    . '\\| .ZZH | Hal Eight  | h@    | ok      |'
    . '\\| .ZZI | Ida Nine   | i@    | ok      |"');
    And__('proxies: "ASSOC'
    . '\\| person | proxy | priority |'
    . '\\| .ZZA   | .ZZB  |        1 |'
    . '\\| .ZZA   | .ZZD  |        2 |'
    . '\\| .ZZB   | .ZZA  |        1 |'
    . '\\| .ZZB   | .ZZE  |        2 |'
    . '\\| .ZZD   | .ZZA  |        1 |'
    . '\\| .ZZD   | .ZZF  |        2 |'
    . '\\| .ZZE   | .ZZD  |        1 |'
    . '\\| .ZZE   | .ZZB  |        2 |'
    . '\\| .ZZF   | .ZZD  |        1 |'
    . '\\| .ZZF   | .ZZE  |        2 |'
    . '\\| .ZZG   | .ZZH  |        1 |'
    . '\\| .ZZG   | .ZZI  |        2 |'
    . '\\| .ZZH   | .ZZI  |        1 |'
    . '\\| .ZZH   | .ZZG  |        2 |'
    . '\\| .ZZI   | .ZZG  |        1 |'
    . '\\| .ZZI   | .ZZF  |        2 |"');
    break;


    }
  }

  // Scenario: we calculate trust
  public function testWeCalculateTrust_0() {
    $this->setUp2(__FUNCTION__, 0);
    When_('cron runs "trust"');
    Then_('members: "ASSOC'
    . '\\| id   | trust |'
    . '\\| .ZZA | 12.98 |'
    . '\\| .ZZB |  9.47 |'
    . '\\| .ZZC |     0 |'
    . '\\| .ZZD | 12.42 |'
    . '\\| .ZZE |  5.72 |'
    . '\\| .ZZF |  6.79 |'
    . '\\| .ZZG |  7.81 |'
    . '\\| .ZZH |  5.90 |'
    . '\\| .ZZI |  7.47 |"');
  }

}