<?php
//
// Feature: Recache
//   AS a member
//   I WANT my cached rCredits balances to reflect reality
//   SO I don't lose money or get confused.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rcron.steps';

class rcronRecache extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Recache';
  const FEATURE_NAME = 'rcron Test - Recache';
  const DESCRIPTION = 'Recache';
  const MODULE = 'rcron';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rcron.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "DATA'
    . '\\| id   | fullName   | dw | email | flags      |'
    . '\\| .ZZA | Abe One    |  1 | a@    | ok,dw,bona |'
    . '\\| .ZZB | Bea Two    |  0 | b@    | ok,dw,bona |'
    . '\\| .ZZC | Corner Pub |    | c@    | ok,dw,co   |"');
    And__('balances: "DATA'
    . '\\| id   | dw/usd |'
    . '\\| .ZZA |      5 |"');
    And__('transactions: "DATA'
    . '\\| xid   | created   | type       | amount | from | to   | purpose | taking |'
    . '\\| .AAAB | %today-6m | %TX_SIGNUP |     10 | ctty | .ZZA | signup  | 0      |"');
    Then_('balances: "DATA'
    . '\\| id   | r  | usd | rewards |'
    . '\\| .ZZA | 10 |   5 |      10 |'
    . '\\| .ZZB |  0 |   0 |       0 |"');
    break;


    }
  }

  // Scenario: Balances get out of whack
  public function testBalancesGetOutOfWhack_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "DATA'
    . '\\| id     | r  | usd  | rewards | minimum | floor |'
    . '\\| .ZZA   |  0 | 8.52 |       0 |       0 |     2 |'
    . '\\| .ZZB   | 20 |    0 |       0 |     -10 |   -50 |"');
    When_('cron runs "recache"');
    Then_('we tell staff "cache mismatch" with subs: "DATA'
    . '\\| id   | key     | is   | shouldBe |'
    . '\\| .ZZA | r       |    0 |       10 |'
    . '\\| .ZZA | usd     | 8.52 |        5 |'
    . '\\| .ZZA | rewards |    0 |       10 |'
    . '\\| .ZZA | minimum |    0 |        2 |'
    . '\\| .ZZB | r       |   20 |        0 |'
    . '\\| .ZZB | minimum |  -10 |        0 |"');
    And__('balances: "DATA'
    . '\\| id     | r  | usd | rewards | minimum |'
    . '\\| .ZZA   | 10 |   5 |      10 |       2 |'
    . '\\| .ZZB   |  0 |   ? |       0 |       0 |"');
  }

  // Scenario: Balances get a tiny bit out of whack
  public function testBalancesGetATinyBitOutOfWhack_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "DATA'
    . '\\| id     | r       | usd |'
    . '\\| .ZZA   | 10.0001 |   5 |'
    . '\\| .ZZB   |       0 |   ? |"');
    When_('cron runs "recache"');
    Then_('we tell staff "cache mismatch" with subs: "DATA'
    . '\\| id   | key     | is      | shouldBe |'
    . '\\| .ZZA | r       | 10.0001 |       10 |"');
  }

}