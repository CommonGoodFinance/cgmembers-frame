<?php
//
// Feature: Bank
//   AS a member
//   I WANT credit to flow from my bank account
//   SO I can spend it with my rCard.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rcron.steps';

class rcronBank extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Bank';
  const FEATURE_NAME = 'rcron Test - Bank';
  const DESCRIPTION = 'Bank';
  const MODULE = 'rcron';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rcron.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName | floor | minimum | flags | achMin | risks   |'
    . '\\| .ZZA | Abe One  |     0 |     100 | co,ok | 30     | hasBank |'
    . '\\| .ZZB | Bea Two  |   -50 |     100 | ok    | 30     |         |"');
    And__('relations: "ASSOC'
    . '\\| id | main | agent | draw |'
    . '\\| 1  | .ZZA | .ZZB  | 1    |"');
    break;


    }
  }

  // Scenario: a member is barely below minimum
  public function testAMemberIsBarelyBelowMinimum_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance |'
    . '\\| .ZZA |      20 |      20 | 99.99   |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| txid | payer | amount | channel  |'
    . '\\|    1 | .ZZA  | -30    | %TX_CRON |"');
    And__('we notice "under min|banked|bank tx number" to member ".ZZA" with subs: "ASSOC'
    . '\\| action    | amount | checkNum |'
    . '\\| draw from | $30    |        1 |"');
  }

  // Scenario: a member has a negative balance
  public function testAMemberHasANegativeBalance_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance |'
    . '\\| .ZZA |      20 |      20 | -50     |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| txid | payer | amount | channel  |'
    . '\\|    1 | .ZZA  | -150   | %TX_CRON |"');
    And__('we notice "under min|banked|bank tx number" to member ".ZZA" with subs: "ASSOC'
    . '\\| action    | amount | checkNum |'
    . '\\| draw from | $150   |        1 |"');
  }

  // Scenario: an unbanked member barely below minimum draws on another account
  public function testAnUnbankedMemberBarelyBelowMinimumDrawsOnAnotherAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r     |'
    . '\\| .ZZA | 200   |'
    . '\\| .ZZB | 99.99 |"');
    When_('cron runs "bank"');
    Then_('transactions: "ASSOC'
    . '\\| xid | type     | amount | from | to   | goods           | purpose      |'
    . '\\|   1 | transfer |     30 | .ZZA | .ZZB | %R_FOR_NONGOODS | automatic transfer to NEW.ZZB,automatic transfer from NEW.ZZA |"');
    And__('we notice "under min|drew" to member ".ZZB" with subs: "ASSOC'
    . '\\| amount |'
    . '\\| $30    |"');
  }

  // Scenario: an unbanked member barely below minimum cannot draw on another account
  public function testAnUnbankedMemberBarelyBelowMinimumCannotDrawOnAnotherAccount_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r     |'
    . '\\| .ZZA | 0     |'
    . '\\| .ZZB | 99.99 |"');
    When_('cron runs "bank"');
    Then_('we notice "under min|cannot draw" to member ".ZZB"');
  }

  // Scenario: a member is at minimum
  public function testAMemberIsAtMinimum_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance |'
    . '\\| .ZZA |      20 |      20 |     100 |"');
    When_('cron runs "bank"');
    Then_('bank transfer count is 0');
  }

  // Scenario: a member is well below minimum
  public function testAMemberIsWellBelowMinimum_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance | minimum |'
    . '\\| .ZZA |      25 |      25 |      50 |     151 |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| txid | payer | amount              | channel  |'
    . '\\|    1 | .ZZA  | %(-100 - %R_ACHMIN) | %TX_CRON |"');
    And__('we notice "under min|banked|bank tx number" to member ".ZZA" with subs: "ASSOC'
    . '\\| action    | amount              | checkNum |'
    . '\\| draw from | $%(100 + %R_ACHMIN) |        1 |"');
  }

  // Scenario: a member is under minimum but already requested barely enough funds from the bank
  public function testAMemberIsUnderMinimumButAlreadyRequestedBarelyEnoughFundsFromTheBank_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance |'
    . '\\| .ZZA |      20 |      20 |      20 |'
    . '\\| .ZZB |      20 |      20 |     100 |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| payer | amount | channel  |'
    . '\\| .ZZA  |    -80 | %TX_CRON |"');
    When_('cron runs "bank"');
    Then_('bank transfer count is 1');
  }

  // Scenario: a member is under minimum and has requested insufficient funds from the bank
  public function testAMemberIsUnderMinimumAndHasRequestedInsufficientFundsFromTheBank_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('members: "ASSOC'
    . '\\| id   | fullName | floor | minimum | flags | achMin | risks   |'
    . '\\| .ZZD | Dee Four |   -50 |     300 | ok    | 30     | hasBank |"');
    And__('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance |'
    . '\\| .ZZD |      20 |      20 |      20 |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| payer | amount |'
    . '\\| .ZZD  |   -280 |"');
    Given('balances: "ASSOC'
    . '\\| id   | rewards | savings | balance |'
    . '\\| .ZZD |      20 |      20 |   19.99 |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| payer | amount |'
    . '\\| .ZZD  |   -310 |"');
  }

  // Scenario: a member is under minimum only because rewards are reserved
  public function testAMemberIsUnderMinimumOnlyBecauseRewardsAreReserved_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('members: "ASSOC'
    . '\\| id   | fullName | minimum | flags | achMin | risks   |'
    . '\\| .ZZD | Dee Four |     100 | ok    | 10     | hasBank |"');
    And__('balances: "ASSOC'
    . '\\| id   | r   | rewards | savings |'
    . '\\| .ZZD | 110 |      30 |      30 |"');
    When_('cron runs "bank"');
    Then_('usd transfers: "ASSOC'
    . '\\| payer | amount |'
    . '\\| .ZZD  |    -20 |"');
  }

  // Scenario: a member member with zero minimum has balance below minimum
  public function testAMemberMemberWithZeroMinimumHasBalanceBelowMinimum_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | minimum | r   |'
    . '\\| .ZZA |       0 | -10 |"');
    When_('cron runs "bank"');
    Then_('bank transfer count is 0');
  }

  // Scenario: an unbanked member with zero minimum has balance below minimum
  public function testAnUnbankedMemberWithZeroMinimumHasBalanceBelowMinimum_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | minimum | r   |'
    . '\\| .ZZA |       0 |   0 |'
    . '\\| .ZZB |       0 | -10 |"');
    When_('cron runs "bank"');
    Then_('bank transfer count is 0');
  }

  // Scenario: a member has a deposited but not completed transfer
  public function testAMemberHasADepositedButNotCompletedTransfer_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r   |'
    . '\\| .ZZA |  80 |'
    . '\\| .ZZB | 100 |"');
    And__('usd transfers: "ASSOC'
    . '\\| txid | payer | amount | created   | completed | deposit    |'
    . '\\| 5001 | .ZZA  |    -50 | %today-4d |         0 | %(%today-%R_USDTX_DAYS*%DAY_SECS-9) |"');
    When_('cron runs "bank"');
    Then_('bank transfer count is 1');
  }

}