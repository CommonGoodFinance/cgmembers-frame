<?php
//
// Feature: Tickle
//   AS a member
//   I WANT to be reminded of things to do, when it's time,
//   SO I don't get forgotten and miss out on stuff.

require_once __DIR__ . '/../../../gherkin/test-defs.php';
require_once __DIR__ . '/../rcron.steps';

class rcronTickle extends DrupalWebTestCase {
  var $subs; // percent parameters (to Given(), etc.) and their replacements (eg: %random1 becomes some random string)
  var $sceneName;
  const SHORT_NAME = 'Tickle';
  const FEATURE_NAME = 'rcron Test - Tickle';
  const DESCRIPTION = 'Tickle';
  const MODULE = 'rcron';

  public function gherkin($statement, $type) {
    $this->assertTrue(gherkinGuts($statement, $type), $statement, $this->sceneName);
  }
  
  public static function getInfo() {
    return array(
      'short_name' => self::SHORT_NAME,
      'name' => self::FEATURE_NAME,
      'description' => self::DESCRIPTION,
      'group' => ucwords(self::MODULE)
    );
  }

  public function setUp() {} // must be compatible with DrupalWebTestCase::setUp()
  
  public function setUp2($sceneName, $variant = '') {
    global $sceneTest; $sceneTest = $this;
    parent::setUp(self::MODULE);

    $this->subs = usualSubs();
    $this->sceneName = __FUNCTION__;
    if (function_exists('extraSetup')) extraSetup($this); // defined in rcron.steps
    $this->sceneName = $sceneName;

    switch ($variant) {
    default: // fall through to case(0)
    case(0):
    Given('members: "ASSOC'
    . '\\| id   | fullName | email | flags   | access    | floor |'
    . '\\| .ZZA | Abe One  | a@    |         | %today-1d |     0 |'
    . '\\| .ZZB | Bea Two  | b@    |         | %today-2d |     0 |'
    . '\\| .ZZD | Dee Four | d@    |         | %today-8d |     0 |'
    . '\\| .ZZE | Eve Five | e@    | ok,bona | %today-3m |     0 |'
    . '\\| .ZZF | Flo Six  | f@    | ok      | %today-3m |     0 |"');
    break;


    }
  }

  // Scenario: A newbie has not taken the first step
  public function testANewbieHasNotTakenTheFirstStep_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invites: "ASSOC'
    . '\\| email | inviter | code   | invited   | invitee |'
    . '\\| d@    | .ZZE    | codeD1 | %today-9d | .ZZD    |"');
    And__('member ".ZZD" has done step "contact"');
    When_('cron runs "tickle"');
    Then_('we notice "do step one|sign in" to member ".ZZD"');
    And__('we notice "invitee slow" to member ".ZZE" with subs: "ASSOC'
    . '\\| fullName | elapsed | step |'
    . '\\| Dee Four |       8 | sign |"');
  }

  // Scenario: A newbie has taken some steps but not all
  public function testANewbieHasTakenSomeStepsButNotAll_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('member ".ZZA" has done step "sign contact donate proxies prefs photo"');
    When_('cron runs "tickle"');
    Then_('we notice "take another step|sign in" to member ".ZZA"');
  }

  // Scenario: A nonmember has not accepted the invitation
  public function testANonmemberHasNotAcceptedTheInvitation_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invites: "ASSOC'
    . '\\| email           | inviter | code   | invited   |'
    . '\\| zot@example.com | .ZZA    | codeA1 | %today-8d |"');
    When_('cron runs "tickle"');
    Then_('we email "nonmember" to member "zot@example.com" with subs: "ASSOC'
    . '\\| inviterName | code   | site        | nudge                                      | noFrame |'
    . '\\| Abe One     | codeA1 | %R_SITE_URL | We will send you just one more reminder(s) | 1       |"');
    And__('we notice "invite languishing" to member ".ZZA" with subs: "ASSOC'
    . '\\| email           | elapsed |'
    . '\\| zot@example.com |       8 |"');
  }

  // Scenario: A nonmember has accepted the invitation
  public function testANonmemberHasAcceptedTheInvitation_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invites: "ASSOC'
    . '\\| email           | inviter | code   | invited   | invitee |'
    . '\\| zot@example.com | .ZZA    | codeA1 | %today-8d | .ZZB    |"');
    When_('cron runs "tickle"');
    Then_('we do not email "nonmember" to member "b@example.com"');
  }

  // Scenario: A nonmember has accepted an invitation from someone else instead
  public function testANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('invites: "ASSOC'
    . '\\| email         | inviter | code   | invited   | invitee |'
    . '\\| b@example.com | .ZZA    | codeA1 | %today-8d | 0       |'
    . '\\| b@example.com | .ZZD    | codeA1 | %today-5d | .ZZB    |"');
    When_('cron runs "tickle"');
    Then_('we do not email "nonmember" to member "b@example.com"');
  }

  // Scenario: A member gets a credit line
  public function testAMemberGetsACreditLine_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r   |'
    . '\\| .ZZE | 500 |"');
    And__('transactions: "ASSOC'
    . '\\| created   | type     | amount | from | to   | purpose |'
    . '\\| %today-1m | transfer |    300 | .ZZE | .ZZF | gift    |"');
    When_('cron runs "tickle"');
    Then_('members have: "ASSOC'
    . '\\| id   | floor |'
    . '\\| .ZZE |   -50 |"');
    And__('we notice "new floor|no floor effect" to member ".ZZE" with subs: "ASSOC'
    . '\\| limit |'
    . '\\|  $50 |"');
  }

  // Scenario: A member gets a bigger credit line after several months
  public function testAMemberGetsABiggerCreditLineAfterSeveralMonths_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r    |'
    . '\\| .ZZE | 5000 |"');
    And__('transactions: "ASSOC'
    . '\\| created   | type     | amount | from | to   | purpose |'
    . '\\| %today-6m | transfer |    300 | .ZZE | .ZZF | gift    |'
    . '\\| %today-5m | transfer |   1500 | .ZZE | .ZZF | gift    |"');
    When_('cron runs "tickle"');
    Then_('members have: "ASSOC'
    . '\\| id   | floor |'
    . '\\| .ZZE |  -300 |"');
    And__('we notice "new floor|no floor effect" to member ".ZZE" with subs: "ASSOC'
    . '\\| limit |'
    . '\\| $300 |"');
  }

  // Scenario: A member gets no new credit line because it's the wrong day
  public function testAMemberGetsNoNewCreditLineBecauseItsTheWrongDay_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r   |'
    . '\\| .ZZE | 500 |"');
    And__('transactions: "ASSOC'
    . '\\| created   | type     | amount | from | to   | purpose |'
    . '\\| %today-5w | transfer |    300 | .ZZE | .ZZF | gift    |"');
    When_('cron runs "tickle"');
    Then_('members have: "ASSOC'
    . '\\| id   | floor |'
    . '\\| .ZZE |     0 |"');
  }

  // Scenario: A member gets no new credit line because the change would be minimal
  public function testAMemberGetsNoNewCreditLineBecauseTheChangeWouldBeMinimal_0() {
    $this->setUp2(__FUNCTION__, 0);
    Given('balances: "ASSOC'
    . '\\| id   | r   |'
    . '\\| .ZZE | 500 |"');
    And__('members have: "ASSOC'
    . '\\| id   | floor |'
    . '\\| .ZZE |    49 |"');
    And__('transactions: "ASSOC'
    . '\\| created   | type     | amount | from | to   | purpose |'
    . '\\| %today-5w | transfer |    300 | .ZZE | .ZZF | gift    |"');
    When_('cron runs "tickle"');
    Then_('members have: "ASSOC'
    . '\\| id   | floor |'
    . '\\| .ZZE |    49 |"');
  }

}